
LEDdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003054  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800322c  0800322c  0000422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0000423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003240  08003240  00004240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003244  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003250  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003250  000050b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a403  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a46  00000000  00000000  0000f43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00010e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  00011900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d617  00000000  00000000  000120d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab84  00000000  00000000  0002f6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c20f3  00000000  00000000  0003a26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  000fc3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003214 	.word	0x08003214

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003214 	.word	0x08003214

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa90 	bl	8000742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f88d 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f965 	bl	80004f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f8c9 	bl	80003c0 <MX_ADC1_Init>
  {

	  while (1)
	  {
	      // Start ADC conversion sequence (3 channels)
	      HAL_ADC_Start(&hadc1);
 800022e:	4838      	ldr	r0, [pc, #224]	@ (8000310 <main+0xf8>)
 8000230:	f000 feca 	bl	8000fc8 <HAL_ADC_Start>

	      // Channel 1 → IMON (PA0)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000234:	f04f 31ff 	mov.w	r1, #4294967295
 8000238:	4835      	ldr	r0, [pc, #212]	@ (8000310 <main+0xf8>)
 800023a:	f000 ff81 	bl	8001140 <HAL_ADC_PollForConversion>
	      imon_raw = HAL_ADC_GetValue(&hadc1);
 800023e:	4834      	ldr	r0, [pc, #208]	@ (8000310 <main+0xf8>)
 8000240:	f001 f856 	bl	80012f0 <HAL_ADC_GetValue>
 8000244:	4603      	mov	r3, r0
 8000246:	4a33      	ldr	r2, [pc, #204]	@ (8000314 <main+0xfc>)
 8000248:	6013      	str	r3, [r2, #0]
	      float v_imon = (imon_raw * 3.3f) / 4095.0f;
 800024a:	4b32      	ldr	r3, [pc, #200]	@ (8000314 <main+0xfc>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	ee07 3a90 	vmov	s15, r3
 8000252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000256:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000318 <main+0x100>
 800025a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800025e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 800031c <main+0x104>
 8000262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000266:	edc7 7a01 	vstr	s15, [r7, #4]
	      imon_current = v_imon / (14.0f * RCS_VALUE);
 800026a:	ed97 7a01 	vldr	s14, [r7, #4]
 800026e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000320 <main+0x108>
 8000272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000276:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <main+0x10c>)
 8000278:	edc3 7a00 	vstr	s15, [r3]

	      // Channel 2 → VOUT (PA1)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800027c:	f04f 31ff 	mov.w	r1, #4294967295
 8000280:	4823      	ldr	r0, [pc, #140]	@ (8000310 <main+0xf8>)
 8000282:	f000 ff5d 	bl	8001140 <HAL_ADC_PollForConversion>
	      vout_raw = HAL_ADC_GetValue(&hadc1);
 8000286:	4822      	ldr	r0, [pc, #136]	@ (8000310 <main+0xf8>)
 8000288:	f001 f832 	bl	80012f0 <HAL_ADC_GetValue>
 800028c:	4603      	mov	r3, r0
 800028e:	4a26      	ldr	r2, [pc, #152]	@ (8000328 <main+0x110>)
 8000290:	6013      	str	r3, [r2, #0]
	      float v_vout_scaled = (vout_raw * 3.3f) / 4095.0f;
 8000292:	4b25      	ldr	r3, [pc, #148]	@ (8000328 <main+0x110>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	ee07 3a90 	vmov	s15, r3
 800029a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800029e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000318 <main+0x100>
 80002a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002a6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800031c <main+0x104>
 80002aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ae:	edc7 7a00 	vstr	s15, [r7]
	      vout_voltage = (v_vout_scaled / 0.03226f) * VOUT_CAL_FACTOR;
 80002b2:	ed97 7a00 	vldr	s14, [r7]
 80002b6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800032c <main+0x114>
 80002ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002be:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000330 <main+0x118>
 80002c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <main+0x11c>)
 80002c8:	edc3 7a00 	vstr	s15, [r3]


	      // Channel 3 → POT (PA2)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002cc:	f04f 31ff 	mov.w	r1, #4294967295
 80002d0:	480f      	ldr	r0, [pc, #60]	@ (8000310 <main+0xf8>)
 80002d2:	f000 ff35 	bl	8001140 <HAL_ADC_PollForConversion>
	      pot_value = HAL_ADC_GetValue(&hadc1);
 80002d6:	480e      	ldr	r0, [pc, #56]	@ (8000310 <main+0xf8>)
 80002d8:	f001 f80a 	bl	80012f0 <HAL_ADC_GetValue>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a16      	ldr	r2, [pc, #88]	@ (8000338 <main+0x120>)
 80002e0:	6013      	str	r3, [r2, #0]
	      pot_voltage = (pot_value * 3.3f) / 4095.0f;
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <main+0x120>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	ee07 3a90 	vmov	s15, r3
 80002ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000318 <main+0x100>
 80002f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002f6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800031c <main+0x104>
 80002fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <main+0x124>)
 8000300:	edc3 7a00 	vstr	s15, [r3]

	      HAL_Delay(500);
 8000304:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000308:	f000 fa8c 	bl	8000824 <HAL_Delay>
	  {
 800030c:	bf00      	nop
 800030e:	e78e      	b.n	800022e <main+0x16>
 8000310:	20000028 	.word	0x20000028
 8000314:	200000a4 	.word	0x200000a4
 8000318:	40533333 	.word	0x40533333
 800031c:	457ff000 	.word	0x457ff000
 8000320:	4093d70b 	.word	0x4093d70b
 8000324:	200000a8 	.word	0x200000a8
 8000328:	2000009c 	.word	0x2000009c
 800032c:	3d042310 	.word	0x3d042310
 8000330:	3f974bc7 	.word	0x3f974bc7
 8000334:	200000a0 	.word	0x200000a0
 8000338:	20000094 	.word	0x20000094
 800033c:	20000098 	.word	0x20000098

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b094      	sub	sp, #80	@ 0x50
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2238      	movs	r2, #56	@ 0x38
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f002 ff34 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000362:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000366:	f001 ff8f 	bl	8002288 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000372:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	2340      	movs	r3, #64	@ 0x40
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000378:	2300      	movs	r3, #0
 800037a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f002 f835 	bl	80023f0 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800038c:	f000 f8f0 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000394:	2301      	movs	r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fb33 	bl	8002a14 <HAL_RCC_ClockConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003b4:	f000 f8dc 	bl	8000570 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3750      	adds	r7, #80	@ 0x50
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08c      	sub	sp, #48	@ 0x30
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2220      	movs	r2, #32
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 feef 	bl	80031bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003de:	4b41      	ldr	r3, [pc, #260]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80003e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003e6:	4b3f      	ldr	r3, [pc, #252]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80003e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ee:	4b3d      	ldr	r3, [pc, #244]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b3b      	ldr	r3, [pc, #236]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003fa:	4b3a      	ldr	r3, [pc, #232]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000400:	4b38      	ldr	r3, [pc, #224]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000402:	2201      	movs	r2, #1
 8000404:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000406:	4b37      	ldr	r3, [pc, #220]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000408:	2204      	movs	r2, #4
 800040a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800040c:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <MX_ADC1_Init+0x124>)
 800040e:	2200      	movs	r2, #0
 8000410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000412:	4b34      	ldr	r3, [pc, #208]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000414:	2200      	movs	r2, #0
 8000416:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000418:	4b32      	ldr	r3, [pc, #200]	@ (80004e4 <MX_ADC1_Init+0x124>)
 800041a:	2204      	movs	r2, #4
 800041c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041e:	4b31      	ldr	r3, [pc, #196]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000426:	4b2f      	ldr	r3, [pc, #188]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <MX_ADC1_Init+0x124>)
 800042e:	2200      	movs	r2, #0
 8000430:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000432:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800043a:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <MX_ADC1_Init+0x124>)
 800043c:	2200      	movs	r2, #0
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000440:	4b28      	ldr	r3, [pc, #160]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000448:	4826      	ldr	r0, [pc, #152]	@ (80004e4 <MX_ADC1_Init+0x124>)
 800044a:	f000 fc39 	bl	8000cc0 <HAL_ADC_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000454:	f000 f88c 	bl	8000570 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000460:	4619      	mov	r1, r3
 8000462:	4820      	ldr	r0, [pc, #128]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000464:	f001 fbee 	bl	8001c44 <HAL_ADCEx_MultiModeConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800046e:	f000 f87f 	bl	8000570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000472:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_ADC1_Init+0x128>)
 8000474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000476:	230c      	movs	r3, #12
 8000478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800047a:	2306      	movs	r3, #6
 800047c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047e:	237f      	movs	r3, #127	@ 0x7f
 8000480:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000482:	2304      	movs	r3, #4
 8000484:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4619      	mov	r1, r3
 800048e:	4815      	ldr	r0, [pc, #84]	@ (80004e4 <MX_ADC1_Init+0x124>)
 8000490:	f000 ff3c 	bl	800130c <HAL_ADC_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800049a:	f000 f869 	bl	8000570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_ADC1_Init+0x12c>)
 80004a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004a2:	2312      	movs	r3, #18
 80004a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004a6:	2307      	movs	r3, #7
 80004a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	480d      	ldr	r0, [pc, #52]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80004b0:	f000 ff2c 	bl	800130c <HAL_ADC_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004ba:	f000 f859 	bl	8000570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_ADC1_Init+0x130>)
 80004c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004c2:	2318      	movs	r3, #24
 80004c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <MX_ADC1_Init+0x124>)
 80004cc:	f000 ff1e 	bl	800130c <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80004d6:	f000 f84b 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	3730      	adds	r7, #48	@ 0x30
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028
 80004e8:	04300002 	.word	0x04300002
 80004ec:	08600004 	.word	0x08600004
 80004f0:	0c900008 	.word	0x0c900008

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_GPIO_Init+0x74>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_GPIO_Init+0x74>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_GPIO_Init+0x74>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_GPIO_Init+0x74>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <MX_GPIO_Init+0x74>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_GPIO_Init+0x74>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	480b      	ldr	r0, [pc, #44]	@ (800056c <MX_GPIO_Init+0x78>)
 8000540:	f001 fe8a 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000544:	2308      	movs	r3, #8
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_GPIO_Init+0x78>)
 800055c:	f001 fcfa 	bl	8001f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48000400 	.word	0x48000400

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HAL_MspInit+0x44>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6613      	str	r3, [r2, #96]	@ 0x60
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_MspInit+0x44>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005b2:	f001 ff0d 	bl	80023d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b09a      	sub	sp, #104	@ 0x68
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	2244      	movs	r2, #68	@ 0x44
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fde9 	bl	80031bc <memset>
  if(hadc->Instance==ADC1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80005f2:	d134      	bne.n	800065e <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80005fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fbe9 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000610:	f7ff ffae 	bl	8000570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000618:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 800061a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800061e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_ADC_MspInit+0xa4>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IMON_Pin|Vout_Pin|POT_Pin;
 8000644:	2307      	movs	r3, #7
 8000646:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 fc7b 	bl	8001f54 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800065e:	bf00      	nop
 8000660:	3768      	adds	r7, #104	@ 0x68
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <NMI_Handler+0x4>

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <MemManage_Handler+0x4>

08000684 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <UsageFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c2:	f000 f891 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f4:	f7ff ffea 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800071e:	f002 fd55 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000722:	f7ff fd79 	bl	8000218 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000734:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 8000738:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800073c:	200000b0 	.word	0x200000b0

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>

08000742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f001 fbcf 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000752:	200f      	movs	r0, #15
 8000754:	f000 f80e 	bl	8000774 <HAL_InitTick>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	e001      	b.n	8000768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000764:	f7ff ff0a 	bl	800057c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000768:	79fb      	ldrb	r3, [r7, #7]

}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_InitTick+0x68>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d022      	beq.n	80007ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_InitTick+0x6c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_InitTick+0x68>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000794:	fbb1 f3f3 	udiv	r3, r1, r3
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fbcc 	bl	8001f3a <HAL_SYSTICK_Config>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10f      	bne.n	80007c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b0f      	cmp	r3, #15
 80007ac:	d809      	bhi.n	80007c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	2200      	movs	r2, #0
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	f001 fba6 	bl	8001f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <HAL_InitTick+0x70>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e007      	b.n	80007d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e004      	b.n	80007d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e001      	b.n	80007d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_IncTick+0x1c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_IncTick+0x20>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a03      	ldr	r2, [pc, #12]	@ (8000804 <HAL_IncTick+0x1c>)
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	200000ac 	.word	0x200000ac
 8000808:	20000008 	.word	0x20000008

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000ac 	.word	0x200000ac

08000824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff ffee 	bl	800080c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d004      	beq.n	8000848 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_Delay+0x40>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000848:	bf00      	nop
 800084a:	f7ff ffdf 	bl	800080c <HAL_GetTick>
 800084e:	4602      	mov	r2, r0
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	429a      	cmp	r2, r3
 8000858:	d8f7      	bhi.n	800084a <HAL_Delay+0x26>
  {
  }
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000008 	.word	0x20000008

08000868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	609a      	str	r2, [r3, #8]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	609a      	str	r2, [r3, #8]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3360      	adds	r3, #96	@ 0x60
 80008e2:	461a      	mov	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <LL_ADC_SetOffset+0x44>)
 80008f2:	4013      	ands	r3, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	4313      	orrs	r3, r2
 8000900:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000908:	bf00      	nop
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	03fff000 	.word	0x03fff000

08000918 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3360      	adds	r3, #96	@ 0x60
 8000926:	461a      	mov	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3360      	adds	r3, #96	@ 0x60
 8000954:	461a      	mov	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800096e:	bf00      	nop
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800097a:	b480      	push	{r7}
 800097c:	b087      	sub	sp, #28
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3360      	adds	r3, #96	@ 0x60
 800098a:	461a      	mov	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	431a      	orrs	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3360      	adds	r3, #96	@ 0x60
 80009c0:	461a      	mov	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	615a      	str	r2, [r3, #20]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b087      	sub	sp, #28
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3330      	adds	r3, #48	@ 0x30
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	4413      	add	r3, r2
 8000a50:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f003 031f 	and.w	r3, r3, #31
 8000a5c:	211f      	movs	r1, #31
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	401a      	ands	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	0e9b      	lsrs	r3, r3, #26
 8000a6a:	f003 011f 	and.w	r1, r3, #31
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	f003 031f 	and.w	r3, r3, #31
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a7e:	bf00      	nop
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b087      	sub	sp, #28
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3314      	adds	r3, #20
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	0e5b      	lsrs	r3, r3, #25
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	0d1b      	lsrs	r3, r3, #20
 8000ab2:	f003 031f 	and.w	r3, r3, #31
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	0d1b      	lsrs	r3, r3, #20
 8000ac4:	f003 031f 	and.w	r3, r3, #31
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ad4:	bf00      	nop
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000af8:	43db      	mvns	r3, r3
 8000afa:	401a      	ands	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0318 	and.w	r3, r3, #24
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b04:	40d9      	lsrs	r1, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	400b      	ands	r3, r1
 8000b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0007ffff 	.word	0x0007ffff

08000b28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 031f 	and.w	r3, r3, #31
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6093      	str	r3, [r2, #8]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b98:	d101      	bne.n	8000b9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000be8:	d101      	bne.n	8000bee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c10:	f043 0201 	orr.w	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <LL_ADC_IsEnabled+0x18>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <LL_ADC_IsEnabled+0x1a>
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c5e:	f043 0204 	orr.w	r2, r3, #4
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d101      	bne.n	8000c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d101      	bne.n	8000cb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e167      	b.n	8000faa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d109      	bne.n	8000cfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fc6b 	bl	80005c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff3f 	bl	8000b84 <LL_ADC_IsDeepPowerDownEnabled>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff25 	bl	8000b60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff5a 	bl	8000bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d115      	bne.n	8000d52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff3e 	bl	8000bac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d30:	4ba0      	ldr	r3, [pc, #640]	@ (8000fb4 <HAL_ADC_Init+0x2f4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	099b      	lsrs	r3, r3, #6
 8000d36:	4aa0      	ldr	r2, [pc, #640]	@ (8000fb8 <HAL_ADC_Init+0x2f8>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	099b      	lsrs	r3, r3, #6
 8000d3e:	3301      	adds	r3, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f9      	bne.n	8000d46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff3c 	bl	8000bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d66:	f043 0210 	orr.w	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff75 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8000d88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8100 	bne.w	8000f98 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80fc 	bne.w	8000f98 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000da4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000da8:	f043 0202 	orr.w	r2, r3, #2
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff35 	bl	8000c24 <LL_ADC_IsEnabled>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000dc4:	f7ff ff2e 	bl	8000c24 <LL_ADC_IsEnabled>
 8000dc8:	4604      	mov	r4, r0
 8000dca:	487c      	ldr	r0, [pc, #496]	@ (8000fbc <HAL_ADC_Init+0x2fc>)
 8000dcc:	f7ff ff2a 	bl	8000c24 <LL_ADC_IsEnabled>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4878      	ldr	r0, [pc, #480]	@ (8000fc0 <HAL_ADC_Init+0x300>)
 8000de0:	f7ff fd42 	bl	8000868 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f5b      	ldrb	r3, [r3, #29]
 8000de8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000df4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000dfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d106      	bne.n	8000e20 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e16:	3b01      	subs	r3, #1
 8000e18:	045b      	lsls	r3, r3, #17
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	4b60      	ldr	r3, [pc, #384]	@ (8000fc4 <HAL_ADC_Init+0x304>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff14 	bl	8000c98 <LL_ADC_INJ_IsConversionOngoing>
 8000e70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d16d      	bne.n	8000f54 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d16a      	bne.n	8000f54 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000e8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e9a:	f023 0302 	bic.w	r3, r3, #2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d017      	beq.n	8000ee0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ebe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000ec8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6911      	ldr	r1, [r2, #16]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8000ede:	e013      	b.n	8000f08 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f04:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d118      	bne.n	8000f44 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f28:	4311      	orrs	r1, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f34:	430a      	orrs	r2, r1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	e007      	b.n	8000f54 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10c      	bne.n	8000f76 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f023 010f 	bic.w	r1, r3, #15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	1e5a      	subs	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f74:	e007      	b.n	8000f86 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 020f 	bic.w	r2, r2, #15
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f96:	e007      	b.n	8000fa8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9c:	f043 0210 	orr.w	r2, r3, #16
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	053e2d63 	.word	0x053e2d63
 8000fbc:	50000100 	.word	0x50000100
 8000fc0:	50000300 	.word	0x50000300
 8000fc4:	fff04007 	.word	0xfff04007

08000fc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fd0:	4859      	ldr	r0, [pc, #356]	@ (8001138 <HAL_ADC_Start+0x170>)
 8000fd2:	f7ff fda9 	bl	8000b28 <LL_ADC_GetMultimode>
 8000fd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fe48 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f040 809f 	bne.w	8001128 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_Start+0x30>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e09a      	b.n	800112e <HAL_ADC_Start+0x166>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fd73 	bl	8001aec <ADC_Enable>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8086 	bne.w	800111e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001016:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a44      	ldr	r2, [pc, #272]	@ (800113c <HAL_ADC_Start+0x174>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d002      	beq.n	8001036 <HAL_ADC_Start+0x6e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	e001      	b.n	800103a <HAL_ADC_Start+0x72>
 8001036:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	4293      	cmp	r3, r2
 8001040:	d002      	beq.n	8001048 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800104c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001060:	d106      	bne.n	8001070 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	f023 0206 	bic.w	r2, r3, #6
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	661a      	str	r2, [r3, #96]	@ 0x60
 800106e:	e002      	b.n	8001076 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	221c      	movs	r2, #28
 800107c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <HAL_ADC_Start+0x174>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d002      	beq.n	8001096 <HAL_ADC_Start+0xce>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e001      	b.n	800109a <HAL_ADC_Start+0xd2>
 8001096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4293      	cmp	r3, r2
 80010a0:	d008      	beq.n	80010b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d002      	beq.n	80010b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	d114      	bne.n	80010de <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fdb7 	bl	8000c4a <LL_ADC_REG_StartConversion>
 80010dc:	e026      	b.n	800112c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a13      	ldr	r2, [pc, #76]	@ (800113c <HAL_ADC_Start+0x174>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d002      	beq.n	80010fa <HAL_ADC_Start+0x132>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	e001      	b.n	80010fe <HAL_ADC_Start+0x136>
 80010fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010fe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00f      	beq.n	800112c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001110:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001114:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800111c:	e006      	b.n	800112c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001126:	e001      	b.n	800112c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001128:	2302      	movs	r3, #2
 800112a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800112c:	7dfb      	ldrb	r3, [r7, #23]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	50000300 	.word	0x50000300
 800113c:	50000100 	.word	0x50000100

08001140 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800114a:	4867      	ldr	r0, [pc, #412]	@ (80012e8 <HAL_ADC_PollForConversion+0x1a8>)
 800114c:	f7ff fcec 	bl	8000b28 <LL_ADC_GetMultimode>
 8001150:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b08      	cmp	r3, #8
 8001158:	d102      	bne.n	8001160 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800115a:	2308      	movs	r3, #8
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e02a      	b.n	80011b6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d002      	beq.n	8001172 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b09      	cmp	r3, #9
 8001170:	d111      	bne.n	8001196 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0a6      	b.n	80012de <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001190:	2304      	movs	r3, #4
 8001192:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001194:	e00f      	b.n	80011b6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001196:	4854      	ldr	r0, [pc, #336]	@ (80012e8 <HAL_ADC_PollForConversion+0x1a8>)
 8001198:	f7ff fcd4 	bl	8000b44 <LL_ADC_GetMultiDMATransfer>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a6:	f043 0220 	orr.w	r2, r3, #32
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e095      	b.n	80012de <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80011b2:	2304      	movs	r3, #4
 80011b4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80011b6:	f7ff fb29 	bl	800080c <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011bc:	e021      	b.n	8001202 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d01d      	beq.n	8001202 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011c6:	f7ff fb21 	bl	800080c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d302      	bcc.n	80011dc <HAL_ADC_PollForConversion+0x9c>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d112      	bne.n	8001202 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10b      	bne.n	8001202 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ee:	f043 0204 	orr.w	r2, r3, #4
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e06d      	b.n	80012de <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0d6      	beq.n	80011be <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001214:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fbf3 	bl	8000a0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7f5b      	ldrb	r3, [r3, #29]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d118      	bne.n	8001266 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b08      	cmp	r3, #8
 8001240:	d111      	bne.n	8001266 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001246:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <HAL_ADC_PollForConversion+0x1ac>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d002      	beq.n	8001276 <HAL_ADC_PollForConversion+0x136>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e001      	b.n	800127a <HAL_ADC_PollForConversion+0x13a>
 8001276:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4293      	cmp	r3, r2
 8001280:	d008      	beq.n	8001294 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d002      	beq.n	8001294 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d104      	bne.n	800129e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00d      	b.n	80012ba <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <HAL_ADC_PollForConversion+0x1ac>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d002      	beq.n	80012ae <HAL_ADC_PollForConversion+0x16e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	e001      	b.n	80012b2 <HAL_ADC_PollForConversion+0x172>
 80012ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d104      	bne.n	80012ca <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2208      	movs	r2, #8
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e008      	b.n	80012dc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	220c      	movs	r2, #12
 80012da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	50000300 	.word	0x50000300
 80012ec:	50000100 	.word	0x50000100

080012f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0b6      	sub	sp, #216	@ 0xd8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_ConfigChannel+0x22>
 800132a:	2302      	movs	r3, #2
 800132c:	e3c8      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x7b4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fc99 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 83ad 	bne.w	8001aa2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	f7ff fb6c 	bl	8000a32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fc87 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8001364:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc93 	bl	8000c98 <LL_ADC_INJ_IsConversionOngoing>
 8001372:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 81d9 	bne.w	8001732 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 81d4 	bne.w	8001732 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001392:	d10f      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb73 	bl	8000a8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb1a 	bl	80009e6 <LL_ADC_SetSamplingTimeCommonConfig>
 80013b2:	e00e      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f7ff fb62 	bl	8000a8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb0a 	bl	80009e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d022      	beq.n	800143a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	6919      	ldr	r1, [r3, #16]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001404:	f7ff fa64 	bl	80008d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6919      	ldr	r1, [r3, #16]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	461a      	mov	r2, r3
 8001416:	f7ff fab0 	bl	800097a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x124>
 800142a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800142e:	e000      	b.n	8001432 <HAL_ADC_ConfigChannel+0x126>
 8001430:	2300      	movs	r3, #0
 8001432:	461a      	mov	r2, r3
 8001434:	f7ff fabc 	bl	80009b0 <LL_ADC_SetOffsetSaturation>
 8001438:	e17b      	b.n	8001732 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fa69 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10a      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x15a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa5e 	bl	8000918 <LL_ADC_GetOffsetChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	0e9b      	lsrs	r3, r3, #26
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	e01e      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x198>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fa53 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800148c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001494:	2320      	movs	r3, #32
 8001496:	e004      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001498:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1b0>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0e9b      	lsrs	r3, r3, #26
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	e018      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1e2>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80014d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80014d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80014e0:	2320      	movs	r3, #32
 80014e2:	e004      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80014e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d106      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa22 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fa06 	bl	8000918 <LL_ADC_GetOffsetChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10a      	bne.n	800152c <HAL_ADC_ConfigChannel+0x220>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f9fb 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	0e9b      	lsrs	r3, r3, #26
 8001526:	f003 021f 	and.w	r2, r3, #31
 800152a:	e01e      	b.n	800156a <HAL_ADC_ConfigChannel+0x25e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f9f0 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800154a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800154e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800155a:	2320      	movs	r3, #32
 800155c:	e004      	b.n	8001568 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800155e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x276>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0e9b      	lsrs	r3, r3, #26
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	e018      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x2a8>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001596:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800159a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800159e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80015a6:	2320      	movs	r3, #32
 80015a8:	e004      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80015aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d106      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f9bf 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2102      	movs	r1, #2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff f9a3 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10a      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x2e6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f998 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	0e9b      	lsrs	r3, r3, #26
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	e01e      	b.n	8001630 <HAL_ADC_ConfigChannel+0x324>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2102      	movs	r1, #2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f98d 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001614:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001618:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e004      	b.n	800162e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x33c>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	e016      	b.n	8001676 <HAL_ADC_ConfigChannel+0x36a>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800165a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800165c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001668:	2320      	movs	r3, #32
 800166a:	e004      	b.n	8001676 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001676:	429a      	cmp	r2, r3
 8001678:	d106      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f95e 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2103      	movs	r1, #3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f942 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10a      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x3a8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2103      	movs	r1, #3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f937 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	0e9b      	lsrs	r3, r3, #26
 80016ae:	f003 021f 	and.w	r2, r3, #31
 80016b2:	e017      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x3d8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2103      	movs	r1, #3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f92c 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80016d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80016d6:	2320      	movs	r3, #32
 80016d8:	e003      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80016da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x3f0>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0e9b      	lsrs	r3, r3, #26
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	e011      	b.n	8001720 <HAL_ADC_ConfigChannel+0x414>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800170a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800170c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800170e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e003      	b.n	8001720 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001720:	429a      	cmp	r2, r3
 8001722:	d106      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	2103      	movs	r1, #3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f909 	bl	8000944 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fa74 	bl	8000c24 <LL_ADC_IsEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 8140 	bne.w	80019c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	461a      	mov	r2, r3
 8001752:	f7ff f9c5 	bl	8000ae0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4a8f      	ldr	r2, [pc, #572]	@ (8001998 <HAL_ADC_ConfigChannel+0x68c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	f040 8131 	bne.w	80019c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10b      	bne.n	800178a <HAL_ADC_ConfigChannel+0x47e>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0e9b      	lsrs	r3, r3, #26
 8001778:	3301      	adds	r3, #1
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b09      	cmp	r3, #9
 8001780:	bf94      	ite	ls
 8001782:	2301      	movls	r3, #1
 8001784:	2300      	movhi	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	e019      	b.n	80017be <HAL_ADC_ConfigChannel+0x4b2>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001798:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800179a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800179c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e003      	b.n	80017ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80017a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3301      	adds	r3, #1
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	bf94      	ite	ls
 80017b8:	2301      	movls	r3, #1
 80017ba:	2300      	movhi	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d079      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_ADC_ConfigChannel+0x4d2>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0e9b      	lsrs	r3, r3, #26
 80017d4:	3301      	adds	r3, #1
 80017d6:	069b      	lsls	r3, r3, #26
 80017d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017dc:	e015      	b.n	800180a <HAL_ADC_ConfigChannel+0x4fe>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80017ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80017f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e003      	b.n	8001802 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80017fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3301      	adds	r3, #1
 8001804:	069b      	lsls	r3, r3, #26
 8001806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_ConfigChannel+0x51e>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	3301      	adds	r3, #1
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	e017      	b.n	800185a <HAL_ADC_ConfigChannel+0x54e>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800183a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800183c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001842:	2320      	movs	r3, #32
 8001844:	e003      	b.n	800184e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	ea42 0103 	orr.w	r1, r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x574>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	3301      	adds	r3, #1
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	e018      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x5a6>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800188e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001898:	2320      	movs	r3, #32
 800189a:	e003      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800189c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f003 021f 	and.w	r2, r3, #31
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b2:	430b      	orrs	r3, r1
 80018b4:	e081      	b.n	80019ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x5c6>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	3301      	adds	r3, #1
 80018ca:	069b      	lsls	r3, r3, #26
 80018cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018d0:	e015      	b.n	80018fe <HAL_ADC_ConfigChannel+0x5f2>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80018e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80018e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e003      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80018ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	069b      	lsls	r3, r3, #26
 80018fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_ConfigChannel+0x612>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	3301      	adds	r3, #1
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	e017      	b.n	800194e <HAL_ADC_ConfigChannel+0x642>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	61fb      	str	r3, [r7, #28]
  return result;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e003      	b.n	8001942 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	ea42 0103 	orr.w	r1, r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <HAL_ADC_ConfigChannel+0x66e>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	3301      	adds	r3, #1
 8001966:	f003 021f 	and.w	r2, r3, #31
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	051b      	lsls	r3, r3, #20
 8001974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001978:	e01e      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x6ac>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	613b      	str	r3, [r7, #16]
  return result;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d104      	bne.n	800199c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e006      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x698>
 8001996:	bf00      	nop
 8001998:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	051b      	lsls	r3, r3, #20
 80019b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f863 	bl	8000a8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x7bc>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d071      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d0:	483e      	ldr	r0, [pc, #248]	@ (8001acc <HAL_ADC_ConfigChannel+0x7c0>)
 80019d2:	f7fe ff6f 	bl	80008b4 <LL_ADC_GetCommonPathInternalCh>
 80019d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x7c4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_ConfigChannel+0x6e2>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x7c8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d127      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d121      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a02:	d157      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	482f      	ldr	r0, [pc, #188]	@ (8001acc <HAL_ADC_ConfigChannel+0x7c0>)
 8001a10:	f7fe ff3d 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	4a30      	ldr	r2, [pc, #192]	@ (8001adc <HAL_ADC_ConfigChannel+0x7d0>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a2e:	e002      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f9      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a3c:	e03a      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d113      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10d      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02a      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	4619      	mov	r1, r3
 8001a68:	4818      	ldr	r0, [pc, #96]	@ (8001acc <HAL_ADC_ConfigChannel+0x7c0>)
 8001a6a:	f7fe ff10 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a6e:	e021      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11c      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d011      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <HAL_ADC_ConfigChannel+0x7c0>)
 8001a9c:	f7fe fef7 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
 8001aa0:	e008      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001abc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	37d8      	adds	r7, #216	@ 0xd8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	80080000 	.word	0x80080000
 8001acc:	50000300 	.word	0x50000300
 8001ad0:	c3210000 	.word	0xc3210000
 8001ad4:	90c00010 	.word	0x90c00010
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	053e2d63 	.word	0x053e2d63
 8001ae0:	c7520000 	.word	0xc7520000
 8001ae4:	50000100 	.word	0x50000100
 8001ae8:	cb840000 	.word	0xcb840000

08001aec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f891 	bl	8000c24 <LL_ADC_IsEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d169      	bne.n	8001bdc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <ADC_Enable+0xfc>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00d      	beq.n	8001b32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e055      	b.n	8001bde <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f860 	bl	8000bfc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b3c:	482b      	ldr	r0, [pc, #172]	@ (8001bec <ADC_Enable+0x100>)
 8001b3e:	f7fe feb9 	bl	80008b4 <LL_ADC_GetCommonPathInternalCh>
 8001b42:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <ADC_Enable+0x104>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	4a28      	ldr	r2, [pc, #160]	@ (8001bf4 <ADC_Enable+0x108>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	099b      	lsrs	r3, r3, #6
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b66:	e002      	b.n	8001b6e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b74:	f7fe fe4a 	bl	800080c <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b7a:	e028      	b.n	8001bce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f84f 	bl	8000c24 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d104      	bne.n	8001b96 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f833 	bl	8000bfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b96:	f7fe fe39 	bl	800080c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d914      	bls.n	8001bce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00d      	beq.n	8001bce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e007      	b.n	8001bde <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d1cf      	bne.n	8001b7c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	8000003f 	.word	0x8000003f
 8001bec:	50000300 	.word	0x50000300
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	053e2d63 	.word	0x053e2d63

08001bf8 <LL_ADC_IsEnabled>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_IsEnabled+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_IsEnabled+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_REG_IsConversionOngoing>:
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b0a1      	sub	sp, #132	@ 0x84
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e08b      	b.n	8001d7a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c7c:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	e001      	b.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e06a      	b.n	8001d7a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffb9 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001cac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffb3 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d14c      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d149      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cc4:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001cc6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d028      	beq.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ce2:	035b      	lsls	r3, r3, #13
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001cf0:	f7ff ff82 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4823      	ldr	r0, [pc, #140]	@ (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001cf8:	f7ff ff7e 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4323      	orrs	r3, r4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d133      	bne.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d0c:	f023 030f 	bic.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6892      	ldr	r2, [r2, #8]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d1e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d20:	e024      	b.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d32:	f7ff ff61 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d36:	4604      	mov	r4, r0
 8001d38:	4812      	ldr	r0, [pc, #72]	@ (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001d3a:	f7ff ff5d 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4323      	orrs	r3, r4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d112      	bne.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d4e:	f023 030f 	bic.w	r3, r3, #15
 8001d52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d56:	e009      	b.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5c:	f043 0220 	orr.w	r2, r3, #32
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001d6a:	e000      	b.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3784      	adds	r7, #132	@ 0x84
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	50000100 	.word	0x50000100
 8001d88:	50000300 	.word	0x50000300

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff47 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff5e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffb2 	bl	8001eac <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f62:	e15a      	b.n	800221a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 814c 	beq.w	8002214 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d017      	beq.n	8002032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d123      	bne.n	8002086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	6939      	ldr	r1, [r7, #16]
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a6 	beq.w	8002214 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002238 <HAL_GPIO_Init+0x2e4>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002238 <HAL_GPIO_Init+0x2e4>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d4:	4b58      	ldr	r3, [pc, #352]	@ (8002238 <HAL_GPIO_Init+0x2e4>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e0:	4a56      	ldr	r2, [pc, #344]	@ (800223c <HAL_GPIO_Init+0x2e8>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_Init+0x1f8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a4c      	ldr	r2, [pc, #304]	@ (8002240 <HAL_GPIO_Init+0x2ec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d019      	beq.n	8002148 <HAL_GPIO_Init+0x1f4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_GPIO_Init+0x2f0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_Init+0x1f0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a4a      	ldr	r2, [pc, #296]	@ (8002248 <HAL_GPIO_Init+0x2f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a49      	ldr	r2, [pc, #292]	@ (800224c <HAL_GPIO_Init+0x2f8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a48      	ldr	r2, [pc, #288]	@ (8002250 <HAL_GPIO_Init+0x2fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1e4>
 8002134:	2305      	movs	r3, #5
 8002136:	e00a      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002138:	2306      	movs	r3, #6
 800213a:	e008      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 800213c:	2304      	movs	r3, #4
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002140:	2303      	movs	r3, #3
 8002142:	e004      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002144:	2302      	movs	r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 800214c:	2300      	movs	r3, #0
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215e:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_GPIO_Init+0x2e8>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216c:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_GPIO_Init+0x300>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002190:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <HAL_GPIO_Init+0x300>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002196:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <HAL_GPIO_Init+0x300>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ba:	4a26      	ldr	r2, [pc, #152]	@ (8002254 <HAL_GPIO_Init+0x300>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_GPIO_Init+0x300>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_GPIO_Init+0x300>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <HAL_GPIO_Init+0x300>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_GPIO_Init+0x300>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f ae9d 	bne.w	8001f64 <HAL_GPIO_Init+0x10>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001000 	.word	0x48001000
 8002250:	48001400 	.word	0x48001400
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d141      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002296:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a2:	d131      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022aa:	4a46      	ldr	r2, [pc, #280]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b4:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022bc:	4a41      	ldr	r2, [pc, #260]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022c4:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2232      	movs	r2, #50	@ 0x32
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a3f      	ldr	r2, [pc, #252]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	0c9b      	lsrs	r3, r3, #18
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022da:	e002      	b.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3b01      	subs	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e2:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ee:	d102      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f2      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d158      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e057      	b.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002308:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230e:	4a2d      	ldr	r2, [pc, #180]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002318:	e04d      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002320:	d141      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232e:	d131      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002336:	4a23      	ldr	r2, [pc, #140]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002348:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2232      	movs	r2, #50	@ 0x32
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002366:	e002      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d102      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238e:	d112      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e011      	b.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023a4:	e007      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ae:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40007000 	.word	0x40007000
 80023c8:	20000000 	.word	0x20000000
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023de:	6093      	str	r3, [r2, #8]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e2fe      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d075      	beq.n	80024fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b97      	ldr	r3, [pc, #604]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002418:	4b94      	ldr	r3, [pc, #592]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d102      	bne.n	800242e <HAL_RCC_OscConfig+0x3e>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d002      	beq.n	8002434 <HAL_RCC_OscConfig+0x44>
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b8d      	ldr	r3, [pc, #564]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05b      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d157      	bne.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e2d9      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x74>
 8002456:	4b85      	ldr	r3, [pc, #532]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a84      	ldr	r2, [pc, #528]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7b      	ldr	r2, [pc, #492]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002488:	4b78      	ldr	r3, [pc, #480]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a77      	ldr	r2, [pc, #476]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a74      	ldr	r2, [pc, #464]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe f9b0 	bl	800080c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe f9ac 	bl	800080c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e29e      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe f99c 	bl	800080c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe f998 	bl	800080c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e28a      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	4b60      	ldr	r3, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d075      	beq.n	80025f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b59      	ldr	r3, [pc, #356]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b56      	ldr	r3, [pc, #344]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d102      	bne.n	8002526 <HAL_RCC_OscConfig+0x136>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d002      	beq.n	800252c <HAL_RCC_OscConfig+0x13c>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d11f      	bne.n	800256c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252c:	4b4f      	ldr	r3, [pc, #316]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x154>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e25d      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b49      	ldr	r3, [pc, #292]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4946      	ldr	r1, [pc, #280]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002558:	4b45      	ldr	r3, [pc, #276]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f909 	bl	8000774 <HAL_InitTick>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d043      	beq.n	80025f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e249      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d023      	beq.n	80025bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002574:	4b3d      	ldr	r3, [pc, #244]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3c      	ldr	r2, [pc, #240]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe f944 	bl	800080c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe f940 	bl	800080c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e232      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	492d      	ldr	r1, [pc, #180]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e01a      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80025c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe f920 	bl	800080c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe f91c 	bl	800080c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e20e      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1e0>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d041      	beq.n	8002682 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01c      	beq.n	8002640 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe f8f9 	bl	800080c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe f8f5 	bl	800080c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1e7      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ef      	beq.n	800261e <HAL_RCC_OscConfig+0x22e>
 800263e:	e020      	b.n	8002682 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_OscConfig+0x27c>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe f8dc 	bl	800080c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002656:	e00d      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe f8d8 	bl	800080c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d906      	bls.n	8002674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1ca      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	4b8c      	ldr	r3, [pc, #560]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ea      	bne.n	8002658 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a6 	beq.w	80027dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002694:	4b84      	ldr	r3, [pc, #528]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2b4>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x2b6>
 80026a4:	2300      	movs	r3, #0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b7f      	ldr	r3, [pc, #508]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	4a7e      	ldr	r2, [pc, #504]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b6:	4b7c      	ldr	r3, [pc, #496]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <HAL_RCC_OscConfig+0x4bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d2:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <HAL_RCC_OscConfig+0x4bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x4bc>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe f895 	bl	800080c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe f891 	bl	800080c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e183      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b6c      	ldr	r3, [pc, #432]	@ (80028ac <HAL_RCC_OscConfig+0x4bc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_RCC_OscConfig+0x32e>
 800270c:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	4a65      	ldr	r2, [pc, #404]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271c:	e024      	b.n	8002768 <HAL_RCC_OscConfig+0x378>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d110      	bne.n	8002748 <HAL_RCC_OscConfig+0x358>
 8002726:	4b60      	ldr	r3, [pc, #384]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	4a5e      	ldr	r2, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002736:	4b5c      	ldr	r3, [pc, #368]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x378>
 8002748:	4b57      	ldr	r3, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	4a56      	ldr	r2, [pc, #344]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002758:	4b53      	ldr	r3, [pc, #332]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a52      	ldr	r2, [pc, #328]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d016      	beq.n	800279e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe f84c 	bl	800080c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe f848 	bl	800080c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e138      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b46      	ldr	r3, [pc, #280]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ed      	beq.n	8002778 <HAL_RCC_OscConfig+0x388>
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe f835 	bl	800080c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe f831 	bl	800080c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e121      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027bc:	4b3a      	ldr	r3, [pc, #232]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ed      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b35      	ldr	r3, [pc, #212]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	4a34      	ldr	r2, [pc, #208]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03c      	beq.n	8002862 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01c      	beq.n	800282a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f0:	4b2d      	ldr	r3, [pc, #180]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80027f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f6:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe f804 	bl	800080c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002808:	f7fe f800 	bl	800080c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0f2      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800281a:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800281c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <HAL_RCC_OscConfig+0x418>
 8002828:	e01b      	b.n	8002862 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800282a:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800282c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fd ffe7 	bl	800080c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002842:	f7fd ffe3 	bl	800080c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0d5      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ef      	bne.n	8002842 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80c9 	beq.w	80029fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b0c      	cmp	r3, #12
 8002876:	f000 8083 	beq.w	8002980 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d15e      	bne.n	8002940 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <HAL_RCC_OscConfig+0x4b8>)
 8002888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fd ffbd 	bl	800080c <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002894:	e00c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7fd ffb9 	bl	800080c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d905      	bls.n	80028b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e0ab      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	4b55      	ldr	r3, [pc, #340]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ec      	bne.n	8002896 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	4b52      	ldr	r3, [pc, #328]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b52      	ldr	r3, [pc, #328]	@ (8002a0c <HAL_RCC_OscConfig+0x61c>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6a11      	ldr	r1, [r2, #32]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028ea:	0852      	lsrs	r2, r2, #1
 80028ec:	3a01      	subs	r2, #1
 80028ee:	0652      	lsls	r2, r2, #25
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028f6:	06d2      	lsls	r2, r2, #27
 80028f8:	430a      	orrs	r2, r1
 80028fa:	4943      	ldr	r1, [pc, #268]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a40      	ldr	r2, [pc, #256]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a3d      	ldr	r2, [pc, #244]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fd ff78 	bl	800080c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fd ff74 	bl	800080c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e066      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x530>
 800293e:	e05e      	b.n	80029fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fd ff5e 	bl	800080c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fd ff5a 	bl	800080c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04c      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4924      	ldr	r1, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_OscConfig+0x620>)
 800297a:	4013      	ands	r3, r2
 800297c:	60cb      	str	r3, [r1, #12]
 800297e:	e03e      	b.n	80029fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e039      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x618>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d12c      	bne.n	80029fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	3b01      	subs	r3, #1
 80029ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d123      	bne.n	80029fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11b      	bne.n	80029fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d113      	bne.n	80029fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	019f800c 	.word	0x019f800c
 8002a10:	feeefffc 	.word	0xfeeefffc

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e11e      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b91      	ldr	r3, [pc, #580]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020f 	bic.w	r2, r3, #15
 8002a42:	498c      	ldr	r1, [pc, #560]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e106      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d073      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d129      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a70:	4b81      	ldr	r3, [pc, #516]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0f4      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a80:	f000 f966 	bl	8002d50 <RCC_GetSysClockFreqFromPLLSource>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a7c      	ldr	r2, [pc, #496]	@ (8002c7c <HAL_RCC_ClockConfig+0x268>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d93f      	bls.n	8002b0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d033      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12f      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aae:	4b72      	ldr	r3, [pc, #456]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ab6:	4a70      	ldr	r2, [pc, #448]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e024      	b.n	8002b0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002acc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0c6      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0be      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002aec:	f000 f8ce 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4a61      	ldr	r2, [pc, #388]	@ (8002c7c <HAL_RCC_ClockConfig+0x268>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d909      	bls.n	8002b0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002afa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b02:	4a5d      	ldr	r2, [pc, #372]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4957      	ldr	r1, [pc, #348]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fd fe74 	bl	800080c <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fd fe70 	bl	800080c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e095      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b68:	4b43      	ldr	r3, [pc, #268]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a42      	ldr	r2, [pc, #264]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b80:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b88:	4a3b      	ldr	r2, [pc, #236]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b39      	ldr	r3, [pc, #228]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4936      	ldr	r1, [pc, #216]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b80      	cmp	r3, #128	@ 0x80
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002baa:	4b33      	ldr	r3, [pc, #204]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a32      	ldr	r2, [pc, #200]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d21d      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 020f 	bic.w	r2, r3, #15
 8002bcc:	4929      	ldr	r1, [pc, #164]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bd4:	f7fd fe1a 	bl	800080c <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fd fe16 	bl	800080c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e03b      	b.n	8002c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1ed      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4917      	ldr	r1, [pc, #92]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490f      	ldr	r1, [pc, #60]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3e:	f000 f825 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_RCC_ClockConfig+0x264>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <HAL_RCC_ClockConfig+0x26c>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <HAL_RCC_ClockConfig+0x270>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_ClockConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fd86 	bl	8000774 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	04c4b400 	.word	0x04c4b400
 8002c80:	0800322c 	.word	0x0800322c
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c92:	4b2c      	ldr	r3, [pc, #176]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e047      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ca4:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb0:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e03e      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cb6:	4b23      	ldr	r3, [pc, #140]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d136      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc2:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cea:	68d2      	ldr	r2, [r2, #12]
 8002cec:	0a12      	lsrs	r2, r2, #8
 8002cee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
      break;
 8002cf8:	e00c      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cfa:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	0a12      	lsrs	r2, r2, #8
 8002d08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
      break;
 8002d12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0e5b      	lsrs	r3, r3, #25
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e001      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d34:	693b      	ldr	r3, [r7, #16]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d10c      	bne.n	8002d8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d74:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d7e:	68d2      	ldr	r2, [r2, #12]
 8002d80:	0a12      	lsrs	r2, r2, #8
 8002d82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
    break;
 8002d8c:	e00c      	b.n	8002da8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	0a12      	lsrs	r2, r2, #8
 8002d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
    break;
 8002da6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0e5b      	lsrs	r3, r3, #25
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002dc2:	687b      	ldr	r3, [r7, #4]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	007a1200 	.word	0x007a1200
 8002dd8:	00f42400 	.word	0x00f42400

08002ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de4:	2300      	movs	r3, #0
 8002de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de8:	2300      	movs	r3, #0
 8002dea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8098 	beq.w	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b40      	ldr	r3, [pc, #256]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e16:	4b3d      	ldr	r3, [pc, #244]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e22:	2301      	movs	r3, #1
 8002e24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e26:	4b3a      	ldr	r3, [pc, #232]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a39      	ldr	r2, [pc, #228]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e32:	f7fd fceb 	bl	800080c <HAL_GetTick>
 8002e36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e38:	e009      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fd fce7 	bl	800080c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d902      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	74fb      	strb	r3, [r7, #19]
        break;
 8002e4c:	e005      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4e:	4b30      	ldr	r3, [pc, #192]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ef      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d159      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e60:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01e      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d019      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b23      	ldr	r3, [pc, #140]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e88:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea8:	4a18      	ldr	r2, [pc, #96]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fd fca7 	bl	800080c <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd fca3 	bl	800080c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ec      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f04:	e008      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	74bb      	strb	r3, [r7, #18]
 8002f0a:	e005      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f18:	7c7b      	ldrb	r3, [r7, #17]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4ba6      	ldr	r3, [pc, #664]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	4aa5      	ldr	r2, [pc, #660]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f36:	4ba0      	ldr	r3, [pc, #640]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f023 0203 	bic.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	499c      	ldr	r1, [pc, #624]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f58:	4b97      	ldr	r3, [pc, #604]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f023 020c 	bic.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4994      	ldr	r1, [pc, #592]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	498b      	ldr	r1, [pc, #556]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f9c:	4b86      	ldr	r3, [pc, #536]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4983      	ldr	r1, [pc, #524]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fbe:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	497a      	ldr	r1, [pc, #488]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe0:	4b75      	ldr	r3, [pc, #468]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4972      	ldr	r1, [pc, #456]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003002:	4b6d      	ldr	r3, [pc, #436]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003008:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4969      	ldr	r1, [pc, #420]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003024:	4b64      	ldr	r3, [pc, #400]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4961      	ldr	r1, [pc, #388]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003046:	4b5c      	ldr	r3, [pc, #368]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	4958      	ldr	r1, [pc, #352]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	4950      	ldr	r1, [pc, #320]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a4a      	ldr	r2, [pc, #296]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003092:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a0:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	4942      	ldr	r1, [pc, #264]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d8:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4934      	ldr	r1, [pc, #208]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b2f      	ldr	r3, [pc, #188]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003110:	4b29      	ldr	r3, [pc, #164]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	4926      	ldr	r1, [pc, #152]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	4918      	ldr	r1, [pc, #96]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003166:	d105      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003180:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	490a      	ldr	r1, [pc, #40]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800319e:	d105      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000

080031bc <memset>:
 80031bc:	4402      	add	r2, r0
 80031be:	4603      	mov	r3, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003204 <__libc_init_array+0x38>)
 80031d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003208 <__libc_init_array+0x3c>)
 80031d2:	1b64      	subs	r4, r4, r5
 80031d4:	10a4      	asrs	r4, r4, #2
 80031d6:	2600      	movs	r6, #0
 80031d8:	42a6      	cmp	r6, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	4d0b      	ldr	r5, [pc, #44]	@ (800320c <__libc_init_array+0x40>)
 80031de:	4c0c      	ldr	r4, [pc, #48]	@ (8003210 <__libc_init_array+0x44>)
 80031e0:	f000 f818 	bl	8003214 <_init>
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	2600      	movs	r6, #0
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f4:	4798      	blx	r3
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fe:	4798      	blx	r3
 8003200:	3601      	adds	r6, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	0800323c 	.word	0x0800323c
 8003208:	0800323c 	.word	0x0800323c
 800320c:	0800323c 	.word	0x0800323c
 8003210:	08003240 	.word	0x08003240

08003214 <_init>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr

08003220 <_fini>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	bf00      	nop
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr
