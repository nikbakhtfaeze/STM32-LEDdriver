
LEDdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003854  08003854  00004854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003864  08003864  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003864  08003864  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00004864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003868  08003868  00004868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800386c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003878  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003878  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6f1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  0001072d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000123a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  00012ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc29  00000000  00000000  0001376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb94  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49ce  00000000  00000000  0003cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001018fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  00101940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001047bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800383c 	.word	0x0800383c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800383c 	.word	0x0800383c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb22 	bl	8000866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f89b 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9ad 	bl	8000584 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f8d7 	bl	80003dc <MX_ADC1_Init>
  MX_DAC1_Init();
 800022e:	f000 f96f 	bl	8000510 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000232:	2100      	movs	r1, #0
 8000234:	483c      	ldr	r0, [pc, #240]	@ (8000328 <main+0x110>)
 8000236:	f001 ff41 	bl	80020bc <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800023a:	483c      	ldr	r0, [pc, #240]	@ (800032c <main+0x114>)
 800023c:	f000 ff56 	bl	80010ec <HAL_ADC_Start>

	      // IMON (PA0)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000240:	f04f 31ff 	mov.w	r1, #4294967295
 8000244:	4839      	ldr	r0, [pc, #228]	@ (800032c <main+0x114>)
 8000246:	f001 f80d 	bl	8001264 <HAL_ADC_PollForConversion>
	      imon_raw = HAL_ADC_GetValue(&hadc1);
 800024a:	4838      	ldr	r0, [pc, #224]	@ (800032c <main+0x114>)
 800024c:	f001 f8e2 	bl	8001414 <HAL_ADC_GetValue>
 8000250:	4603      	mov	r3, r0
 8000252:	4a37      	ldr	r2, [pc, #220]	@ (8000330 <main+0x118>)
 8000254:	6013      	str	r3, [r2, #0]
	      float v_imon = (imon_raw * 3.3f) / 4095.0f;
 8000256:	4b36      	ldr	r3, [pc, #216]	@ (8000330 <main+0x118>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	ee07 3a90 	vmov	s15, r3
 800025e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000262:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000334 <main+0x11c>
 8000266:	ee27 7a87 	vmul.f32	s14, s15, s14
 800026a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000338 <main+0x120>
 800026e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000272:	edc7 7a01 	vstr	s15, [r7, #4]
	      imon_current = v_imon / (14.0f * RCS_VALUE);
 8000276:	ed97 7a01 	vldr	s14, [r7, #4]
 800027a:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800033c <main+0x124>
 800027e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000282:	4b2f      	ldr	r3, [pc, #188]	@ (8000340 <main+0x128>)
 8000284:	edc3 7a00 	vstr	s15, [r3]

	      // VOUT (PA1)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000288:	f04f 31ff 	mov.w	r1, #4294967295
 800028c:	4827      	ldr	r0, [pc, #156]	@ (800032c <main+0x114>)
 800028e:	f000 ffe9 	bl	8001264 <HAL_ADC_PollForConversion>
	      vout_raw = HAL_ADC_GetValue(&hadc1);
 8000292:	4826      	ldr	r0, [pc, #152]	@ (800032c <main+0x114>)
 8000294:	f001 f8be 	bl	8001414 <HAL_ADC_GetValue>
 8000298:	4603      	mov	r3, r0
 800029a:	4a2a      	ldr	r2, [pc, #168]	@ (8000344 <main+0x12c>)
 800029c:	6013      	str	r3, [r2, #0]
	      float v_vout_scaled = (vout_raw * 3.3f) / 4095.0f;
 800029e:	4b29      	ldr	r3, [pc, #164]	@ (8000344 <main+0x12c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	ee07 3a90 	vmov	s15, r3
 80002a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002aa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000334 <main+0x11c>
 80002ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002b2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000338 <main+0x120>
 80002b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ba:	edc7 7a00 	vstr	s15, [r7]
	      vout_voltage = (v_vout_scaled / 0.03226f) * VOUT_CAL_FACTOR;
 80002be:	ed97 7a00 	vldr	s14, [r7]
 80002c2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000348 <main+0x130>
 80002c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ca:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800034c <main+0x134>
 80002ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <main+0x138>)
 80002d4:	edc3 7a00 	vstr	s15, [r3]

	      // POT (PA2)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002d8:	f04f 31ff 	mov.w	r1, #4294967295
 80002dc:	4813      	ldr	r0, [pc, #76]	@ (800032c <main+0x114>)
 80002de:	f000 ffc1 	bl	8001264 <HAL_ADC_PollForConversion>
	      pot_value = HAL_ADC_GetValue(&hadc1);
 80002e2:	4812      	ldr	r0, [pc, #72]	@ (800032c <main+0x114>)
 80002e4:	f001 f896 	bl	8001414 <HAL_ADC_GetValue>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000354 <main+0x13c>)
 80002ec:	6013      	str	r3, [r2, #0]
	      pot_voltage = (pot_value * 3.3f) / 4095.0f;
 80002ee:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <main+0x13c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	ee07 3a90 	vmov	s15, r3
 80002f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000334 <main+0x11c>
 80002fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000302:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000338 <main+0x120>
 8000306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <main+0x140>)
 800030c:	edc3 7a00 	vstr	s15, [r3]

	      // Send POT value to DAC (12-bit right aligned)
	//      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pot_value);
	      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2600);
 8000310:	f640 2328 	movw	r3, #2600	@ 0xa28
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	4803      	ldr	r0, [pc, #12]	@ (8000328 <main+0x110>)
 800031a:	f001 ff3b 	bl	8002194 <HAL_DAC_SetValue>

	      HAL_Delay(10);
 800031e:	200a      	movs	r0, #10
 8000320:	f000 fb12 	bl	8000948 <HAL_Delay>
  {
 8000324:	bf00      	nop
 8000326:	e788      	b.n	800023a <main+0x22>
 8000328:	20000094 	.word	0x20000094
 800032c:	20000028 	.word	0x20000028
 8000330:	200000b8 	.word	0x200000b8
 8000334:	40533333 	.word	0x40533333
 8000338:	457ff000 	.word	0x457ff000
 800033c:	4093d70b 	.word	0x4093d70b
 8000340:	200000bc 	.word	0x200000bc
 8000344:	200000b0 	.word	0x200000b0
 8000348:	3d042310 	.word	0x3d042310
 800034c:	3f974bc7 	.word	0x3f974bc7
 8000350:	200000b4 	.word	0x200000b4
 8000354:	200000a8 	.word	0x200000a8
 8000358:	200000ac 	.word	0x200000ac

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b094      	sub	sp, #80	@ 0x50
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0318 	add.w	r3, r7, #24
 8000366:	2238      	movs	r2, #56	@ 0x38
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fa3a 	bl	80037e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800037e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000382:	f002 fa89 	bl	8002898 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800038e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2340      	movs	r3, #64	@ 0x40
 8000392:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0318 	add.w	r3, r7, #24
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fb2f 	bl	8002a00 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003a8:	f000 f936 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b0:	2301      	movs	r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 fe2d 	bl	8003024 <HAL_RCC_ClockConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003d0:	f000 f922 	bl	8000618 <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3750      	adds	r7, #80	@ 0x50
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	@ 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2220      	movs	r2, #32
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 f9f5 	bl	80037e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b41      	ldr	r3, [pc, #260]	@ (8000500 <MX_ADC1_Init+0x124>)
 80003fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000404:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040a:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_ADC1_Init+0x124>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000410:	4b3b      	ldr	r3, [pc, #236]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_ADC1_Init+0x124>)
 800041e:	2201      	movs	r2, #1
 8000420:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000424:	2204      	movs	r2, #4
 8000426:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000428:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_ADC1_Init+0x124>)
 800042a:	2200      	movs	r2, #0
 800042c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042e:	4b34      	ldr	r3, [pc, #208]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000430:	2200      	movs	r2, #0
 8000432:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000434:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000436:	2204      	movs	r2, #4
 8000438:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043a:	4b31      	ldr	r3, [pc, #196]	@ (8000500 <MX_ADC1_Init+0x124>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000442:	4b2f      	ldr	r3, [pc, #188]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000444:	2200      	movs	r2, #0
 8000446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000448:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <MX_ADC1_Init+0x124>)
 800044a:	2200      	movs	r2, #0
 800044c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000456:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800045c:	4b28      	ldr	r3, [pc, #160]	@ (8000500 <MX_ADC1_Init+0x124>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000464:	4826      	ldr	r0, [pc, #152]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000466:	f000 fcbd 	bl	8000de4 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000470:	f000 f8d2 	bl	8000618 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047c:	4619      	mov	r1, r3
 800047e:	4820      	ldr	r0, [pc, #128]	@ (8000500 <MX_ADC1_Init+0x124>)
 8000480:	f001 fc72 	bl	8001d68 <HAL_ADCEx_MultiModeConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800048a:	f000 f8c5 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048e:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <MX_ADC1_Init+0x128>)
 8000490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000492:	230c      	movs	r3, #12
 8000494:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000496:	2306      	movs	r3, #6
 8000498:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049a:	237f      	movs	r3, #127	@ 0x7f
 800049c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049e:	2304      	movs	r3, #4
 80004a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4619      	mov	r1, r3
 80004aa:	4815      	ldr	r0, [pc, #84]	@ (8000500 <MX_ADC1_Init+0x124>)
 80004ac:	f000 ffc0 	bl	8001430 <HAL_ADC_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004b6:	f000 f8af 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_ADC1_Init+0x12c>)
 80004bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004be:	2312      	movs	r3, #18
 80004c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004c2:	2307      	movs	r3, #7
 80004c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <MX_ADC1_Init+0x124>)
 80004cc:	f000 ffb0 	bl	8001430 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004d6:	f000 f89f 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_ADC1_Init+0x130>)
 80004dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004de:	2318      	movs	r3, #24
 80004e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <MX_ADC1_Init+0x124>)
 80004e8:	f000 ffa2 	bl	8001430 <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80004f2:	f000 f891 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3730      	adds	r7, #48	@ 0x30
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028
 8000504:	04300002 	.word	0x04300002
 8000508:	08600004 	.word	0x08600004
 800050c:	0c900008 	.word	0x0c900008

08000510 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	@ 0x30
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000516:	463b      	mov	r3, r7
 8000518:	2230      	movs	r2, #48	@ 0x30
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f003 f961 	bl	80037e4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <MX_DAC1_Init+0x6c>)
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <MX_DAC1_Init+0x70>)
 8000526:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000528:	4814      	ldr	r0, [pc, #80]	@ (800057c <MX_DAC1_Init+0x6c>)
 800052a:	f001 fda4 	bl	8002076 <HAL_DAC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000534:	f000 f870 	bl	8000618 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000538:	2302      	movs	r3, #2
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	@ (800057c <MX_DAC1_Init+0x6c>)
 8000564:	f001 fe44 	bl	80021f0 <HAL_DAC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800056e:	f000 f853 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3730      	adds	r7, #48	@ 0x30
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000094 	.word	0x20000094
 8000580:	50000800 	.word	0x50000800

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <MX_GPIO_Init+0x8c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <MX_GPIO_Init+0x8c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_GPIO_Init+0x8c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_GPIO_Init+0x8c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <MX_GPIO_Init+0x8c>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_GPIO_Init+0x8c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4811      	ldr	r0, [pc, #68]	@ (8000614 <MX_GPIO_Init+0x90>)
 80005d0:	f002 f94a 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nFLT_Pin */
  GPIO_InitStruct.Pin = nFLT_Pin;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nFLT_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	480b      	ldr	r0, [pc, #44]	@ (8000614 <MX_GPIO_Init+0x90>)
 80005e8:	f001 ffbc 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005ec:	2308      	movs	r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_GPIO_Init+0x90>)
 8000604:	f001 ffae 	bl	8002564 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <Error_Handler+0x8>

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <HAL_MspInit+0x44>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6613      	str	r3, [r2, #96]	@ 0x60
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <HAL_MspInit+0x44>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064c:	6593      	str	r3, [r2, #88]	@ 0x58
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800065a:	f002 f9c1 	bl	80029e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09a      	sub	sp, #104	@ 0x68
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2244      	movs	r2, #68	@ 0x44
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f8a9 	bl	80037e4 <memset>
  if(hadc->Instance==ADC1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069a:	d134      	bne.n	8000706 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800069c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fea9 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006b8:	f7ff ffae 	bl	8000618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c0:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0xa4>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IMON_Pin|Vout_Pin|POT_Pin;
 80006ec:	2307      	movs	r3, #7
 80006ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006fc:	4619      	mov	r1, r3
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000702:	f001 ff2f 	bl	8002564 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000706:	bf00      	nop
 8000708:	3768      	adds	r7, #104	@ 0x68
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <HAL_DAC_MspInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d124      	bne.n	8000780 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_DAC_MspInit+0x78>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <HAL_DAC_MspInit+0x78>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_DAC_MspInit+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_DAC_MspInit+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <HAL_DAC_MspInit+0x78>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_DAC_MspInit+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000766:	2310      	movs	r3, #16
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077c:	f001 fef2 	bl	8002564 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	50000800 	.word	0x50000800
 800078c:	40021000 	.word	0x40021000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <NMI_Handler+0x4>

08000798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <MemManage_Handler+0x4>

080007a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f891 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000818:	f7ff ffea 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	@ (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	@ (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f002 ffd7 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000846:	f7ff fce7 	bl	8000218 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000858:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 800085c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000860:	200000c4 	.word	0x200000c4

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>

08000866 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f001 fbcf 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f80e 	bl	8000898 <HAL_InitTick>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e001      	b.n	800088c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000888:	f7ff fecc 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800088c:	79fb      	ldrb	r3, [r7, #7]

}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_InitTick+0x68>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d022      	beq.n	80008f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_InitTick+0x6c>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_InitTick+0x68>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80008bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fbcc 	bl	800205e <HAL_SYSTICK_Config>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10f      	bne.n	80008ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d809      	bhi.n	80008e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	2200      	movs	r2, #0
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295
 80008da:	f001 fba6 	bl	800202a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_InitTick+0x70>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e007      	b.n	80008f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e004      	b.n	80008f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e001      	b.n	80008f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000008 	.word	0x20000008
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x1c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x20>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4413      	add	r3, r2
 800091a:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <HAL_IncTick+0x1c>)
 800091c:	6013      	str	r3, [r2, #0]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	200000c0 	.word	0x200000c0
 800092c:	20000008 	.word	0x20000008

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200000c0 	.word	0x200000c0

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d004      	beq.n	800096c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_Delay+0x40>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096c:	bf00      	nop
 800096e:	f7ff ffdf 	bl	8000930 <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	429a      	cmp	r2, r3
 800097c:	d8f7      	bhi.n	800096e <HAL_Delay+0x26>
  {
  }
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000008 	.word	0x20000008

0800098c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	609a      	str	r2, [r3, #8]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	609a      	str	r2, [r3, #8]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3360      	adds	r3, #96	@ 0x60
 8000a06:	461a      	mov	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <LL_ADC_SetOffset+0x44>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	4313      	orrs	r3, r2
 8000a24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a2c:	bf00      	nop
 8000a2e:	371c      	adds	r7, #28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	03fff000 	.word	0x03fff000

08000a3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3360      	adds	r3, #96	@ 0x60
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3360      	adds	r3, #96	@ 0x60
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b087      	sub	sp, #28
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3360      	adds	r3, #96	@ 0x60
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ac8:	bf00      	nop
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3360      	adds	r3, #96	@ 0x60
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	615a      	str	r2, [r3, #20]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b087      	sub	sp, #28
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3330      	adds	r3, #48	@ 0x30
 8000b66:	461a      	mov	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	4413      	add	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	211f      	movs	r1, #31
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	401a      	ands	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0e9b      	lsrs	r3, r3, #26
 8000b8e:	f003 011f 	and.w	r1, r3, #31
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b087      	sub	sp, #28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	0e5b      	lsrs	r3, r3, #25
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	0d1b      	lsrs	r3, r3, #20
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	2107      	movs	r1, #7
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	0d1b      	lsrs	r3, r3, #20
 8000be8:	f003 031f 	and.w	r3, r3, #31
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0318 	and.w	r3, r3, #24
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c28:	40d9      	lsrs	r1, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c32:	431a      	orrs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	0007ffff 	.word	0x0007ffff

08000c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 031f 	and.w	r3, r3, #31
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6093      	str	r3, [r2, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cbc:	d101      	bne.n	8000cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ce4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d0c:	d101      	bne.n	8000d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <LL_ADC_IsEnabled+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_ADC_IsEnabled+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d82:	f043 0204 	orr.w	r2, r3, #4
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d101      	bne.n	8000dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d101      	bne.n	8000dd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e167      	b.n	80010ce <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fc2d 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff3f 	bl	8000ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff25 	bl	8000c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff5a 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d115      	bne.n	8000e76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff3e 	bl	8000cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e54:	4ba0      	ldr	r3, [pc, #640]	@ (80010d8 <HAL_ADC_Init+0x2f4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	099b      	lsrs	r3, r3, #6
 8000e5a:	4aa0      	ldr	r2, [pc, #640]	@ (80010dc <HAL_ADC_Init+0x2f8>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	099b      	lsrs	r3, r3, #6
 8000e62:	3301      	adds	r3, #1
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e68:	e002      	b.n	8000e70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f9      	bne.n	8000e6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff3c 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10d      	bne.n	8000ea2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff75 	bl	8000d96 <LL_ADC_REG_IsConversionOngoing>
 8000eac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 8100 	bne.w	80010bc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80fc 	bne.w	80010bc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ec8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ecc:	f043 0202 	orr.w	r2, r3, #2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff35 	bl	8000d48 <LL_ADC_IsEnabled>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d111      	bne.n	8000f08 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ee4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000ee8:	f7ff ff2e 	bl	8000d48 <LL_ADC_IsEnabled>
 8000eec:	4604      	mov	r4, r0
 8000eee:	487c      	ldr	r0, [pc, #496]	@ (80010e0 <HAL_ADC_Init+0x2fc>)
 8000ef0:	f7ff ff2a 	bl	8000d48 <LL_ADC_IsEnabled>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4323      	orrs	r3, r4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d105      	bne.n	8000f08 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4878      	ldr	r0, [pc, #480]	@ (80010e4 <HAL_ADC_Init+0x300>)
 8000f04:	f7ff fd42 	bl	800098c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7f5b      	ldrb	r3, [r3, #29]
 8000f0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d106      	bne.n	8000f44 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	045b      	lsls	r3, r3, #17
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	4b60      	ldr	r3, [pc, #384]	@ (80010e8 <HAL_ADC_Init+0x304>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	430b      	orrs	r3, r1
 8000f72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff14 	bl	8000dbc <LL_ADC_INJ_IsConversionOngoing>
 8000f94:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d16d      	bne.n	8001078 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d16a      	bne.n	8001078 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fa6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fbe:	f023 0302 	bic.w	r3, r3, #2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d017      	beq.n	8001004 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fe2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000fec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6911      	ldr	r1, [r2, #16]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001002:	e013      	b.n	800102c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001012:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001028:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001032:	2b01      	cmp	r3, #1
 8001034:	d118      	bne.n	8001068 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800104c:	4311      	orrs	r1, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001052:	4311      	orrs	r1, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001058:	430a      	orrs	r2, r1
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0201 	orr.w	r2, r2, #1
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	e007      	b.n	8001078 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10c      	bne.n	800109a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f023 010f 	bic.w	r1, r3, #15
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30
 8001098:	e007      	b.n	80010aa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 020f 	bic.w	r2, r2, #15
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010ba:	e007      	b.n	80010cc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c0:	f043 0210 	orr.w	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	@ 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	053e2d63 	.word	0x053e2d63
 80010e0:	50000100 	.word	0x50000100
 80010e4:	50000300 	.word	0x50000300
 80010e8:	fff04007 	.word	0xfff04007

080010ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010f4:	4859      	ldr	r0, [pc, #356]	@ (800125c <HAL_ADC_Start+0x170>)
 80010f6:	f7ff fda9 	bl	8000c4c <LL_ADC_GetMultimode>
 80010fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe48 	bl	8000d96 <LL_ADC_REG_IsConversionOngoing>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 809f 	bne.w	800124c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_Start+0x30>
 8001118:	2302      	movs	r3, #2
 800111a:	e09a      	b.n	8001252 <HAL_ADC_Start+0x166>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fd73 	bl	8001c10 <ADC_Enable>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8086 	bne.w	8001242 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a44      	ldr	r2, [pc, #272]	@ (8001260 <HAL_ADC_Start+0x174>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d002      	beq.n	800115a <HAL_ADC_Start+0x6e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	e001      	b.n	800115e <HAL_ADC_Start+0x72>
 800115a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	4293      	cmp	r3, r2
 8001164:	d002      	beq.n	800116c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001184:	d106      	bne.n	8001194 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	f023 0206 	bic.w	r2, r3, #6
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	661a      	str	r2, [r3, #96]	@ 0x60
 8001192:	e002      	b.n	800119a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	221c      	movs	r2, #28
 80011a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001260 <HAL_ADC_Start+0x174>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d002      	beq.n	80011ba <HAL_ADC_Start+0xce>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	e001      	b.n	80011be <HAL_ADC_Start+0xd2>
 80011ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d008      	beq.n	80011d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d002      	beq.n	80011d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d114      	bne.n	8001202 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fdb7 	bl	8000d6e <LL_ADC_REG_StartConversion>
 8001200:	e026      	b.n	8001250 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001206:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <HAL_ADC_Start+0x174>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d002      	beq.n	800121e <HAL_ADC_Start+0x132>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e001      	b.n	8001222 <HAL_ADC_Start+0x136>
 800121e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001222:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001234:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001238:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001240:	e006      	b.n	8001250 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800124a:	e001      	b.n	8001250 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800124c:	2302      	movs	r3, #2
 800124e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	50000300 	.word	0x50000300
 8001260:	50000100 	.word	0x50000100

08001264 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800126e:	4867      	ldr	r0, [pc, #412]	@ (800140c <HAL_ADC_PollForConversion+0x1a8>)
 8001270:	f7ff fcec 	bl	8000c4c <LL_ADC_GetMultimode>
 8001274:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d102      	bne.n	8001284 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800127e:	2308      	movs	r3, #8
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e02a      	b.n	80012da <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d002      	beq.n	8001296 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b09      	cmp	r3, #9
 8001294:	d111      	bne.n	80012ba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a8:	f043 0220 	orr.w	r2, r3, #32
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0a6      	b.n	8001402 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012b4:	2304      	movs	r3, #4
 80012b6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80012b8:	e00f      	b.n	80012da <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80012ba:	4854      	ldr	r0, [pc, #336]	@ (800140c <HAL_ADC_PollForConversion+0x1a8>)
 80012bc:	f7ff fcd4 	bl	8000c68 <LL_ADC_GetMultiDMATransfer>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ca:	f043 0220 	orr.w	r2, r3, #32
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e095      	b.n	8001402 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012d6:	2304      	movs	r3, #4
 80012d8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80012da:	f7ff fb29 	bl	8000930 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012e0:	e021      	b.n	8001326 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d01d      	beq.n	8001326 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80012ea:	f7ff fb21 	bl	8000930 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d302      	bcc.n	8001300 <HAL_ADC_PollForConversion+0x9c>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d112      	bne.n	8001326 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10b      	bne.n	8001326 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001312:	f043 0204 	orr.w	r2, r3, #4
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e06d      	b.n	8001402 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0d6      	beq.n	80012e2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001338:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbf3 	bl	8000b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01c      	beq.n	800138a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f5b      	ldrb	r3, [r3, #29]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d118      	bne.n	800138a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b08      	cmp	r3, #8
 8001364:	d111      	bne.n	800138a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a20      	ldr	r2, [pc, #128]	@ (8001410 <HAL_ADC_PollForConversion+0x1ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d002      	beq.n	800139a <HAL_ADC_PollForConversion+0x136>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	e001      	b.n	800139e <HAL_ADC_PollForConversion+0x13a>
 800139a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d008      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d002      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d104      	bne.n	80013c2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e00d      	b.n	80013de <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <HAL_ADC_PollForConversion+0x1ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d002      	beq.n	80013d2 <HAL_ADC_PollForConversion+0x16e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_PollForConversion+0x172>
 80013d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d104      	bne.n	80013ee <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2208      	movs	r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e008      	b.n	8001400 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	220c      	movs	r2, #12
 80013fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	50000300 	.word	0x50000300
 8001410:	50000100 	.word	0x50000100

08001414 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b6      	sub	sp, #216	@ 0xd8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x22>
 800144e:	2302      	movs	r3, #2
 8001450:	e3c8      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x7b4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc99 	bl	8000d96 <LL_ADC_REG_IsConversionOngoing>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 83ad 	bne.w	8001bc6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	f7ff fb6c 	bl	8000b56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc87 	bl	8000d96 <LL_ADC_REG_IsConversionOngoing>
 8001488:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc93 	bl	8000dbc <LL_ADC_INJ_IsConversionOngoing>
 8001496:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800149a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 81d9 	bne.w	8001856 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 81d4 	bne.w	8001856 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014b6:	d10f      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb73 	bl	8000bae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb1a 	bl	8000b0a <LL_ADC_SetSamplingTimeCommonConfig>
 80014d6:	e00e      	b.n	80014f6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f7ff fb62 	bl	8000bae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb0a 	bl	8000b0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d022      	beq.n	800155e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6919      	ldr	r1, [r3, #16]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001528:	f7ff fa64 	bl	80009f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6919      	ldr	r1, [r3, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	461a      	mov	r2, r3
 800153a:	f7ff fab0 	bl	8000a9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x124>
 800154e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001552:	e000      	b.n	8001556 <HAL_ADC_ConfigChannel+0x126>
 8001554:	2300      	movs	r3, #0
 8001556:	461a      	mov	r2, r3
 8001558:	f7ff fabc 	bl	8000ad4 <LL_ADC_SetOffsetSaturation>
 800155c:	e17b      	b.n	8001856 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fa69 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10a      	bne.n	800158a <HAL_ADC_ConfigChannel+0x15a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fa5e 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	0e9b      	lsrs	r3, r3, #26
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	e01e      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x198>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fa53 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80015b8:	2320      	movs	r3, #32
 80015ba:	e004      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80015bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1b0>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0e9b      	lsrs	r3, r3, #26
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	e018      	b.n	8001612 <HAL_ADC_ConfigChannel+0x1e2>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015ec:	fa93 f3a3 	rbit	r3, r3
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80015f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80015fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001604:	2320      	movs	r3, #32
 8001606:	e004      	b.n	8001612 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001612:	429a      	cmp	r2, r3
 8001614:	d106      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fa22 	bl	8000a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fa06 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10a      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x220>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f9fb 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	0e9b      	lsrs	r3, r3, #26
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	e01e      	b.n	800168e <HAL_ADC_ConfigChannel+0x25e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f9f0 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800166e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001672:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800167e:	2320      	movs	r3, #32
 8001680:	e004      	b.n	800168c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x276>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e9b      	lsrs	r3, r3, #26
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	e018      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x2a8>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80016ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80016c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80016ca:	2320      	movs	r3, #32
 80016cc:	e004      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80016ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016d8:	429a      	cmp	r2, r3
 80016da:	d106      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f9bf 	bl	8000a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2102      	movs	r1, #2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f9a3 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10a      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x2e6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f998 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	e01e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x324>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2102      	movs	r1, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff f98d 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001738:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800173c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e004      	b.n	8001752 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001748:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x33c>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	e016      	b.n	800179a <HAL_ADC_ConfigChannel+0x36a>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800177e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e004      	b.n	800179a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800179a:	429a      	cmp	r2, r3
 800179c:	d106      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	2102      	movs	r1, #2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f95e 	bl	8000a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2103      	movs	r1, #3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f942 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10a      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x3a8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2103      	movs	r1, #3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f937 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	0e9b      	lsrs	r3, r3, #26
 80017d2:	f003 021f 	and.w	r2, r3, #31
 80017d6:	e017      	b.n	8001808 <HAL_ADC_ConfigChannel+0x3d8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2103      	movs	r1, #3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f92c 	bl	8000a3c <LL_ADC_GetOffsetChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80017f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80017f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80017fa:	2320      	movs	r3, #32
 80017fc:	e003      	b.n	8001806 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80017fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x3f0>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0e9b      	lsrs	r3, r3, #26
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	e011      	b.n	8001844 <HAL_ADC_ConfigChannel+0x414>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800182e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001830:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	e003      	b.n	8001844 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800183c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001844:	429a      	cmp	r2, r3
 8001846:	d106      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	2103      	movs	r1, #3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f909 	bl	8000a68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa74 	bl	8000d48 <LL_ADC_IsEnabled>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8140 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	461a      	mov	r2, r3
 8001876:	f7ff f9c5 	bl	8000c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4a8f      	ldr	r2, [pc, #572]	@ (8001abc <HAL_ADC_ConfigChannel+0x68c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	f040 8131 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x47e>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	3301      	adds	r3, #1
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2b09      	cmp	r3, #9
 80018a4:	bf94      	ite	ls
 80018a6:	2301      	movls	r3, #1
 80018a8:	2300      	movhi	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	e019      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x4b2>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80018bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80018c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80018c6:	2320      	movs	r3, #32
 80018c8:	e003      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80018ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2b09      	cmp	r3, #9
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d079      	beq.n	80019da <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x4d2>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	3301      	adds	r3, #1
 80018fa:	069b      	lsls	r3, r3, #26
 80018fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001900:	e015      	b.n	800192e <HAL_ADC_ConfigChannel+0x4fe>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001912:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800191a:	2320      	movs	r3, #32
 800191c:	e003      	b.n	8001926 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800191e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	069b      	lsls	r3, r3, #26
 800192a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ADC_ConfigChannel+0x51e>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0e9b      	lsrs	r3, r3, #26
 8001940:	3301      	adds	r3, #1
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	e017      	b.n	800197e <HAL_ADC_ConfigChannel+0x54e>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800195c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001966:	2320      	movs	r3, #32
 8001968:	e003      	b.n	8001972 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800196a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	ea42 0103 	orr.w	r1, r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x574>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	3301      	adds	r3, #1
 8001996:	f003 021f 	and.w	r2, r3, #31
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	e018      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x5a6>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80019b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80019b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e003      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80019c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d6:	430b      	orrs	r3, r1
 80019d8:	e081      	b.n	8001ade <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x5c6>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	3301      	adds	r3, #1
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019f4:	e015      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x5f2>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e003      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	069b      	lsls	r3, r3, #26
 8001a1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x612>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	3301      	adds	r3, #1
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	e017      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x642>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	61fb      	str	r3, [r7, #28]
  return result;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e003      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	ea42 0103 	orr.w	r1, r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x66e>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0e9b      	lsrs	r3, r3, #26
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f003 021f 	and.w	r2, r3, #31
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3b1e      	subs	r3, #30
 8001a96:	051b      	lsls	r3, r3, #20
 8001a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	e01e      	b.n	8001adc <HAL_ADC_ConfigChannel+0x6ac>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	613b      	str	r3, [r7, #16]
  return result;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e006      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x698>
 8001aba:	bf00      	nop
 8001abc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f003 021f 	and.w	r2, r3, #31
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b1e      	subs	r3, #30
 8001ad6:	051b      	lsls	r3, r3, #20
 8001ad8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001adc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f863 	bl	8000bae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <HAL_ADC_ConfigChannel+0x7bc>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d071      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af4:	483e      	ldr	r0, [pc, #248]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001af6:	f7fe ff6f 	bl	80009d8 <LL_ADC_GetCommonPathInternalCh>
 8001afa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x6e2>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d127      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b26:	d157      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b30:	4619      	mov	r1, r3
 8001b32:	482f      	ldr	r0, [pc, #188]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b34:	f7fe ff3d 	bl	80009b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f9      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b60:	e03a      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d113      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10d      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	@ (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02a      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4818      	ldr	r0, [pc, #96]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b8e:	f7fe ff10 	bl	80009b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b92:	e021      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d011      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bc0:	f7fe fef7 	bl	80009b2 <LL_ADC_SetCommonPathInternalCh>
 8001bc4:	e008      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001be0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	37d8      	adds	r7, #216	@ 0xd8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	80080000 	.word	0x80080000
 8001bf0:	50000300 	.word	0x50000300
 8001bf4:	c3210000 	.word	0xc3210000
 8001bf8:	90c00010 	.word	0x90c00010
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	053e2d63 	.word	0x053e2d63
 8001c04:	c7520000 	.word	0xc7520000
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	cb840000 	.word	0xcb840000

08001c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f891 	bl	8000d48 <LL_ADC_IsEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d169      	bne.n	8001d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <ADC_Enable+0xfc>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e055      	b.n	8001d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f860 	bl	8000d20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c60:	482b      	ldr	r0, [pc, #172]	@ (8001d10 <ADC_Enable+0x100>)
 8001c62:	f7fe feb9 	bl	80009d8 <LL_ADC_GetCommonPathInternalCh>
 8001c66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <ADC_Enable+0x104>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	4a28      	ldr	r2, [pc, #160]	@ (8001d18 <ADC_Enable+0x108>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c8a:	e002      	b.n	8001c92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c98:	f7fe fe4a 	bl	8000930 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c9e:	e028      	b.n	8001cf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f84f 	bl	8000d48 <LL_ADC_IsEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f833 	bl	8000d20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cba:	f7fe fe39 	bl	8000930 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d914      	bls.n	8001cf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00d      	beq.n	8001cf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1cf      	bne.n	8001ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	8000003f 	.word	0x8000003f
 8001d10:	50000300 	.word	0x50000300
 8001d14:	20000000 	.word	0x20000000
 8001d18:	053e2d63 	.word	0x053e2d63

08001d1c <LL_ADC_IsEnabled>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsEnabled+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsEnabled+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b0a1      	sub	sp, #132	@ 0x84
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e08b      	b.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001d92:	2300      	movs	r3, #0
 8001d94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d9e:	d102      	bne.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001da0:	4b41      	ldr	r3, [pc, #260]	@ (8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	e001      	b.n	8001daa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e06a      	b.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffb9 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ffb3 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d14c      	bne.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d149      	bne.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001de8:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001dea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d028      	beq.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e06:	035b      	lsls	r3, r3, #13
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e14:	f7ff ff82 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	4823      	ldr	r0, [pc, #140]	@ (8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e1c:	f7ff ff7e 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4323      	orrs	r3, r4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d133      	bne.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e30:	f023 030f 	bic.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6892      	ldr	r2, [r2, #8]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e42:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e44:	e024      	b.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e52:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e56:	f7ff ff61 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4812      	ldr	r0, [pc, #72]	@ (8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e5e:	f7ff ff5d 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4323      	orrs	r3, r4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d112      	bne.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e72:	f023 030f 	bic.w	r3, r3, #15
 8001e76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e78:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e7a:	e009      	b.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001e8e:	e000      	b.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3784      	adds	r7, #132	@ 0x84
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	50000100 	.word	0x50000100
 8001eac:	50000300 	.word	0x50000300

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	@ (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff47 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff5e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff90 	bl	8001f68 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5f 	bl	8001f14 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffb2 	bl	8001fd0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e014      	b.n	80020b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	791b      	ldrb	r3, [r3, #4]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7fe fb3b 	bl	8000714 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e056      	b.n	800217e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	795b      	ldrb	r3, [r3, #5]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_DAC_Start+0x20>
 80020d8:	2302      	movs	r3, #2
 80020da:	e050      	b.n	800217e <HAL_DAC_Start+0xc2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2201      	movs	r2, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <HAL_DAC_Start+0xd0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <HAL_DAC_Start+0xd4>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8002112:	e002      	b.n	800211a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b01      	subs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002130:	2b02      	cmp	r3, #2
 8002132:	d11d      	bne.n	8002170 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	e014      	b.n	8002170 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2102      	movs	r1, #2
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0202 	orr.w	r2, r2, #2
 800216e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	053e2d63 	.word	0x053e2d63

08002194 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e018      	b.n	80021e2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3308      	adds	r3, #8
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e004      	b.n	80021d8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3314      	adds	r3, #20
 80021d6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_DAC_ConfigChannel+0x1c>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e1a1      	b.n	8002554 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_DAC_ConfigChannel+0x32>
 800221e:	2302      	movs	r3, #2
 8002220:	e198      	b.n	8002554 <HAL_DAC_ConfigChannel+0x364>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2202      	movs	r2, #2
 800222c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d17a      	bne.n	800232c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002236:	f7fe fb7b 	bl	8000930 <HAL_GetTick>
 800223a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d13d      	bne.n	80022be <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002242:	e018      	b.n	8002276 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002244:	f7fe fb74 	bl	8000930 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d911      	bls.n	8002276 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f043 0208 	orr.w	r2, r3, #8
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2203      	movs	r2, #3
 8002270:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e16e      	b.n	8002554 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1df      	bne.n	8002244 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
 800228e:	e020      	b.n	80022d2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002290:	f7fe fb4e 	bl	8000930 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d90f      	bls.n	80022be <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da0a      	bge.n	80022be <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f043 0208 	orr.w	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2203      	movs	r2, #3
 80022b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e14a      	b.n	8002554 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	dbe3      	blt.n	8002290 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	ea02 0103 	and.w	r1, r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	21ff      	movs	r1, #255	@ 0xff
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	ea02 0103 	and.w	r1, r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11d      	bne.n	8002370 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800234c:	4013      	ands	r3, r2
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002364:	4313      	orrs	r3, r2
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	4013      	ands	r3, r2
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	e00f      	b.n	80023ba <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d102      	bne.n	80023a8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80023a2:	2301      	movs	r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	e008      	b.n	80023ba <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	e001      	b.n	80023ba <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023dc:	4013      	ands	r3, r2
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <HAL_DAC_ConfigChannel+0x1fe>
 80023e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ec:	e000      	b.n	80023f0 <HAL_DAC_ConfigChannel+0x200>
 80023ee:	2300      	movs	r3, #0
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002408:	4013      	ands	r3, r2
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	795b      	ldrb	r3, [r3, #5]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_DAC_ConfigChannel+0x22a>
 8002414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002418:	e000      	b.n	800241c <HAL_DAC_ConfigChannel+0x22c>
 800241a:	2300      	movs	r3, #0
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d114      	bne.n	800245c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002432:	f000 ff95 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8002436:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_DAC_ConfigChannel+0x36c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d904      	bls.n	800244a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
 8002448:	e00f      	b.n	800246a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4a44      	ldr	r2, [pc, #272]	@ (8002560 <HAL_DAC_ConfigChannel+0x370>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d90a      	bls.n	8002468 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
 800245a:	e006      	b.n	800246a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002462:	4313      	orrs	r3, r2
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
 8002466:	e000      	b.n	800246a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002468:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002478:	4313      	orrs	r3, r2
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	4013      	ands	r3, r2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	4313      	orrs	r3, r2
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	22c0      	movs	r2, #192	@ 0xc0
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	ea02 0103 	and.w	r1, r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002552:	7ffb      	ldrb	r3, [r7, #31]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	09896800 	.word	0x09896800
 8002560:	04c4b400 	.word	0x04c4b400

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002572:	e15a      	b.n	800282a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 814c 	beq.w	8002824 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0201 	and.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b03      	cmp	r3, #3
 8002610:	d017      	beq.n	8002642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d123      	bne.n	8002696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a6 	beq.w	8002824 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <HAL_GPIO_Init+0x2e4>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002848 <HAL_GPIO_Init+0x2e4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026e4:	4b58      	ldr	r3, [pc, #352]	@ (8002848 <HAL_GPIO_Init+0x2e4>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f0:	4a56      	ldr	r2, [pc, #344]	@ (800284c <HAL_GPIO_Init+0x2e8>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800271a:	d01f      	beq.n	800275c <HAL_GPIO_Init+0x1f8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_GPIO_Init+0x2ec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d019      	beq.n	8002758 <HAL_GPIO_Init+0x1f4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4b      	ldr	r2, [pc, #300]	@ (8002854 <HAL_GPIO_Init+0x2f0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_GPIO_Init+0x1f0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a4a      	ldr	r2, [pc, #296]	@ (8002858 <HAL_GPIO_Init+0x2f4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_GPIO_Init+0x1ec>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a49      	ldr	r2, [pc, #292]	@ (800285c <HAL_GPIO_Init+0x2f8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <HAL_GPIO_Init+0x1e8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a48      	ldr	r2, [pc, #288]	@ (8002860 <HAL_GPIO_Init+0x2fc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_GPIO_Init+0x1e4>
 8002744:	2305      	movs	r3, #5
 8002746:	e00a      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 8002748:	2306      	movs	r3, #6
 800274a:	e008      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 800274c:	2304      	movs	r3, #4
 800274e:	e006      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 8002750:	2303      	movs	r3, #3
 8002752:	e004      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 8002754:	2302      	movs	r3, #2
 8002756:	e002      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_GPIO_Init+0x1fa>
 800275c:	2300      	movs	r3, #0
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276e:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_GPIO_Init+0x2e8>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800277c:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_GPIO_Init+0x300>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a0:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ca:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027d0:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800281e:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <HAL_GPIO_Init+0x300>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f ae9d 	bne.w	8002574 <HAL_GPIO_Init+0x10>
  }
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000800 	.word	0x48000800
 8002858:	48000c00 	.word	0x48000c00
 800285c:	48001000 	.word	0x48001000
 8002860:	48001400 	.word	0x48001400
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002884:	e002      	b.n	800288c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d141      	bne.n	800292a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028a6:	4b4b      	ldr	r3, [pc, #300]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b2:	d131      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b4:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ba:	4a46      	ldr	r2, [pc, #280]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c4:	4b43      	ldr	r3, [pc, #268]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028cc:	4a41      	ldr	r2, [pc, #260]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2232      	movs	r2, #50	@ 0x32
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4a3f      	ldr	r2, [pc, #252]	@ (80029dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	0c9b      	lsrs	r3, r3, #18
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ea:	e002      	b.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d102      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002906:	4b33      	ldr	r3, [pc, #204]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002912:	d158      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e057      	b.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002918:	4b2e      	ldr	r3, [pc, #184]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291e:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002924:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002928:	e04d      	b.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002930:	d141      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293e:	d131      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002940:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002946:	4a23      	ldr	r2, [pc, #140]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002950:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002958:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800295e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2232      	movs	r2, #50	@ 0x32
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	0c9b      	lsrs	r3, r3, #18
 8002972:	3301      	adds	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002976:	e002      	b.n	800297e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3b01      	subs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297e:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298a:	d102      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f2      	bne.n	8002978 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d112      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e011      	b.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029b4:	e007      	b.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40007000 	.word	0x40007000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ee:	6093      	str	r3, [r2, #8]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e2fe      	b.n	8003010 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1e:	4b97      	ldr	r3, [pc, #604]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a28:	4b94      	ldr	r3, [pc, #592]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3e>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_OscConfig+0x44>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	4b8d      	ldr	r3, [pc, #564]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05b      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d157      	bne.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e2d9      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x74>
 8002a66:	4b85      	ldr	r3, [pc, #532]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a84      	ldr	r2, [pc, #528]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7e      	ldr	r2, [pc, #504]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a98:	4b78      	ldr	r3, [pc, #480]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a77      	ldr	r2, [pc, #476]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b75      	ldr	r3, [pc, #468]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a74      	ldr	r2, [pc, #464]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fd ff3a 	bl	8000930 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fd ff36 	bl	8000930 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	@ 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e29e      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fd ff26 	bl	8000930 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fd ff22 	bl	8000930 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e28a      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002afa:	4b60      	ldr	r3, [pc, #384]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4b59      	ldr	r3, [pc, #356]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4b56      	ldr	r3, [pc, #344]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_OscConfig+0x136>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_OscConfig+0x13c>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d11f      	bne.n	8002b7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_OscConfig+0x154>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e25d      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	4946      	ldr	r1, [pc, #280]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b68:	4b45      	ldr	r3, [pc, #276]	@ (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fe93 	bl	8000898 <HAL_InitTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d043      	beq.n	8002c00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e249      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3c      	ldr	r2, [pc, #240]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fd fece 	bl	8000930 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fd feca 	bl	8000930 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e232      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002baa:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	492d      	ldr	r1, [pc, #180]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e01a      	b.n	8002c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fd feaa 	bl	8000930 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fd fea6 	bl	8000930 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e20e      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1e0>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d041      	beq.n	8002c92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fd fe83 	bl	8000930 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fd fe7f 	bl	8000930 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1e7      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ef      	beq.n	8002c2e <HAL_RCC_OscConfig+0x22e>
 8002c4e:	e020      	b.n	8002c92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fd fe66 	bl	8000930 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c66:	e00d      	b.n	8002c84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fd fe62 	bl	8000930 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d906      	bls.n	8002c84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1ca      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c84:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1ea      	bne.n	8002c68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80a6 	beq.w	8002dec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca4:	4b84      	ldr	r3, [pc, #528]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2b4>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2b6>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	4b79      	ldr	r3, [pc, #484]	@ (8002ebc <HAL_RCC_OscConfig+0x4bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d118      	bne.n	8002d14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce2:	4b76      	ldr	r3, [pc, #472]	@ (8002ebc <HAL_RCC_OscConfig+0x4bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a75      	ldr	r2, [pc, #468]	@ (8002ebc <HAL_RCC_OscConfig+0x4bc>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fd fe1f 	bl	8000930 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7fd fe1b 	bl	8000930 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e183      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	4b6c      	ldr	r3, [pc, #432]	@ (8002ebc <HAL_RCC_OscConfig+0x4bc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_RCC_OscConfig+0x32e>
 8002d1c:	4b66      	ldr	r3, [pc, #408]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	4a65      	ldr	r2, [pc, #404]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d2c:	e024      	b.n	8002d78 <HAL_RCC_OscConfig+0x378>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d110      	bne.n	8002d58 <HAL_RCC_OscConfig+0x358>
 8002d36:	4b60      	ldr	r3, [pc, #384]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d46:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d56:	e00f      	b.n	8002d78 <HAL_RCC_OscConfig+0x378>
 8002d58:	4b57      	ldr	r3, [pc, #348]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	4a56      	ldr	r2, [pc, #344]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	4a52      	ldr	r2, [pc, #328]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d016      	beq.n	8002dae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fd fdd6 	bl	8000930 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fd fdd2 	bl	8000930 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e138      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	4b46      	ldr	r3, [pc, #280]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ed      	beq.n	8002d88 <HAL_RCC_OscConfig+0x388>
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fd fdbf 	bl	8000930 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fd fdbb 	bl	8000930 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e121      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ed      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de0:	4b35      	ldr	r3, [pc, #212]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	4a34      	ldr	r2, [pc, #208]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03c      	beq.n	8002e72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e00:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e06:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fd fd8e 	bl	8000930 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e18:	f7fd fd8a 	bl	8000930 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0f2      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2a:	4b23      	ldr	r3, [pc, #140]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <HAL_RCC_OscConfig+0x418>
 8002e38:	e01b      	b.n	8002e72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e40:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fd fd71 	bl	8000930 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e52:	f7fd fd6d 	bl	8000930 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0d5      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ef      	bne.n	8002e52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80c9 	beq.w	800300e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	f000 8083 	beq.w	8002f90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d15e      	bne.n	8002f50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fd fd47 	bl	8000930 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	e00c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fd43 	bl	8000930 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d905      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0ab      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec0:	4b55      	ldr	r3, [pc, #340]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ec      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ecc:	4b52      	ldr	r3, [pc, #328]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b52      	ldr	r3, [pc, #328]	@ (800301c <HAL_RCC_OscConfig+0x61c>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6a11      	ldr	r1, [r2, #32]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ee6:	0212      	lsls	r2, r2, #8
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eee:	0852      	lsrs	r2, r2, #1
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0552      	lsls	r2, r2, #21
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002efa:	0852      	lsrs	r2, r2, #1
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0652      	lsls	r2, r2, #25
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f06:	06d2      	lsls	r2, r2, #27
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	4943      	ldr	r1, [pc, #268]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f10:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a40      	ldr	r2, [pc, #256]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fd fd02 	bl	8000930 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd fcfe 	bl	8000930 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e066      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x530>
 8002f4e:	e05e      	b.n	800300e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a30      	ldr	r2, [pc, #192]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fd fce8 	bl	8000930 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fd fce4 	bl	8000930 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04c      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f76:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f82:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4924      	ldr	r1, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_RCC_OscConfig+0x620>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
 8002f8e:	e03e      	b.n	800300e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e039      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d12c      	bne.n	800300a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d123      	bne.n	800300a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d11b      	bne.n	800300a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d113      	bne.n	800300a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	3b01      	subs	r3, #1
 8003004:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	019f800c 	.word	0x019f800c
 8003020:	feeefffc 	.word	0xfeeefffc

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e11e      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b91      	ldr	r3, [pc, #580]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d910      	bls.n	800306c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b8e      	ldr	r3, [pc, #568]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 020f 	bic.w	r2, r3, #15
 8003052:	498c      	ldr	r1, [pc, #560]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b8a      	ldr	r3, [pc, #552]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e106      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d073      	beq.n	8003160 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d129      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003080:	4b81      	ldr	r3, [pc, #516]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0f4      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003090:	f000 f972 	bl	8003378 <RCC_GetSysClockFreqFromPLLSource>
 8003094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a7c      	ldr	r2, [pc, #496]	@ (800328c <HAL_RCC_ClockConfig+0x268>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d93f      	bls.n	800311e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800309e:	4b7a      	ldr	r3, [pc, #488]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d033      	beq.n	800311e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12f      	bne.n	800311e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030be:	4b72      	ldr	r3, [pc, #456]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030c6:	4a70      	ldr	r2, [pc, #448]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e024      	b.n	800311e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0c6      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0be      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030fc:	f000 f8ce 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8003100:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4a61      	ldr	r2, [pc, #388]	@ (800328c <HAL_RCC_ClockConfig+0x268>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d909      	bls.n	800311e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800310a:	4b5f      	ldr	r3, [pc, #380]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003112:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003118:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b5a      	ldr	r3, [pc, #360]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4957      	ldr	r1, [pc, #348]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003130:	f7fd fbfe 	bl	8000930 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fd fbfa 	bl	8000930 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e095      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b4e      	ldr	r3, [pc, #312]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b43      	ldr	r3, [pc, #268]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a42      	ldr	r2, [pc, #264]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800317e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003182:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003190:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003198:	4a3b      	ldr	r2, [pc, #236]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800319a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800319e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4936      	ldr	r1, [pc, #216]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031ba:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a32      	ldr	r2, [pc, #200]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 80031c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d21d      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 020f 	bic.w	r2, r3, #15
 80031dc:	4929      	ldr	r1, [pc, #164]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031e4:	f7fd fba4 	bl	8000930 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fd fba0 	bl	8000930 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e03b      	b.n	800327a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d1ed      	bne.n	80031ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4917      	ldr	r1, [pc, #92]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490f      	ldr	r1, [pc, #60]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324e:	f000 f825 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <HAL_RCC_ClockConfig+0x264>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490c      	ldr	r1, [pc, #48]	@ (8003290 <HAL_RCC_ClockConfig+0x26c>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a0a      	ldr	r2, [pc, #40]	@ (8003294 <HAL_RCC_ClockConfig+0x270>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_RCC_ClockConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fb10 	bl	8000898 <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000
 8003288:	40021000 	.word	0x40021000
 800328c:	04c4b400 	.word	0x04c4b400
 8003290:	08003854 	.word	0x08003854
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d102      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e047      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032b4:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b26      	ldr	r3, [pc, #152]	@ (800335c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e03e      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032c6:	4b23      	ldr	r3, [pc, #140]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d136      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032d2:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3301      	adds	r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fa:	68d2      	ldr	r2, [r2, #12]
 80032fc:	0a12      	lsrs	r2, r2, #8
 80032fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	617b      	str	r3, [r7, #20]
      break;
 8003308:	e00c      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800330a:	4a13      	ldr	r2, [pc, #76]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	0a12      	lsrs	r2, r2, #8
 8003318:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
      break;
 8003322:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0e5b      	lsrs	r3, r3, #25
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e001      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003344:	693b      	ldr	r3, [r7, #16]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003388:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3301      	adds	r3, #1
 8003394:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d10c      	bne.n	80033b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	4a14      	ldr	r2, [pc, #80]	@ (80033f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033a6:	68d2      	ldr	r2, [r2, #12]
 80033a8:	0a12      	lsrs	r2, r2, #8
 80033aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
    break;
 80033b4:	e00c      	b.n	80033d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033b6:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	0a12      	lsrs	r2, r2, #8
 80033c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    break;
 80033ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0e5b      	lsrs	r3, r3, #25
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033ea:	687b      	ldr	r3, [r7, #4]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	00f42400 	.word	0x00f42400

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800340c:	2300      	movs	r3, #0
 800340e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003410:	2300      	movs	r3, #0
 8003412:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8098 	beq.w	8003552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	4a3f      	ldr	r2, [pc, #252]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	@ 0x58
 800343e:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344e:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a39      	ldr	r2, [pc, #228]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800345a:	f7fd fa69 	bl	8000930 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003460:	e009      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd fa65 	bl	8000930 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d902      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	74fb      	strb	r3, [r7, #19]
        break;
 8003474:	e005      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003476:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ef      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d159      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003488:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003492:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01e      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d0:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fd fa25 	bl	8000930 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e8:	e00b      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd fa21 	bl	8000930 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d902      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ec      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	4903      	ldr	r1, [pc, #12]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800352c:	e008      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	74bb      	strb	r3, [r7, #18]
 8003532:	e005      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003534:	40021000 	.word	0x40021000
 8003538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003540:	7c7b      	ldrb	r3, [r7, #17]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4ba6      	ldr	r3, [pc, #664]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4aa5      	ldr	r2, [pc, #660]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355e:	4ba0      	ldr	r3, [pc, #640]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	f023 0203 	bic.w	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	499c      	ldr	r1, [pc, #624]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003580:	4b97      	ldr	r3, [pc, #604]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	f023 020c 	bic.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4994      	ldr	r1, [pc, #592]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a2:	4b8f      	ldr	r3, [pc, #572]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	498b      	ldr	r1, [pc, #556]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c4:	4b86      	ldr	r3, [pc, #536]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	4983      	ldr	r1, [pc, #524]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e6:	4b7e      	ldr	r3, [pc, #504]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	497a      	ldr	r1, [pc, #488]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003608:	4b75      	ldr	r3, [pc, #468]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	4972      	ldr	r1, [pc, #456]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362a:	4b6d      	ldr	r3, [pc, #436]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4969      	ldr	r1, [pc, #420]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800364c:	4b64      	ldr	r3, [pc, #400]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4961      	ldr	r1, [pc, #388]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	4958      	ldr	r1, [pc, #352]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	4950      	ldr	r1, [pc, #320]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ae:	d105      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b0:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a4a      	ldr	r2, [pc, #296]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d015      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036c8:	4b45      	ldr	r3, [pc, #276]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	4942      	ldr	r1, [pc, #264]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e6:	d105      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a3c      	ldr	r2, [pc, #240]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003700:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4934      	ldr	r1, [pc, #208]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800371e:	d105      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003720:	4b2f      	ldr	r3, [pc, #188]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a2e      	ldr	r2, [pc, #184]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800372a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003738:	4b29      	ldr	r3, [pc, #164]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003746:	4926      	ldr	r1, [pc, #152]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003758:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a20      	ldr	r2, [pc, #128]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003762:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003770:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	4918      	ldr	r1, [pc, #96]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378e:	d105      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b6:	490a      	ldr	r1, [pc, #40]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000

080037e4 <memset>:
 80037e4:	4402      	add	r2, r0
 80037e6:	4603      	mov	r3, r0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d100      	bne.n	80037ee <memset+0xa>
 80037ec:	4770      	bx	lr
 80037ee:	f803 1b01 	strb.w	r1, [r3], #1
 80037f2:	e7f9      	b.n	80037e8 <memset+0x4>

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4d0d      	ldr	r5, [pc, #52]	@ (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003830 <__libc_init_array+0x3c>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2600      	movs	r6, #0
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4d0b      	ldr	r5, [pc, #44]	@ (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	@ (8003838 <__libc_init_array+0x44>)
 8003808:	f000 f818 	bl	800383c <_init>
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2600      	movs	r6, #0
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	08003864 	.word	0x08003864
 8003830:	08003864 	.word	0x08003864
 8003834:	08003864 	.word	0x08003864
 8003838:	08003868 	.word	0x08003868

0800383c <_init>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr

08003848 <_fini>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr
