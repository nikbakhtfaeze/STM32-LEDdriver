
LEDdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800938c  0800938c  0000a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800941c  0800941c  0000b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800941c  0800941c  0000b184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800941c  0800941c  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800941c  0800941c  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08009424  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000184  080095a8  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000140c  080095a8  0000b40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015006  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cb  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00023988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d38  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021653  00000000  00000000  00025880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156de  00000000  00000000  00046ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd14b  00000000  00000000  0005c5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001296fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  00129740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012dfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009374 	.word	0x08009374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009374 	.word	0x08009374

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb3c 	bl	800089a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f89d 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9bd 	bl	80005a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f8e7 	bl	80003fc <MX_ADC1_Init>
  MX_DAC1_Init();
 800022e:	f000 f97f 	bl	8000530 <MX_DAC1_Init>
  MX_USB_Device_Init();
 8000232:	f008 fafd 	bl	8008830 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000236:	2100      	movs	r1, #0
 8000238:	483c      	ldr	r0, [pc, #240]	@ (800032c <main+0x114>)
 800023a:	f001 ff85 	bl	8002148 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800023e:	483c      	ldr	r0, [pc, #240]	@ (8000330 <main+0x118>)
 8000240:	f000 ff6e 	bl	8001120 <HAL_ADC_Start>

	      // IMON (PA0)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000244:	f04f 31ff 	mov.w	r1, #4294967295
 8000248:	4839      	ldr	r0, [pc, #228]	@ (8000330 <main+0x118>)
 800024a:	f001 f825 	bl	8001298 <HAL_ADC_PollForConversion>
	      imon_raw = HAL_ADC_GetValue(&hadc1);
 800024e:	4838      	ldr	r0, [pc, #224]	@ (8000330 <main+0x118>)
 8000250:	f001 f8fa 	bl	8001448 <HAL_ADC_GetValue>
 8000254:	4603      	mov	r3, r0
 8000256:	4a37      	ldr	r2, [pc, #220]	@ (8000334 <main+0x11c>)
 8000258:	6013      	str	r3, [r2, #0]
	      float v_imon = (imon_raw * 3.3f) / 4095.0f;
 800025a:	4b36      	ldr	r3, [pc, #216]	@ (8000334 <main+0x11c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	ee07 3a90 	vmov	s15, r3
 8000262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000266:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000338 <main+0x120>
 800026a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800026e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800033c <main+0x124>
 8000272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000276:	edc7 7a01 	vstr	s15, [r7, #4]
	      imon_current = v_imon / (14.0f * RCS_VALUE);
 800027a:	ed97 7a01 	vldr	s14, [r7, #4]
 800027e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000340 <main+0x128>
 8000282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000286:	4b2f      	ldr	r3, [pc, #188]	@ (8000344 <main+0x12c>)
 8000288:	edc3 7a00 	vstr	s15, [r3]

	      // VOUT (PA1)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800028c:	f04f 31ff 	mov.w	r1, #4294967295
 8000290:	4827      	ldr	r0, [pc, #156]	@ (8000330 <main+0x118>)
 8000292:	f001 f801 	bl	8001298 <HAL_ADC_PollForConversion>
	      vout_raw = HAL_ADC_GetValue(&hadc1);
 8000296:	4826      	ldr	r0, [pc, #152]	@ (8000330 <main+0x118>)
 8000298:	f001 f8d6 	bl	8001448 <HAL_ADC_GetValue>
 800029c:	4603      	mov	r3, r0
 800029e:	4a2a      	ldr	r2, [pc, #168]	@ (8000348 <main+0x130>)
 80002a0:	6013      	str	r3, [r2, #0]
	      float v_vout_scaled = (vout_raw * 3.3f) / 4095.0f;
 80002a2:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <main+0x130>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	ee07 3a90 	vmov	s15, r3
 80002aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002ae:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000338 <main+0x120>
 80002b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002b6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800033c <main+0x124>
 80002ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002be:	edc7 7a00 	vstr	s15, [r7]
	      vout_voltage = (v_vout_scaled / 0.03226f) * VOUT_CAL_FACTOR;
 80002c2:	ed97 7a00 	vldr	s14, [r7]
 80002c6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800034c <main+0x134>
 80002ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ce:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000350 <main+0x138>
 80002d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <main+0x13c>)
 80002d8:	edc3 7a00 	vstr	s15, [r3]

	      // POT (PA2)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002dc:	f04f 31ff 	mov.w	r1, #4294967295
 80002e0:	4813      	ldr	r0, [pc, #76]	@ (8000330 <main+0x118>)
 80002e2:	f000 ffd9 	bl	8001298 <HAL_ADC_PollForConversion>
	      pot_value = HAL_ADC_GetValue(&hadc1);
 80002e6:	4812      	ldr	r0, [pc, #72]	@ (8000330 <main+0x118>)
 80002e8:	f001 f8ae 	bl	8001448 <HAL_ADC_GetValue>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <main+0x140>)
 80002f0:	6013      	str	r3, [r2, #0]
	      pot_voltage = (pot_value * 3.3f) / 4095.0f;
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <main+0x140>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000338 <main+0x120>
 8000302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000306:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800033c <main+0x124>
 800030a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <main+0x144>)
 8000310:	edc3 7a00 	vstr	s15, [r3]

	      // Send POT value to DAC (12-bit right aligned)
	//      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pot_value);
	      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2600);
 8000314:	f640 2328 	movw	r3, #2600	@ 0xa28
 8000318:	2200      	movs	r2, #0
 800031a:	2100      	movs	r1, #0
 800031c:	4803      	ldr	r0, [pc, #12]	@ (800032c <main+0x114>)
 800031e:	f001 ff7f 	bl	8002220 <HAL_DAC_SetValue>

	      HAL_Delay(10);
 8000322:	200a      	movs	r0, #10
 8000324:	f000 fb2a 	bl	800097c <HAL_Delay>
  {
 8000328:	bf00      	nop
 800032a:	e788      	b.n	800023e <main+0x26>
 800032c:	2000020c 	.word	0x2000020c
 8000330:	200001a0 	.word	0x200001a0
 8000334:	20000230 	.word	0x20000230
 8000338:	40533333 	.word	0x40533333
 800033c:	457ff000 	.word	0x457ff000
 8000340:	4093d70b 	.word	0x4093d70b
 8000344:	20000234 	.word	0x20000234
 8000348:	20000228 	.word	0x20000228
 800034c:	3d042310 	.word	0x3d042310
 8000350:	3f974bc7 	.word	0x3f974bc7
 8000354:	2000022c 	.word	0x2000022c
 8000358:	20000220 	.word	0x20000220
 800035c:	20000224 	.word	0x20000224

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	@ 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2238      	movs	r2, #56	@ 0x38
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f008 ffc2 	bl	80092f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000382:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000386:	f003 ffcf 	bl	8004328 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800038a:	2322      	movs	r3, #34	@ 0x22
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000392:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2340      	movs	r3, #64	@ 0x40
 8000396:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a0:	2302      	movs	r3, #2
 80003a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003a8:	230c      	movs	r3, #12
 80003aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003ac:	2302      	movs	r3, #2
 80003ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003b0:	2304      	movs	r3, #4
 80003b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 f867 	bl	8004490 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003c8:	f000 f936 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	2303      	movs	r3, #3
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2103      	movs	r1, #3
 80003e4:	4618      	mov	r0, r3
 80003e6:	f004 fb65 	bl	8004ab4 <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003f0:	f000 f922 	bl	8000638 <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3750      	adds	r7, #80	@ 0x50
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	@ 0x30
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2220      	movs	r2, #32
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f008 ff6f 	bl	80092f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800041a:	4b41      	ldr	r3, [pc, #260]	@ (8000520 <MX_ADC1_Init+0x124>)
 800041c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000422:	4b3f      	ldr	r3, [pc, #252]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000424:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b3d      	ldr	r3, [pc, #244]	@ (8000520 <MX_ADC1_Init+0x124>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b3b      	ldr	r3, [pc, #236]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000436:	4b3a      	ldr	r3, [pc, #232]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043c:	4b38      	ldr	r3, [pc, #224]	@ (8000520 <MX_ADC1_Init+0x124>)
 800043e:	2201      	movs	r2, #1
 8000440:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000442:	4b37      	ldr	r3, [pc, #220]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000444:	2204      	movs	r2, #4
 8000446:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000448:	4b35      	ldr	r3, [pc, #212]	@ (8000520 <MX_ADC1_Init+0x124>)
 800044a:	2200      	movs	r2, #0
 800044c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044e:	4b34      	ldr	r3, [pc, #208]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000450:	2200      	movs	r2, #0
 8000452:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000454:	4b32      	ldr	r3, [pc, #200]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000456:	2204      	movs	r2, #4
 8000458:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b31      	ldr	r3, [pc, #196]	@ (8000520 <MX_ADC1_Init+0x124>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b2f      	ldr	r3, [pc, #188]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000464:	2200      	movs	r2, #0
 8000466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b2d      	ldr	r3, [pc, #180]	@ (8000520 <MX_ADC1_Init+0x124>)
 800046a:	2200      	movs	r2, #0
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046e:	4b2c      	ldr	r3, [pc, #176]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000470:	2200      	movs	r2, #0
 8000472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000476:	4b2a      	ldr	r3, [pc, #168]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000478:	2200      	movs	r2, #0
 800047a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800047c:	4b28      	ldr	r3, [pc, #160]	@ (8000520 <MX_ADC1_Init+0x124>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000484:	4826      	ldr	r0, [pc, #152]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000486:	f000 fcc7 	bl	8000e18 <HAL_ADC_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000490:	f000 f8d2 	bl	8000638 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049c:	4619      	mov	r1, r3
 800049e:	4820      	ldr	r0, [pc, #128]	@ (8000520 <MX_ADC1_Init+0x124>)
 80004a0:	f001 fc7c 	bl	8001d9c <HAL_ADCEx_MultiModeConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004aa:	f000 f8c5 	bl	8000638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <MX_ADC1_Init+0x128>)
 80004b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004b2:	230c      	movs	r3, #12
 80004b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004b6:	2306      	movs	r3, #6
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ba:	237f      	movs	r3, #127	@ 0x7f
 80004bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004be:	2304      	movs	r3, #4
 80004c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4815      	ldr	r0, [pc, #84]	@ (8000520 <MX_ADC1_Init+0x124>)
 80004cc:	f000 ffca 	bl	8001464 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004d6:	f000 f8af 	bl	8000638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004da:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <MX_ADC1_Init+0x12c>)
 80004dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004de:	2312      	movs	r3, #18
 80004e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004e2:	2307      	movs	r3, #7
 80004e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	480d      	ldr	r0, [pc, #52]	@ (8000520 <MX_ADC1_Init+0x124>)
 80004ec:	f000 ffba 	bl	8001464 <HAL_ADC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004f6:	f000 f89f 	bl	8000638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_ADC1_Init+0x130>)
 80004fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004fe:	2318      	movs	r3, #24
 8000500:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	@ (8000520 <MX_ADC1_Init+0x124>)
 8000508:	f000 ffac 	bl	8001464 <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000512:	f000 f891 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3730      	adds	r7, #48	@ 0x30
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200001a0 	.word	0x200001a0
 8000524:	04300002 	.word	0x04300002
 8000528:	08600004 	.word	0x08600004
 800052c:	0c900008 	.word	0x0c900008

08000530 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	@ 0x30
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2230      	movs	r2, #48	@ 0x30
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f008 fedb 	bl	80092f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <MX_DAC1_Init+0x6c>)
 8000544:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <MX_DAC1_Init+0x70>)
 8000546:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000548:	4814      	ldr	r0, [pc, #80]	@ (800059c <MX_DAC1_Init+0x6c>)
 800054a:	f001 fdda 	bl	8002102 <HAL_DAC_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000554:	f000 f870 	bl	8000638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000558:	2302      	movs	r3, #2
 800055a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000574:	2301      	movs	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	@ (800059c <MX_DAC1_Init+0x6c>)
 8000584:	f001 fe7a 	bl	800227c <HAL_DAC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 f853 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3730      	adds	r7, #48	@ 0x30
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000020c 	.word	0x2000020c
 80005a0:	50000800 	.word	0x50000800

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_GPIO_Init+0x8c>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2108      	movs	r1, #8
 80005ee:	4811      	ldr	r0, [pc, #68]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005f0:	f002 f980 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nFLT_Pin */
  GPIO_InitStruct.Pin = nFLT_Pin;
 80005f4:	2301      	movs	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nFLT_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <MX_GPIO_Init+0x90>)
 8000608:	f001 fff2 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800060c:	2308      	movs	r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_GPIO_Init+0x90>)
 8000624:	f001 ffe4 	bl	80025f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	48000400 	.word	0x48000400

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	@ 0x60
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000666:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	@ 0x58
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800067a:	f003 fef9 	bl	8004470 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	@ 0x68
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2244      	movs	r2, #68	@ 0x44
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f008 fe23 	bl	80092f8 <memset>
  if(hadc->Instance==ADC1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ba:	d134      	bne.n	8000726 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fbe1 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006d8:	f7ff ffae 	bl	8000638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e0:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 80006e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000700:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <HAL_ADC_MspInit+0xa4>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IMON_Pin|Vout_Pin|POT_Pin;
 800070c:	2307      	movs	r3, #7
 800070e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	2303      	movs	r3, #3
 8000712:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f001 ff65 	bl	80025f0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000726:	bf00      	nop
 8000728:	3768      	adds	r7, #104	@ 0x68
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <HAL_DAC_MspInit+0x74>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d124      	bne.n	80007a0 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <HAL_DAC_MspInit+0x78>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000786:	2310      	movs	r3, #16
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f001 ff28 	bl	80025f0 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	50000800 	.word	0x50000800
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f89b 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <USB_LP_IRQHandler+0x10>)
 8000816:	f002 f975 	bl	8002b04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000f10 	.word	0x20000f10

08000824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f008 fd59 	bl	800932c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087a:	f7ff fccd 	bl	8000218 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800088c:	08009424 	.word	0x08009424
  ldr r2, =_sbss
 8000890:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000894:	2000140c 	.word	0x2000140c

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>

0800089a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f001 fbed 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f80e 	bl	80008cc <HAL_InitTick>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	e001      	b.n	80008c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008bc:	f7ff fec2 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c0:	79fb      	ldrb	r3, [r7, #7]

}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_InitTick+0x68>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d022      	beq.n	8000926 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_InitTick+0x6c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <HAL_InitTick+0x68>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80008f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fbf8 	bl	80020ea <HAL_SYSTICK_Config>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10f      	bne.n	8000920 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d809      	bhi.n	800091a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000906:	2200      	movs	r2, #0
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	f04f 30ff 	mov.w	r0, #4294967295
 800090e:	f001 fbc4 	bl	800209a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <HAL_InitTick+0x70>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e007      	b.n	800092a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e004      	b.n	800092a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e001      	b.n	800092a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_IncTick+0x1c>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x20>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4413      	add	r3, r2
 800094e:	4a03      	ldr	r2, [pc, #12]	@ (800095c <HAL_IncTick+0x1c>)
 8000950:	6013      	str	r3, [r2, #0]
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000238 	.word	0x20000238
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000238 	.word	0x20000238

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff ffee 	bl	8000964 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d004      	beq.n	80009a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_Delay+0x40>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a0:	bf00      	nop
 80009a2:	f7ff ffdf 	bl	8000964 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8f7      	bhi.n	80009a2 <HAL_Delay+0x26>
  {
  }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000008 	.word	0x20000008

080009c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	609a      	str	r2, [r3, #8]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3360      	adds	r3, #96	@ 0x60
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <LL_ADC_SetOffset+0x44>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	430a      	orrs	r2, r1
 8000a56:	4313      	orrs	r3, r2
 8000a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a60:	bf00      	nop
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	03fff000 	.word	0x03fff000

08000a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3360      	adds	r3, #96	@ 0x60
 8000a7e:	461a      	mov	r2, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3360      	adds	r3, #96	@ 0x60
 8000aac:	461a      	mov	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b087      	sub	sp, #28
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3360      	adds	r3, #96	@ 0x60
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000afc:	bf00      	nop
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3360      	adds	r3, #96	@ 0x60
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b32:	bf00      	nop
 8000b34:	371c      	adds	r7, #28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	615a      	str	r2, [r3, #20]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3330      	adds	r3, #48	@ 0x30
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	4413      	add	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	211f      	movs	r1, #31
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	0e9b      	lsrs	r3, r3, #26
 8000bc2:	f003 011f 	and.w	r1, r3, #31
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3314      	adds	r3, #20
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0e5b      	lsrs	r3, r3, #25
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	0d1b      	lsrs	r3, r3, #20
 8000c0a:	f003 031f 	and.w	r3, r3, #31
 8000c0e:	2107      	movs	r1, #7
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	431a      	orrs	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0318 	and.w	r3, r3, #24
 8000c5a:	4908      	ldr	r1, [pc, #32]	@ (8000c7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c5c:	40d9      	lsrs	r1, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	400b      	ands	r3, r1
 8000c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c66:	431a      	orrs	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	0007ffff 	.word	0x0007ffff

08000c80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 031f 	and.w	r3, r3, #31
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6093      	str	r3, [r2, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cf0:	d101      	bne.n	8000cf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d40:	d101      	bne.n	8000d46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d68:	f043 0201 	orr.w	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <LL_ADC_IsEnabled+0x18>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <LL_ADC_IsEnabled+0x1a>
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000db2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000db6:	f043 0204 	orr.w	r2, r3, #4
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d101      	bne.n	8000de2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d101      	bne.n	8000e08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e167      	b.n	8001102 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fc23 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff3f 	bl	8000cdc <LL_ADC_IsDeepPowerDownEnabled>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff25 	bl	8000cb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff5a 	bl	8000d2c <LL_ADC_IsInternalRegulatorEnabled>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d115      	bne.n	8000eaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff3e 	bl	8000d04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e88:	4ba0      	ldr	r3, [pc, #640]	@ (800110c <HAL_ADC_Init+0x2f4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	099b      	lsrs	r3, r3, #6
 8000e8e:	4aa0      	ldr	r2, [pc, #640]	@ (8001110 <HAL_ADC_Init+0x2f8>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	099b      	lsrs	r3, r3, #6
 8000e96:	3301      	adds	r3, #1
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e9c:	e002      	b.n	8000ea4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f9      	bne.n	8000e9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff3c 	bl	8000d2c <LL_ADC_IsInternalRegulatorEnabled>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ebe:	f043 0210 	orr.w	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff75 	bl	8000dca <LL_ADC_REG_IsConversionOngoing>
 8000ee0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8100 	bne.w	80010f0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 80fc 	bne.w	80010f0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000efc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f00:	f043 0202 	orr.w	r2, r3, #2
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff35 	bl	8000d7c <LL_ADC_IsEnabled>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d111      	bne.n	8000f3c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000f1c:	f7ff ff2e 	bl	8000d7c <LL_ADC_IsEnabled>
 8000f20:	4604      	mov	r4, r0
 8000f22:	487c      	ldr	r0, [pc, #496]	@ (8001114 <HAL_ADC_Init+0x2fc>)
 8000f24:	f7ff ff2a 	bl	8000d7c <LL_ADC_IsEnabled>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4323      	orrs	r3, r4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4878      	ldr	r0, [pc, #480]	@ (8001118 <HAL_ADC_Init+0x300>)
 8000f38:	f7ff fd42 	bl	80009c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7f5b      	ldrb	r3, [r3, #29]
 8000f40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d106      	bne.n	8000f78 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	045b      	lsls	r3, r3, #17
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d009      	beq.n	8000f94 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	4b60      	ldr	r3, [pc, #384]	@ (800111c <HAL_ADC_Init+0x304>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff14 	bl	8000df0 <LL_ADC_INJ_IsConversionOngoing>
 8000fc8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d16d      	bne.n	80010ac <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d16a      	bne.n	80010ac <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fe2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ff2:	f023 0302 	bic.w	r3, r3, #2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d017      	beq.n	8001038 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001016:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001020:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6911      	ldr	r1, [r2, #16]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	430b      	orrs	r3, r1
 8001032:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001036:	e013      	b.n	8001060 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001046:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800105c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001066:	2b01      	cmp	r3, #1
 8001068:	d118      	bne.n	800109c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001080:	4311      	orrs	r1, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001086:	4311      	orrs	r1, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800108c:	430a      	orrs	r2, r1
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	e007      	b.n	80010ac <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10c      	bne.n	80010ce <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f023 010f 	bic.w	r1, r3, #15
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80010cc:	e007      	b.n	80010de <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020f 	bic.w	r2, r2, #15
 80010dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010ee:	e007      	b.n	8001100 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f4:	f043 0210 	orr.w	r2, r3, #16
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001100:	7ffb      	ldrb	r3, [r7, #31]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000
 8001110:	053e2d63 	.word	0x053e2d63
 8001114:	50000100 	.word	0x50000100
 8001118:	50000300 	.word	0x50000300
 800111c:	fff04007 	.word	0xfff04007

08001120 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001128:	4859      	ldr	r0, [pc, #356]	@ (8001290 <HAL_ADC_Start+0x170>)
 800112a:	f7ff fda9 	bl	8000c80 <LL_ADC_GetMultimode>
 800112e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe48 	bl	8000dca <LL_ADC_REG_IsConversionOngoing>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 809f 	bne.w	8001280 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_Start+0x30>
 800114c:	2302      	movs	r3, #2
 800114e:	e09a      	b.n	8001286 <HAL_ADC_Start+0x166>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fd73 	bl	8001c44 <ADC_Enable>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 8086 	bne.w	8001276 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a44      	ldr	r2, [pc, #272]	@ (8001294 <HAL_ADC_Start+0x174>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d002      	beq.n	800118e <HAL_ADC_Start+0x6e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e001      	b.n	8001192 <HAL_ADC_Start+0x72>
 800118e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	4293      	cmp	r3, r2
 8001198:	d002      	beq.n	80011a0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011b8:	d106      	bne.n	80011c8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011be:	f023 0206 	bic.w	r2, r3, #6
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80011c6:	e002      	b.n	80011ce <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	221c      	movs	r2, #28
 80011d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001294 <HAL_ADC_Start+0x174>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d002      	beq.n	80011ee <HAL_ADC_Start+0xce>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e001      	b.n	80011f2 <HAL_ADC_Start+0xd2>
 80011ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d008      	beq.n	800120c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d002      	beq.n	800120c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d114      	bne.n	8001236 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001222:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fdb7 	bl	8000da2 <LL_ADC_REG_StartConversion>
 8001234:	e026      	b.n	8001284 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <HAL_ADC_Start+0x174>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d002      	beq.n	8001252 <HAL_ADC_Start+0x132>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	e001      	b.n	8001256 <HAL_ADC_Start+0x136>
 8001252:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001256:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00f      	beq.n	8001284 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001268:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800126c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001274:	e006      	b.n	8001284 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800127e:	e001      	b.n	8001284 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001280:	2302      	movs	r3, #2
 8001282:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001284:	7dfb      	ldrb	r3, [r7, #23]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	50000300 	.word	0x50000300
 8001294:	50000100 	.word	0x50000100

08001298 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a2:	4867      	ldr	r0, [pc, #412]	@ (8001440 <HAL_ADC_PollForConversion+0x1a8>)
 80012a4:	f7ff fcec 	bl	8000c80 <LL_ADC_GetMultimode>
 80012a8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d102      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80012b2:	2308      	movs	r3, #8
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e02a      	b.n	800130e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d002      	beq.n	80012ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	d111      	bne.n	80012ee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012dc:	f043 0220 	orr.w	r2, r3, #32
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0a6      	b.n	8001436 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012e8:	2304      	movs	r3, #4
 80012ea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80012ec:	e00f      	b.n	800130e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80012ee:	4854      	ldr	r0, [pc, #336]	@ (8001440 <HAL_ADC_PollForConversion+0x1a8>)
 80012f0:	f7ff fcd4 	bl	8000c9c <LL_ADC_GetMultiDMATransfer>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fe:	f043 0220 	orr.w	r2, r3, #32
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e095      	b.n	8001436 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800130a:	2304      	movs	r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800130e:	f7ff fb29 	bl	8000964 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001314:	e021      	b.n	800135a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d01d      	beq.n	800135a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800131e:	f7ff fb21 	bl	8000964 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d302      	bcc.n	8001334 <HAL_ADC_PollForConversion+0x9c>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d112      	bne.n	800135a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10b      	bne.n	800135a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001346:	f043 0204 	orr.w	r2, r3, #4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e06d      	b.n	8001436 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0d6      	beq.n	8001316 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fbf3 	bl	8000b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01c      	beq.n	80013be <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7f5b      	ldrb	r3, [r3, #29]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d118      	bne.n	80013be <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b08      	cmp	r3, #8
 8001398:	d111      	bne.n	80013be <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a20      	ldr	r2, [pc, #128]	@ (8001444 <HAL_ADC_PollForConversion+0x1ac>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_PollForConversion+0x136>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e001      	b.n	80013d2 <HAL_ADC_PollForConversion+0x13a>
 80013ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d008      	beq.n	80013ec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d002      	beq.n	80013ec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d104      	bne.n	80013f6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	e00d      	b.n	8001412 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_ADC_PollForConversion+0x1ac>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d002      	beq.n	8001406 <HAL_ADC_PollForConversion+0x16e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	e001      	b.n	800140a <HAL_ADC_PollForConversion+0x172>
 8001406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800140a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d104      	bne.n	8001422 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2208      	movs	r2, #8
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e008      	b.n	8001434 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	220c      	movs	r2, #12
 8001432:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	50000300 	.word	0x50000300
 8001444:	50000100 	.word	0x50000100

08001448 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0b6      	sub	sp, #216	@ 0xd8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x22>
 8001482:	2302      	movs	r3, #2
 8001484:	e3c8      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x7b4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc99 	bl	8000dca <LL_ADC_REG_IsConversionOngoing>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 83ad 	bne.w	8001bfa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	f7ff fb6c 	bl	8000b8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc87 	bl	8000dca <LL_ADC_REG_IsConversionOngoing>
 80014bc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc93 	bl	8000df0 <LL_ADC_INJ_IsConversionOngoing>
 80014ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 81d9 	bne.w	800188a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f040 81d4 	bne.w	800188a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014ea:	d10f      	bne.n	800150c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb73 	bl	8000be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb1a 	bl	8000b3e <LL_ADC_SetSamplingTimeCommonConfig>
 800150a:	e00e      	b.n	800152a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	461a      	mov	r2, r3
 800151a:	f7ff fb62 	bl	8000be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb0a 	bl	8000b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d022      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6919      	ldr	r1, [r3, #16]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800155c:	f7ff fa64 	bl	8000a28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6919      	ldr	r1, [r3, #16]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	461a      	mov	r2, r3
 800156e:	f7ff fab0 	bl	8000ad2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x124>
 8001582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001586:	e000      	b.n	800158a <HAL_ADC_ConfigChannel+0x126>
 8001588:	2300      	movs	r3, #0
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff fabc 	bl	8000b08 <LL_ADC_SetOffsetSaturation>
 8001590:	e17b      	b.n	800188a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fa69 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <HAL_ADC_ConfigChannel+0x15a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fa5e 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	e01e      	b.n	80015fc <HAL_ADC_ConfigChannel+0x198>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fa53 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80015ec:	2320      	movs	r3, #32
 80015ee:	e004      	b.n	80015fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80015f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1b0>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0e9b      	lsrs	r3, r3, #26
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	e018      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1e2>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800162c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001638:	2320      	movs	r3, #32
 800163a:	e004      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800163c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001640:	fab3 f383 	clz	r3, r3
 8001644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001646:	429a      	cmp	r2, r3
 8001648:	d106      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fa22 	bl	8000a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa06 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10a      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x220>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f9fb 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	0e9b      	lsrs	r3, r3, #26
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	e01e      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x25e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f9f0 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80016a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80016aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80016b2:	2320      	movs	r3, #32
 80016b4:	e004      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80016b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_ADC_ConfigChannel+0x276>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0e9b      	lsrs	r3, r3, #26
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	e018      	b.n	800170c <HAL_ADC_ConfigChannel+0x2a8>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80016ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80016f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80016fe:	2320      	movs	r3, #32
 8001700:	e004      	b.n	800170c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800170c:	429a      	cmp	r2, r3
 800170e:	d106      	bne.n	800171e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f9bf 	bl	8000a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f9a3 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <HAL_ADC_ConfigChannel+0x2e6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f998 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	0e9b      	lsrs	r3, r3, #26
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	e01e      	b.n	8001788 <HAL_ADC_ConfigChannel+0x324>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2102      	movs	r1, #2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f98d 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800176c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001778:	2320      	movs	r3, #32
 800177a:	e004      	b.n	8001786 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800177c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x33c>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0e9b      	lsrs	r3, r3, #26
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	e016      	b.n	80017ce <HAL_ADC_ConfigChannel+0x36a>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80017b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80017b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80017c0:	2320      	movs	r3, #32
 80017c2:	e004      	b.n	80017ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80017c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d106      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f95e 	bl	8000a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2103      	movs	r1, #3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f942 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x3a8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2103      	movs	r1, #3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff f937 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	f003 021f 	and.w	r2, r3, #31
 800180a:	e017      	b.n	800183c <HAL_ADC_ConfigChannel+0x3d8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2103      	movs	r1, #3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f92c 	bl	8000a70 <LL_ADC_GetOffsetChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001826:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e003      	b.n	800183a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x3f0>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	e011      	b.n	8001878 <HAL_ADC_ConfigChannel+0x414>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001864:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e003      	b.n	8001878 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001878:	429a      	cmp	r2, r3
 800187a:	d106      	bne.n	800188a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	2103      	movs	r1, #3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f909 	bl	8000a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa74 	bl	8000d7c <LL_ADC_IsEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 8140 	bne.w	8001b1c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	461a      	mov	r2, r3
 80018aa:	f7ff f9c5 	bl	8000c38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4a8f      	ldr	r2, [pc, #572]	@ (8001af0 <HAL_ADC_ConfigChannel+0x68c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f040 8131 	bne.w	8001b1c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10b      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x47e>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0e9b      	lsrs	r3, r3, #26
 80018d0:	3301      	adds	r3, #1
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b09      	cmp	r3, #9
 80018d8:	bf94      	ite	ls
 80018da:	2301      	movls	r3, #1
 80018dc:	2300      	movhi	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	e019      	b.n	8001916 <HAL_ADC_ConfigChannel+0x4b2>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80018f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80018f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80018fa:	2320      	movs	r3, #32
 80018fc:	e003      	b.n	8001906 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80018fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b09      	cmp	r3, #9
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001916:	2b00      	cmp	r3, #0
 8001918:	d079      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d107      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x4d2>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	3301      	adds	r3, #1
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001934:	e015      	b.n	8001962 <HAL_ADC_ConfigChannel+0x4fe>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001946:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e003      	b.n	800195a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	069b      	lsls	r3, r3, #26
 800195e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x51e>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	3301      	adds	r3, #1
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	e017      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x54e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800199a:	2320      	movs	r3, #32
 800199c:	e003      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800199e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x574>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	3301      	adds	r3, #1
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	e018      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x5a6>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80019e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80019ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80019f0:	2320      	movs	r3, #32
 80019f2:	e003      	b.n	80019fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80019f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	f003 021f 	and.w	r2, r3, #31
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	e081      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x5c6>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	3301      	adds	r3, #1
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a28:	e015      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x5f2>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	069b      	lsls	r3, r3, #26
 8001a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x612>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	e017      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x642>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	61fb      	str	r3, [r7, #28]
  return result;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e003      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	ea42 0103 	orr.w	r1, r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x66e>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b1e      	subs	r3, #30
 8001aca:	051b      	lsls	r3, r3, #20
 8001acc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	e01e      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x6ac>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	613b      	str	r3, [r7, #16]
  return result;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e006      	b.n	8001afc <HAL_ADC_ConfigChannel+0x698>
 8001aee:	bf00      	nop
 8001af0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	f003 021f 	and.w	r2, r3, #31
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	3b1e      	subs	r3, #30
 8001b0a:	051b      	lsls	r3, r3, #20
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f863 	bl	8000be2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d071      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b28:	483e      	ldr	r0, [pc, #248]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b2a:	f7fe ff6f 	bl	8000a0c <LL_ADC_GetCommonPathInternalCh>
 8001b2e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a3c      	ldr	r2, [pc, #240]	@ (8001c28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_ADC_ConfigChannel+0x6e2>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3a      	ldr	r2, [pc, #232]	@ (8001c2c <HAL_ADC_ConfigChannel+0x7c8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d127      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d121      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b5a:	d157      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b64:	4619      	mov	r1, r3
 8001b66:	482f      	ldr	r0, [pc, #188]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b68:	f7fe ff3d 	bl	80009e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b6c:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f9      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b94:	e03a      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a27      	ldr	r2, [pc, #156]	@ (8001c38 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d113      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <HAL_ADC_ConfigChannel+0x7d8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02a      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4818      	ldr	r0, [pc, #96]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bc2:	f7fe ff10 	bl	80009e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bc6:	e021      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11c      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a16      	ldr	r2, [pc, #88]	@ (8001c3c <HAL_ADC_ConfigChannel+0x7d8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d011      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bf4:	f7fe fef7 	bl	80009e6 <LL_ADC_SetCommonPathInternalCh>
 8001bf8:	e008      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c14:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	37d8      	adds	r7, #216	@ 0xd8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	80080000 	.word	0x80080000
 8001c24:	50000300 	.word	0x50000300
 8001c28:	c3210000 	.word	0xc3210000
 8001c2c:	90c00010 	.word	0x90c00010
 8001c30:	20000000 	.word	0x20000000
 8001c34:	053e2d63 	.word	0x053e2d63
 8001c38:	c7520000 	.word	0xc7520000
 8001c3c:	50000100 	.word	0x50000100
 8001c40:	cb840000 	.word	0xcb840000

08001c44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f891 	bl	8000d7c <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d169      	bne.n	8001d34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <ADC_Enable+0xfc>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00d      	beq.n	8001c8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e055      	b.n	8001d36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f860 	bl	8000d54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c94:	482b      	ldr	r0, [pc, #172]	@ (8001d44 <ADC_Enable+0x100>)
 8001c96:	f7fe feb9 	bl	8000a0c <LL_ADC_GetCommonPathInternalCh>
 8001c9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca4:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <ADC_Enable+0x104>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	4a28      	ldr	r2, [pc, #160]	@ (8001d4c <ADC_Enable+0x108>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cbe:	e002      	b.n	8001cc6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ccc:	f7fe fe4a 	bl	8000964 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cd2:	e028      	b.n	8001d26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f84f 	bl	8000d7c <LL_ADC_IsEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f833 	bl	8000d54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cee:	f7fe fe39 	bl	8000964 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d914      	bls.n	8001d26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d00d      	beq.n	8001d26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e007      	b.n	8001d36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d1cf      	bne.n	8001cd4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	8000003f 	.word	0x8000003f
 8001d44:	50000300 	.word	0x50000300
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	053e2d63 	.word	0x053e2d63

08001d50 <LL_ADC_IsEnabled>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <LL_ADC_IsEnabled+0x18>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <LL_ADC_IsEnabled+0x1a>
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b0a1      	sub	sp, #132	@ 0x84
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e08b      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dd2:	d102      	bne.n	8001dda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dd4:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	e001      	b.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e06a      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ffb9 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8001e04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ffb3 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d14c      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d149      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001e1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d028      	beq.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e3a:	035b      	lsls	r3, r3, #13
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e48:	f7ff ff82 	bl	8001d50 <LL_ADC_IsEnabled>
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	4823      	ldr	r0, [pc, #140]	@ (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e50:	f7ff ff7e 	bl	8001d50 <LL_ADC_IsEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4323      	orrs	r3, r4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d133      	bne.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e64:	f023 030f 	bic.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e78:	e024      	b.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e86:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e8a:	f7ff ff61 	bl	8001d50 <LL_ADC_IsEnabled>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4812      	ldr	r0, [pc, #72]	@ (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e92:	f7ff ff5d 	bl	8001d50 <LL_ADC_IsEnabled>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d112      	bne.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ea6:	f023 030f 	bic.w	r3, r3, #15
 8001eaa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001eac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001eae:	e009      	b.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ece:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3784      	adds	r7, #132	@ 0x84
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	50000100 	.word	0x50000100
 8001ee0:	50000300 	.word	0x50000300

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	@ (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	@ (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	@ 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff40 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff90 	bl	8001fd8 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5f 	bl	8001f84 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff33 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa4 	bl	8002040 <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e014      	b.n	800213e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe fb05 	bl	8000734 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e056      	b.n	800220a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	795b      	ldrb	r3, [r3, #5]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_DAC_Start+0x20>
 8002164:	2302      	movs	r3, #2
 8002166:	e050      	b.n	800220a <HAL_DAC_Start+0xc2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <HAL_DAC_Start+0xd0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_DAC_Start+0xd4>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800219e:	e002      	b.n	80021a6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f9      	bne.n	80021a0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d11d      	bne.n	80021fc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	e014      	b.n	80021fc <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2102      	movs	r1, #2
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0202 	orr.w	r2, r2, #2
 80021fa:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000
 800221c:	053e2d63 	.word	0x053e2d63

08002220 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e018      	b.n	800226e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3308      	adds	r3, #8
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e004      	b.n	8002264 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	3314      	adds	r3, #20
 8002262:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_DAC_ConfigChannel+0x1c>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e1a1      	b.n	80025e0 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	795b      	ldrb	r3, [r3, #5]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_DAC_ConfigChannel+0x32>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e198      	b.n	80025e0 <HAL_DAC_ConfigChannel+0x364>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2202      	movs	r2, #2
 80022b8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d17a      	bne.n	80023b8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fb4f 	bl	8000964 <HAL_GetTick>
 80022c6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13d      	bne.n	800234a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022ce:	e018      	b.n	8002302 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022d0:	f7fe fb48 	bl	8000964 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d911      	bls.n	8002302 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f043 0208 	orr.w	r2, r3, #8
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2203      	movs	r2, #3
 80022fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e16e      	b.n	80025e0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1df      	bne.n	80022d0 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002318:	641a      	str	r2, [r3, #64]	@ 0x40
 800231a:	e020      	b.n	800235e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800231c:	f7fe fb22 	bl	8000964 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d90f      	bls.n	800234a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	da0a      	bge.n	800234a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f043 0208 	orr.w	r2, r3, #8
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2203      	movs	r2, #3
 8002344:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e14a      	b.n	80025e0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	2b00      	cmp	r3, #0
 8002352:	dbe3      	blt.n	800231c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	ea02 0103 	and.w	r1, r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	21ff      	movs	r1, #255	@ 0xff
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	ea02 0103 	and.w	r1, r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d11d      	bne.n	80023fc <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	221f      	movs	r2, #31
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d8:	4013      	ands	r3, r2
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	4313      	orrs	r3, r2
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002414:	4013      	ands	r3, r2
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d102      	bne.n	8002426 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	e00f      	b.n	8002446 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d102      	bne.n	8002434 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800242e:	2301      	movs	r3, #1
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	e008      	b.n	8002446 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800243c:	2301      	movs	r3, #1
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	e001      	b.n	8002446 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	4013      	ands	r3, r2
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_DAC_ConfigChannel+0x1fe>
 8002474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002478:	e000      	b.n	800247c <HAL_DAC_ConfigChannel+0x200>
 800247a:	2300      	movs	r3, #0
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	4013      	ands	r3, r2
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	795b      	ldrb	r3, [r3, #5]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_DAC_ConfigChannel+0x22a>
 80024a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a4:	e000      	b.n	80024a8 <HAL_DAC_ConfigChannel+0x22c>
 80024a6:	2300      	movs	r3, #0
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d114      	bne.n	80024e8 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80024be:	f002 fc97 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 80024c2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4a48      	ldr	r2, [pc, #288]	@ (80025e8 <HAL_DAC_ConfigChannel+0x36c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d904      	bls.n	80024d6 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d4:	e00f      	b.n	80024f6 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4a44      	ldr	r2, [pc, #272]	@ (80025ec <HAL_DAC_ConfigChannel+0x370>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d90a      	bls.n	80024f4 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e6:	e006      	b.n	80024f6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ee:	4313      	orrs	r3, r2
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f2:	e000      	b.n	80024f6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80024f4:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	4313      	orrs	r3, r2
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43da      	mvns	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	400a      	ands	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002548:	4013      	ands	r3, r2
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002560:	4313      	orrs	r3, r2
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	22c0      	movs	r2, #192	@ 0xc0
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	ea02 0103 	and.w	r1, r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025de:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3728      	adds	r7, #40	@ 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	09896800 	.word	0x09896800
 80025ec:	04c4b400 	.word	0x04c4b400

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025fe:	e15a      	b.n	80028b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 814c 	beq.w	80028b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d005      	beq.n	8002630 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800262c:	2b02      	cmp	r3, #2
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80a6 	beq.w	80028b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4b5b      	ldr	r3, [pc, #364]	@ (80028d4 <HAL_GPIO_Init+0x2e4>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	4a5a      	ldr	r2, [pc, #360]	@ (80028d4 <HAL_GPIO_Init+0x2e4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002770:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_GPIO_Init+0x2e4>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277c:	4a56      	ldr	r2, [pc, #344]	@ (80028d8 <HAL_GPIO_Init+0x2e8>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027a6:	d01f      	beq.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a4c      	ldr	r2, [pc, #304]	@ (80028dc <HAL_GPIO_Init+0x2ec>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d019      	beq.n	80027e4 <HAL_GPIO_Init+0x1f4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a4b      	ldr	r2, [pc, #300]	@ (80028e0 <HAL_GPIO_Init+0x2f0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_GPIO_Init+0x1f0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a4a      	ldr	r2, [pc, #296]	@ (80028e4 <HAL_GPIO_Init+0x2f4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00d      	beq.n	80027dc <HAL_GPIO_Init+0x1ec>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a49      	ldr	r2, [pc, #292]	@ (80028e8 <HAL_GPIO_Init+0x2f8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <HAL_GPIO_Init+0x1e8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a48      	ldr	r2, [pc, #288]	@ (80028ec <HAL_GPIO_Init+0x2fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_GPIO_Init+0x1e4>
 80027d0:	2305      	movs	r3, #5
 80027d2:	e00a      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027d4:	2306      	movs	r3, #6
 80027d6:	e008      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027d8:	2304      	movs	r3, #4
 80027da:	e006      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027dc:	2303      	movs	r3, #3
 80027de:	e004      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e002      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027e8:	2300      	movs	r3, #0
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	f002 0203 	and.w	r2, r2, #3
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	4093      	lsls	r3, r2
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fa:	4937      	ldr	r1, [pc, #220]	@ (80028d8 <HAL_GPIO_Init+0x2e8>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002808:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800282c:	4a30      	ldr	r2, [pc, #192]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002832:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002856:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800285c:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002880:	4a1b      	ldr	r2, [pc, #108]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028aa:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <HAL_GPIO_Init+0x300>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f ae9d 	bne.w	8002600 <HAL_GPIO_Init+0x10>
  }
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000
 80028dc:	48000400 	.word	0x48000400
 80028e0:	48000800 	.word	0x48000800
 80028e4:	48000c00 	.word	0x48000c00
 80028e8:	48001000 	.word	0x48001000
 80028ec:	48001400 	.word	0x48001400
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002910:	e002      	b.n	8002918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0c0      	b.n	8002ab8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f006 f9d0 	bl	8008cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f002 fca0 	bl	80052a2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e03e      	b.n	80029e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3311      	adds	r3, #17
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3310      	adds	r3, #16
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3313      	adds	r3, #19
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3320      	adds	r3, #32
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3324      	adds	r3, #36	@ 0x24
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3301      	adds	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3bb      	bcc.n	8002968 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e044      	b.n	8002a80 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	791b      	ldrb	r3, [r3, #4]
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d3b5      	bcc.n	80029f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a96:	f002 fc1f 	bl	80052d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7a9b      	ldrb	r3, [r3, #10]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 fc0e 	bl	80042d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_Start+0x16>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e012      	b.n	8002afc <HAL_PCD_Start+0x3c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fbc6 	bl	8005274 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 f9a3 	bl	8006e38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f9a8 	bl	8006e66 <USB_ReadInterrupts>
 8002b16:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fb06 	bl	8003134 <PCD_EP_ISR_Handler>

    return;
 8002b28:	e110      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 f960 	bl	8008e12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8fc 	bl	8002d52 <HAL_PCD_SetAddress>

    return;
 8002b5a:	e0f7      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b78:	b292      	uxth	r2, r2
 8002b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b7e:	e0e5      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ba2:	e0d3      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d034      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0208 	bic.w	r2, r2, #8
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f006 fb00 	bl	80091f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f006 f943 	bl	8008e84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c16:	e099      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d027      	beq.n	8002c72 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0208 	orr.w	r2, r2, #8
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0204 	orr.w	r2, r2, #4
 8002c64:	b292      	uxth	r2, r2
 8002c66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f006 f8f0 	bl	8008e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c70:	e06c      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d040      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12b      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0204 	orr.w	r2, r2, #4
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0208 	orr.w	r2, r2, #8
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cec:	2101      	movs	r1, #1
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f006 fa82 	bl	80091f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002cf4:	e02a      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f006 f8aa 	bl	8008e50 <HAL_PCD_SuspendCallback>
    return;
 8002cfc:	e026      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f006 f868 	bl	8008df6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d26:	e011      	b.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_SetAddress+0x1a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e012      	b.n	8002d92 <HAL_PCD_SetAddress+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f844 	bl	8006e10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	4608      	mov	r0, r1
 8002da4:	4611      	mov	r1, r2
 8002da6:	461a      	mov	r2, r3
 8002da8:	4603      	mov	r3, r0
 8002daa:	70fb      	strb	r3, [r7, #3]
 8002dac:	460b      	mov	r3, r1
 8002dae:	803b      	strh	r3, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da0e      	bge.n	8002dde <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 0207 	and.w	r2, r3, #7
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	3310      	adds	r3, #16
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	705a      	strb	r2, [r3, #1]
 8002ddc:	e00e      	b.n	8002dfc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f003 0207 	and.w	r2, r3, #7
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e08:	883b      	ldrh	r3, [r7, #0]
 8002e0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	78ba      	ldrb	r2, [r7, #2]
 8002e16:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e18:	78bb      	ldrb	r3, [r7, #2]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d102      	bne.n	8002e24 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_PCD_EP_Open+0x98>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e00e      	b.n	8002e50 <HAL_PCD_EP_Open+0xb6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fa67 	bl	8005314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da0e      	bge.n	8002e8a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	3310      	adds	r3, #16
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	705a      	strb	r2, [r3, #1]
 8002e88:	e00e      	b.n	8002ea8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 0207 	and.w	r2, r3, #7
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_PCD_EP_Close+0x6a>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e00e      	b.n	8002ee0 <HAL_PCD_EP_Close+0x88>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 ff07 	bl	8005ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	f003 0207 	and.w	r2, r3, #7
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f8bf 	bl	80060be <USB_EPStartXfer>

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 0207 	and.w	r2, r3, #7
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f6c:	681b      	ldr	r3, [r3, #0]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	460b      	mov	r3, r1
 8002f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f003 0207 	and.w	r2, r3, #7
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3310      	adds	r3, #16
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 f870 	bl	80060be <USB_EPStartXfer>

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	7912      	ldrb	r2, [r2, #4]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e03e      	b.n	8003084 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da0e      	bge.n	800302c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3310      	adds	r3, #16
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e00c      	b.n	8003046 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	b2da      	uxtb	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_PCD_EP_SetStall+0x7e>
 8003062:	2302      	movs	r3, #2
 8003064:	e00e      	b.n	8003084 <HAL_PCD_EP_SetStall+0x9c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fdd1 	bl	8006c1c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	7912      	ldrb	r2, [r2, #4]
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e040      	b.n	800312c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da0e      	bge.n	80030d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0207 	and.w	r2, r3, #7
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3310      	adds	r3, #16
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	705a      	strb	r2, [r3, #1]
 80030ce:	e00e      	b.n	80030ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_PCD_EP_ClrStall+0x82>
 800310a:	2302      	movs	r3, #2
 800310c:	e00e      	b.n	800312c <HAL_PCD_EP_ClrStall+0xa0>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68f9      	ldr	r1, [r7, #12]
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fdce 	bl	8006cbe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b092      	sub	sp, #72	@ 0x48
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800313c:	e333      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003146:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003148:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003154:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 8108 	bne.w	800336e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800315e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d14c      	bne.n	8003202 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003188:	b29b      	uxth	r3, r3
 800318a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3310      	adds	r3, #16
 8003190:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	441a      	add	r2, r3
 80031c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031c8:	2100      	movs	r1, #0
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f005 fdf9 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 82e5 	beq.w	80037a6 <PCD_EP_ISR_Handler+0x672>
 80031dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 82e0 	bne.w	80037a6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7b1b      	ldrb	r3, [r3, #12]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	731a      	strb	r2, [r3, #12]
 8003200:	e2d1      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003212:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003218:	2b00      	cmp	r3, #0
 800321a:	d032      	beq.n	8003282 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	4413      	add	r3, r2
 8003236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003242:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800324e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003250:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003254:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003256:	b29b      	uxth	r3, r3
 8003258:	f003 fe58 	bl	8006f0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29a      	uxth	r2, r3
 8003264:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003268:	4013      	ands	r3, r2
 800326a:	817b      	strh	r3, [r7, #10]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	897a      	ldrh	r2, [r7, #10]
 8003272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003276:	b292      	uxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f005 fd74 	bl	8008d68 <HAL_PCD_SetupStageCallback>
 8003280:	e291      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003282:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003286:	2b00      	cmp	r3, #0
 8003288:	f280 828d 	bge.w	80037a6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29a      	uxth	r2, r3
 8003294:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003298:	4013      	ands	r3, r2
 800329a:	81fb      	strh	r3, [r7, #14]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	89fa      	ldrh	r2, [r7, #14]
 80032a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a6:	b292      	uxth	r2, r2
 80032a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d019      	beq.n	800330e <PCD_EP_ISR_Handler+0x1da>
 80032da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d015      	beq.n	800330e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e8:	6959      	ldr	r1, [r3, #20]
 80032ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f003 fe0a 	bl	8006f0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	441a      	add	r2, r3
 8003302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003304:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003306:	2100      	movs	r1, #0
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f005 fd3f 	bl	8008d8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8242 	bne.w	80037a6 <PCD_EP_ISR_Handler+0x672>
 8003322:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003324:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800332c:	f000 823b 	beq.w	80037a6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800333c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003340:	81bb      	strh	r3, [r7, #12]
 8003342:	89bb      	ldrh	r3, [r7, #12]
 8003344:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003348:	81bb      	strh	r3, [r7, #12]
 800334a:	89bb      	ldrh	r3, [r7, #12]
 800334c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003350:	81bb      	strh	r3, [r7, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	89bb      	ldrh	r3, [r7, #12]
 8003358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800335c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003368:	b29b      	uxth	r3, r3
 800336a:	8013      	strh	r3, [r2, #0]
 800336c:	e21b      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003380:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003384:	2b00      	cmp	r3, #0
 8003386:	f280 80f1 	bge.w	800356c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033a0:	4013      	ands	r3, r2
 80033a2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033b8:	b292      	uxth	r2, r2
 80033ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033bc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d4:	7b1b      	ldrb	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d123      	bne.n	8003422 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 808b 	beq.w	8003522 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003412:	6959      	ldr	r1, [r3, #20]
 8003414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003416:	88da      	ldrh	r2, [r3, #6]
 8003418:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800341c:	f003 fd76 	bl	8006f0c <USB_ReadPMA>
 8003420:	e07f      	b.n	8003522 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d109      	bne.n	800343e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800342a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800342c:	461a      	mov	r2, r3
 800342e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9c6 	bl	80037c2 <HAL_PCD_EP_DB_Receive>
 8003436:	4603      	mov	r3, r0
 8003438:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800343c:	e071      	b.n	8003522 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003458:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003476:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d022      	beq.n	80034de <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80034c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02c      	beq.n	8003522 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	6959      	ldr	r1, [r3, #20]
 80034d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d2:	891a      	ldrh	r2, [r3, #8]
 80034d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034d8:	f003 fd18 	bl	8006f0c <USB_ReadPMA>
 80034dc:	e021      	b.n	8003522 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003506:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003514:	6959      	ldr	r1, [r3, #20]
 8003516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003518:	895a      	ldrh	r2, [r3, #10]
 800351a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800351e:	f003 fcf5 	bl	8006f0c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800352a:	441a      	add	r2, r3
 800352c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003538:	441a      	add	r2, r3
 800353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800353e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <PCD_EP_ISR_Handler+0x41e>
 8003546:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800354a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d206      	bcs.n	8003560 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 fc17 	bl	8008d8c <HAL_PCD_DataOutStageCallback>
 800355e:	e005      	b.n	800356c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fda9 	bl	80060be <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800356c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8117 	beq.w	80037a6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003578:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	3310      	adds	r3, #16
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80035b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c6:	78db      	ldrb	r3, [r3, #3]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 80a1 	bne.w	8003710 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80035ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	7b1b      	ldrb	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8092 	beq.w	8003702 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d046      	beq.n	8003676 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d126      	bne.n	800363e <PCD_EP_ISR_Handler+0x50a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4413      	add	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00da      	lsls	r2, r3, #3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	4413      	add	r3, r2
 8003612:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	b29a      	uxth	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	e061      	b.n	8003702 <PCD_EP_ISR_Handler+0x5ce>
 800363e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d15d      	bne.n	8003702 <PCD_EP_ISR_Handler+0x5ce>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	00da      	lsls	r2, r3, #3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e045      	b.n	8003702 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d126      	bne.n	80036d2 <PCD_EP_ISR_Handler+0x59e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	4413      	add	r3, r2
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
 800369c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	00da      	lsls	r2, r3, #3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	4413      	add	r3, r2
 80036a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e017      	b.n	8003702 <PCD_EP_ISR_Handler+0x5ce>
 80036d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d113      	bne.n	8003702 <PCD_EP_ISR_Handler+0x5ce>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	4413      	add	r3, r2
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00da      	lsls	r2, r3, #3
 80036f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	2200      	movs	r2, #0
 8003700:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 fb5a 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
 800370e:	e04a      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d13f      	bne.n	800379a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003746:	429a      	cmp	r2, r3
 8003748:	d906      	bls.n	8003758 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800374a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e002      	b.n	800375e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800375e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f005 fb28 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
 8003772:	e018      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800377a:	441a      	add	r2, r3
 800377c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800377e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003786:	441a      	add	r2, r3
 8003788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800378a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fc93 	bl	80060be <USB_EPStartXfer>
 8003798:	e005      	b.n	80037a6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800379a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800379c:	461a      	mov	r2, r3
 800379e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f917 	bl	80039d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f6ff acc3 	blt.w	800313e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3748      	adds	r7, #72	@ 0x48
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b088      	sub	sp, #32
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d07c      	beq.n	80038d4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	429a      	cmp	r2, r3
 8003808:	d306      	bcc.n	8003818 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	8b7b      	ldrh	r3, [r7, #26]
 8003810:	1ad2      	subs	r2, r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	619a      	str	r2, [r3, #24]
 8003816:	e002      	b.n	800381e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d123      	bne.n	800386e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800383c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003840:	833b      	strh	r3, [r7, #24]
 8003842:	8b3b      	ldrh	r3, [r7, #24]
 8003844:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003848:	833b      	strh	r3, [r7, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	8b3b      	ldrh	r3, [r7, #24]
 800385a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800385e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386a:	b29b      	uxth	r3, r3
 800386c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01f      	beq.n	80038b8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800388e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003892:	82fb      	strh	r3, [r7, #22]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038b8:	8b7b      	ldrh	r3, [r7, #26]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8085 	beq.w	80039ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6959      	ldr	r1, [r3, #20]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	891a      	ldrh	r2, [r3, #8]
 80038cc:	8b7b      	ldrh	r3, [r7, #26]
 80038ce:	f003 fb1d 	bl	8006f0c <USB_ReadPMA>
 80038d2:	e07a      	b.n	80039ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038dc:	b29b      	uxth	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	8b7b      	ldrh	r3, [r7, #26]
 8003900:	429a      	cmp	r2, r3
 8003902:	d306      	bcc.n	8003912 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	619a      	str	r2, [r3, #24]
 8003910:	e002      	b.n	8003918 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d123      	bne.n	8003968 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393a:	83fb      	strh	r3, [r7, #30]
 800393c:	8bfb      	ldrh	r3, [r7, #30]
 800393e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003942:	83fb      	strh	r3, [r7, #30]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	8bfb      	ldrh	r3, [r7, #30]
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11f      	bne.n	80039b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398c:	83bb      	strh	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	441a      	add	r2, r3
 800399c:	8bbb      	ldrh	r3, [r7, #28]
 800399e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039b2:	8b7b      	ldrh	r3, [r7, #26]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6959      	ldr	r1, [r3, #20]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	895a      	ldrh	r2, [r3, #10]
 80039c4:	8b7b      	ldrh	r3, [r7, #26]
 80039c6:	f003 faa1 	bl	8006f0c <USB_ReadPMA>
    }
  }

  return count;
 80039ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b0a6      	sub	sp, #152	@ 0x98
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 81f7 	beq.w	8003ddc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a12:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d907      	bls.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	619a      	str	r2, [r3, #24]
 8003a30:	e002      	b.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 80e1 	bne.w	8003c04 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d126      	bne.n	8003a98 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	4413      	add	r3, r2
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	00da      	lsls	r2, r3, #3
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e01a      	b.n	8003ace <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d116      	bne.n	8003ace <HAL_PCD_EP_DB_Transmit+0xfa>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	4413      	add	r3, r2
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	00da      	lsls	r2, r3, #3
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	2200      	movs	r2, #0
 8003acc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d126      	bne.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x156>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	4413      	add	r3, r2
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	00da      	lsls	r2, r3, #3
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	4413      	add	r3, r2
 8003afe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	e017      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x186>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d113      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x186>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b40:	4413      	add	r3, r2
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	00da      	lsls	r2, r3, #3
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	2200      	movs	r2, #0
 8003b58:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	78db      	ldrb	r3, [r3, #3]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d123      	bne.n	8003baa <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7c:	837b      	strh	r3, [r7, #26]
 8003b7e:	8b7b      	ldrh	r3, [r7, #26]
 8003b80:	f083 0320 	eor.w	r3, r3, #32
 8003b84:	837b      	strh	r3, [r7, #26]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	8b7b      	ldrh	r3, [r7, #26]
 8003b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f005 f906 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	833b      	strh	r3, [r7, #24]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	8b3b      	ldrh	r3, [r7, #24]
 8003bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e31f      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d021      	beq.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 82ca 	bne.w	80041f2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c66:	441a      	add	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c74:	441a      	add	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d309      	bcc.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	621a      	str	r2, [r3, #32]
 8003c98:	e015      	b.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003ca2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cb0:	e009      	b.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d15f      	bne.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce2:	4413      	add	r3, r2
 8003ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	00da      	lsls	r2, r3, #3
 8003cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cee:	4413      	add	r3, r2
 8003cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	e051      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d26:	d816      	bhi.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	e037      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x398>
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	e01b      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d117      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003daa:	4413      	add	r3, r2
 8003dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00da      	lsls	r2, r3, #3
 8003db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db6:	4413      	add	r3, r2
 8003db8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6959      	ldr	r1, [r3, #20]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	891a      	ldrh	r2, [r3, #8]
 8003dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 f856 	bl	8006e86 <USB_WritePMA>
 8003dda:	e20a      	b.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d307      	bcc.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	619a      	str	r2, [r3, #24]
 8003e1e:	e002      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80f6 	bne.w	800401c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d126      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4c:	4413      	add	r3, r2
 8003e4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00da      	lsls	r2, r3, #3
 8003e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e01a      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d116      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ea2:	4413      	add	r3, r2
 8003ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eb8:	2200      	movs	r2, #0
 8003eba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d12f      	bne.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x558>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	00da      	lsls	r2, r3, #3
 8003ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	e01c      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x592>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d118      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x592>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f44:	4413      	add	r3, r2
 8003f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	00da      	lsls	r2, r3, #3
 8003f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	78db      	ldrb	r3, [r3, #3]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d127      	bne.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f90:	f083 0320 	eor.w	r3, r3, #32
 8003f94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	441a      	add	r2, r3
 8003fa6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f004 fefc 	bl	8008dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d121      	bne.n	8004018 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800400c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004014:	b29b      	uxth	r3, r3
 8004016:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e113      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d121      	bne.n	800406a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004040:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800405e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004066:	b29b      	uxth	r3, r3
 8004068:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 80be 	bne.w	80041f2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800407e:	441a      	add	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800408c:	441a      	add	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d309      	bcc.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	621a      	str	r2, [r3, #32]
 80040b0:	e015      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80040ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040c8:	e009      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2200      	movs	r2, #0
 80040d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d15f      	bne.n	80041ac <HAL_PCD_EP_DB_Transmit+0x7d8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004100:	4413      	add	r3, r2
 8004102:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	00da      	lsls	r2, r3, #3
 800410a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410c:	4413      	add	r3, r2
 800410e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004112:	667b      	str	r3, [r7, #100]	@ 0x64
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411e:	b29a      	uxth	r2, r3
 8004120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_PCD_EP_DB_Transmit+0x76c>
 800412a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004138:	b29a      	uxth	r2, r3
 800413a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	e04e      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x80a>
 8004140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004142:	2b3e      	cmp	r3, #62	@ 0x3e
 8004144:	d816      	bhi.n	8004174 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	663b      	str	r3, [r7, #96]	@ 0x60
 800414c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_PCD_EP_DB_Transmit+0x788>
 8004156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004158:	3301      	adds	r3, #1
 800415a:	663b      	str	r3, [r7, #96]	@ 0x60
 800415c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29a      	uxth	r2, r3
 8004162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004164:	b29b      	uxth	r3, r3
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	b29b      	uxth	r3, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	b29a      	uxth	r2, r3
 800416e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	e034      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x80a>
 8004174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	663b      	str	r3, [r7, #96]	@ 0x60
 800417a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004186:	3b01      	subs	r3, #1
 8004188:	663b      	str	r3, [r7, #96]	@ 0x60
 800418a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29a      	uxth	r2, r3
 8004190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004192:	b29b      	uxth	r3, r3
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	b29b      	uxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	e018      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x80a>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d114      	bne.n	80041de <HAL_PCD_EP_DB_Transmit+0x80a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c2:	4413      	add	r3, r2
 80041c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	00da      	lsls	r2, r3, #3
 80041cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ce:	4413      	add	r3, r2
 80041d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6959      	ldr	r1, [r3, #20]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	895a      	ldrh	r2, [r3, #10]
 80041ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f002 fe4a 	bl	8006e86 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420c:	82fb      	strh	r3, [r7, #22]
 800420e:	8afb      	ldrh	r3, [r7, #22]
 8004210:	f083 0310 	eor.w	r3, r3, #16
 8004214:	82fb      	strh	r3, [r7, #22]
 8004216:	8afb      	ldrh	r3, [r7, #22]
 8004218:	f083 0320 	eor.w	r3, r3, #32
 800421c:	82fb      	strh	r3, [r7, #22]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	8afb      	ldrh	r3, [r7, #22]
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3798      	adds	r7, #152	@ 0x98
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	817b      	strh	r3, [r7, #10]
 800425a:	4613      	mov	r3, r2
 800425c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	f003 0207 	and.w	r2, r3, #7
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3310      	adds	r3, #16
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e009      	b.n	8004296 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004282:	897a      	ldrh	r2, [r7, #10]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004296:	893b      	ldrh	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	80da      	strh	r2, [r3, #6]
 80042aa:	e00b      	b.n	80042c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2201      	movs	r2, #1
 80042b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b29a      	uxth	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800430a:	b29b      	uxth	r3, r3
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d141      	bne.n	80043ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004336:	4b4b      	ldr	r3, [pc, #300]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004342:	d131      	bne.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004344:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434a:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004354:	4b43      	ldr	r3, [pc, #268]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800435c:	4a41      	ldr	r2, [pc, #260]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004364:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2232      	movs	r2, #50	@ 0x32
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a3f      	ldr	r2, [pc, #252]	@ (800446c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437a:	e002      	b.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004382:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438e:	d102      	bne.n	8004396 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f2      	bne.n	800437c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004396:	4b33      	ldr	r3, [pc, #204]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a2:	d158      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e057      	b.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043b8:	e04d      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d141      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043c2:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d131      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d0:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d6:	4a23      	ldr	r2, [pc, #140]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e0:	4b20      	ldr	r3, [pc, #128]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2232      	movs	r2, #50	@ 0x32
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	0c9b      	lsrs	r3, r3, #18
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	e002      	b.n	800440e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b01      	subs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d102      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442e:	d112      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e011      	b.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443a:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004444:	e007      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004446:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800444e:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004454:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40007000 	.word	0x40007000
 8004468:	20000000 	.word	0x20000000
 800446c:	431bde83 	.word	0x431bde83

08004470 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800447a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800447e:	6093      	str	r3, [r2, #8]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40007000 	.word	0x40007000

08004490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e2fe      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d075      	beq.n	800459a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ae:	4b97      	ldr	r3, [pc, #604]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b8:	4b94      	ldr	r3, [pc, #592]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0x3e>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_OscConfig+0x44>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b8d      	ldr	r3, [pc, #564]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05b      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d157      	bne.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e2d9      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x74>
 80044f6:	4b85      	ldr	r3, [pc, #532]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a84      	ldr	r2, [pc, #528]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x98>
 800450e:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7e      	ldr	r2, [pc, #504]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b7c      	ldr	r3, [pc, #496]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7b      	ldr	r2, [pc, #492]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004528:	4b78      	ldr	r3, [pc, #480]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a77      	ldr	r2, [pc, #476]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b75      	ldr	r3, [pc, #468]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a74      	ldr	r2, [pc, #464]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fc fa0c 	bl	8000964 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fc fa08 	bl	8000964 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e29e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004562:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xc0>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fc f9f8 	bl	8000964 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fc f9f4 	bl	8000964 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e28a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458a:	4b60      	ldr	r3, [pc, #384]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d075      	beq.n	8004692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a6:	4b59      	ldr	r3, [pc, #356]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b0:	4b56      	ldr	r3, [pc, #344]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_OscConfig+0x136>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d002      	beq.n	80045cc <HAL_RCC_OscConfig+0x13c>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11f      	bne.n	800460c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x154>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e25d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b49      	ldr	r3, [pc, #292]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4946      	ldr	r1, [pc, #280]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045f8:	4b45      	ldr	r3, [pc, #276]	@ (8004710 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fc f965 	bl	80008cc <HAL_InitTick>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d043      	beq.n	8004690 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e249      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b3d      	ldr	r3, [pc, #244]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3c      	ldr	r2, [pc, #240]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fc f9a0 	bl	8000964 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fc f99c 	bl	8000964 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e232      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	492d      	ldr	r1, [pc, #180]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
 800465a:	e01a      	b.n	8004692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465c:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2a      	ldr	r2, [pc, #168]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004662:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc f97c 	bl	8000964 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fc f978 	bl	8000964 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e20e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004682:	4b22      	ldr	r3, [pc, #136]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1e0>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d041      	beq.n	8004722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ac:	4a17      	ldr	r2, [pc, #92]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fc f955 	bl	8000964 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fc f951 	bl	8000964 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1e7      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ef      	beq.n	80046be <HAL_RCC_OscConfig+0x22e>
 80046de:	e020      	b.n	8004722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fc f938 	bl	8000964 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f6:	e00d      	b.n	8004714 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fc f934 	bl	8000964 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d906      	bls.n	8004714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1ca      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004714:	4b8c      	ldr	r3, [pc, #560]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ea      	bne.n	80046f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a6 	beq.w	800487c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004730:	2300      	movs	r3, #0
 8004732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004734:	4b84      	ldr	r3, [pc, #528]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x2b4>
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x2b6>
 8004744:	2300      	movs	r3, #0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	4a7e      	ldr	r2, [pc, #504]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	@ 0x58
 8004756:	4b7c      	ldr	r3, [pc, #496]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004762:	2301      	movs	r3, #1
 8004764:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004766:	4b79      	ldr	r3, [pc, #484]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d118      	bne.n	80047a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004772:	4b76      	ldr	r3, [pc, #472]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a75      	ldr	r2, [pc, #468]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477e:	f7fc f8f1 	bl	8000964 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fc f8ed 	bl	8000964 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e183      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004798:	4b6c      	ldr	r3, [pc, #432]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d108      	bne.n	80047be <HAL_RCC_OscConfig+0x32e>
 80047ac:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	4a65      	ldr	r2, [pc, #404]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047bc:	e024      	b.n	8004808 <HAL_RCC_OscConfig+0x378>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d110      	bne.n	80047e8 <HAL_RCC_OscConfig+0x358>
 80047c6:	4b60      	ldr	r3, [pc, #384]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e6:	e00f      	b.n	8004808 <HAL_RCC_OscConfig+0x378>
 80047e8:	4b57      	ldr	r3, [pc, #348]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	4a56      	ldr	r2, [pc, #344]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d016      	beq.n	800483e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc f8a8 	bl	8000964 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fc f8a4 	bl	8000964 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e138      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482e:	4b46      	ldr	r3, [pc, #280]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ed      	beq.n	8004818 <HAL_RCC_OscConfig+0x388>
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fc f891 	bl	8000964 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc f88d 	bl	8000964 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e121      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800485c:	4b3a      	ldr	r3, [pc, #232]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ed      	bne.n	8004846 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800486a:	7ffb      	ldrb	r3, [r7, #31]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004870:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	4a34      	ldr	r2, [pc, #208]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03c      	beq.n	8004902 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01c      	beq.n	80048ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004890:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004896:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fc f860 	bl	8000964 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a8:	f7fc f85c 	bl	8000964 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0f2      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ef      	beq.n	80048a8 <HAL_RCC_OscConfig+0x418>
 80048c8:	e01b      	b.n	8004902 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fc f843 	bl	8000964 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e2:	f7fc f83f 	bl	8000964 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0d5      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048f4:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ef      	bne.n	80048e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80c9 	beq.w	8004a9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b0c      	cmp	r3, #12
 8004916:	f000 8083 	beq.w	8004a20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d15e      	bne.n	80049e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fc f819 	bl	8000964 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e00c      	b.n	8004950 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fc f815 	bl	8000964 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d905      	bls.n	8004950 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0ab      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
 8004948:	40021000 	.word	0x40021000
 800494c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	4b55      	ldr	r3, [pc, #340]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ec      	bne.n	8004936 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495c:	4b52      	ldr	r3, [pc, #328]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	4b52      	ldr	r3, [pc, #328]	@ (8004aac <HAL_RCC_OscConfig+0x61c>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a11      	ldr	r1, [r2, #32]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800496c:	3a01      	subs	r2, #1
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	4311      	orrs	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004976:	0212      	lsls	r2, r2, #8
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800497e:	0852      	lsrs	r2, r2, #1
 8004980:	3a01      	subs	r2, #1
 8004982:	0552      	lsls	r2, r2, #21
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0652      	lsls	r2, r2, #25
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004996:	06d2      	lsls	r2, r2, #27
 8004998:	430a      	orrs	r2, r1
 800499a:	4943      	ldr	r1, [pc, #268]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a0:	4b41      	ldr	r3, [pc, #260]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a40      	ldr	r2, [pc, #256]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ac:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a3d      	ldr	r2, [pc, #244]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fb ffd4 	bl	8000964 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fb ffd0 	bl	8000964 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e066      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x530>
 80049de:	e05e      	b.n	8004a9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e0:	4b31      	ldr	r3, [pc, #196]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fb ffba 	bl	8000964 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fb ffb6 	bl	8000964 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e04c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a06:	4b28      	ldr	r3, [pc, #160]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a12:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	4924      	ldr	r1, [pc, #144]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCC_OscConfig+0x620>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
 8004a1e:	e03e      	b.n	8004a9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e039      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d12c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d123      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d11b      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d113      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	019f800c 	.word	0x019f800c
 8004ab0:	feeefffc 	.word	0xfeeefffc

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e11e      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b91      	ldr	r3, [pc, #580]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b8e      	ldr	r3, [pc, #568]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	498c      	ldr	r1, [pc, #560]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b8a      	ldr	r3, [pc, #552]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e106      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d073      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d129      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b10:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0f4      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b20:	f000 f972 	bl	8004e08 <RCC_GetSysClockFreqFromPLLSource>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4a7c      	ldr	r2, [pc, #496]	@ (8004d1c <HAL_RCC_ClockConfig+0x268>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d93f      	bls.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d033      	beq.n	8004bae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12f      	bne.n	8004bae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b4e:	4b72      	ldr	r3, [pc, #456]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b56:	4a70      	ldr	r2, [pc, #448]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b5e:	2380      	movs	r3, #128	@ 0x80
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e024      	b.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0c6      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	4b66      	ldr	r3, [pc, #408]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0be      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b8c:	f000 f8ce 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4a61      	ldr	r2, [pc, #388]	@ (8004d1c <HAL_RCC_ClockConfig+0x268>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d909      	bls.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b5a      	ldr	r3, [pc, #360]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4957      	ldr	r1, [pc, #348]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fb fed0 	bl	8000964 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fb fecc 	bl	8000964 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e095      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b4e      	ldr	r3, [pc, #312]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d023      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b43      	ldr	r3, [pc, #268]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a42      	ldr	r2, [pc, #264]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c20:	4b3d      	ldr	r3, [pc, #244]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c28:	4a3b      	ldr	r2, [pc, #236]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b39      	ldr	r3, [pc, #228]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4936      	ldr	r1, [pc, #216]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	d105      	bne.n	8004c56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c4a:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a32      	ldr	r2, [pc, #200]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d21d      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c64:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 020f 	bic.w	r2, r3, #15
 8004c6c:	4929      	ldr	r1, [pc, #164]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c74:	f7fb fe76 	bl	8000964 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fb fe72 	bl	8000964 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e03b      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1ed      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4917      	ldr	r1, [pc, #92]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cca:	4b13      	ldr	r3, [pc, #76]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	490f      	ldr	r1, [pc, #60]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cde:	f000 f825 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	490c      	ldr	r1, [pc, #48]	@ (8004d20 <HAL_RCC_ClockConfig+0x26c>)
 8004cf0:	5ccb      	ldrb	r3, [r1, r3]
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004d24 <HAL_RCC_ClockConfig+0x270>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <HAL_RCC_ClockConfig+0x274>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb fde2 	bl	80008cc <HAL_InitTick>
 8004d08:	4603      	mov	r3, r0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	04c4b400 	.word	0x04c4b400
 8004d20:	0800940c 	.word	0x0800940c
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000004 	.word	0x20000004

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d32:	4b2c      	ldr	r3, [pc, #176]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e047      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d44:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d102      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d50:	4b26      	ldr	r3, [pc, #152]	@ (8004dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e03e      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d56:	4b23      	ldr	r3, [pc, #140]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d136      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3301      	adds	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d80:	4a1a      	ldr	r2, [pc, #104]	@ (8004dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a16      	ldr	r2, [pc, #88]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d8a:	68d2      	ldr	r2, [r2, #12]
 8004d8c:	0a12      	lsrs	r2, r2, #8
 8004d8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	617b      	str	r3, [r7, #20]
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9a:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	4a10      	ldr	r2, [pc, #64]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	0a12      	lsrs	r2, r2, #8
 8004da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
      break;
 8004db2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e001      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dd4:	693b      	ldr	r3, [r7, #16]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	007a1200 	.word	0x007a1200

08004df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000000 	.word	0x20000000

08004e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d10c      	bne.n	8004e46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2c:	4a17      	ldr	r2, [pc, #92]	@ (8004e8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e36:	68d2      	ldr	r2, [r2, #12]
 8004e38:	0a12      	lsrs	r2, r2, #8
 8004e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]
    break;
 8004e44:	e00c      	b.n	8004e60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	0a12      	lsrs	r2, r2, #8
 8004e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
    break;
 8004e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	0e5b      	lsrs	r3, r3, #25
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e7a:	687b      	ldr	r3, [r7, #4]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	007a1200 	.word	0x007a1200
 8004e90:	00f42400 	.word	0x00f42400

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8098 	beq.w	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb6:	4b43      	ldr	r3, [pc, #268]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10d      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b40      	ldr	r3, [pc, #256]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ece:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ede:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a39      	ldr	r2, [pc, #228]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eea:	f7fb fd3b 	bl	8000964 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef0:	e009      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef2:	f7fb fd37 	bl	8000964 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d902      	bls.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	74fb      	strb	r3, [r7, #19]
        break;
 8004f04:	e005      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	4b30      	ldr	r3, [pc, #192]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ef      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d159      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f18:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d019      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f34:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f40:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f46:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f50:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f56:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f60:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fb fcf7 	bl	8000964 <HAL_GetTick>
 8004f76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f78:	e00b      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fb fcf3 	bl	8000964 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f90:	e006      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f92:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ec      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	4903      	ldr	r1, [pc, #12]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	74bb      	strb	r3, [r7, #18]
 8004fc2:	e005      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fd0:	7c7b      	ldrb	r3, [r7, #17]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd6:	4ba6      	ldr	r3, [pc, #664]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fda:	4aa5      	ldr	r2, [pc, #660]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fee:	4ba0      	ldr	r3, [pc, #640]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f023 0203 	bic.w	r2, r3, #3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	499c      	ldr	r1, [pc, #624]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005010:	4b97      	ldr	r3, [pc, #604]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f023 020c 	bic.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4994      	ldr	r1, [pc, #592]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005032:	4b8f      	ldr	r3, [pc, #572]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	498b      	ldr	r1, [pc, #556]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005054:	4b86      	ldr	r3, [pc, #536]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4983      	ldr	r1, [pc, #524]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005076:	4b7e      	ldr	r3, [pc, #504]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	497a      	ldr	r1, [pc, #488]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005098:	4b75      	ldr	r3, [pc, #468]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	4972      	ldr	r1, [pc, #456]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4969      	ldr	r1, [pc, #420]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050dc:	4b64      	ldr	r3, [pc, #400]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4961      	ldr	r1, [pc, #388]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	4958      	ldr	r1, [pc, #352]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005120:	4b53      	ldr	r3, [pc, #332]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	4950      	ldr	r1, [pc, #320]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800513e:	d105      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005140:	4b4b      	ldr	r3, [pc, #300]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a4a      	ldr	r2, [pc, #296]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005154:	2b00      	cmp	r3, #0
 8005156:	d015      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005158:	4b45      	ldr	r3, [pc, #276]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4942      	ldr	r1, [pc, #264]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005176:	d105      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005178:	4b3d      	ldr	r3, [pc, #244]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a3c      	ldr	r2, [pc, #240]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005182:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005190:	4b37      	ldr	r3, [pc, #220]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	4934      	ldr	r1, [pc, #208]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051ae:	d105      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051c8:	4b29      	ldr	r3, [pc, #164]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d6:	4926      	ldr	r1, [pc, #152]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e8:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005200:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	4918      	ldr	r1, [pc, #96]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800521e:	d105      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005220:	4b13      	ldr	r3, [pc, #76]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a12      	ldr	r2, [pc, #72]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005238:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005246:	490a      	ldr	r1, [pc, #40]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a04      	ldr	r2, [pc, #16]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005262:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005264:	7cbb      	ldrb	r3, [r7, #18]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000

08005274 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005284:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005288:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	b29a      	uxth	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052aa:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80052ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4013      	ands	r3, r2
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005314:	b480      	push	{r7}
 8005316:	b0a7      	sub	sp, #156	@ 0x9c
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	78db      	ldrb	r3, [r3, #3]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d81f      	bhi.n	8005386 <USB_ActivateEndpoint+0x72>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <USB_ActivateEndpoint+0x38>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	0800535d 	.word	0x0800535d
 8005350:	08005379 	.word	0x08005379
 8005354:	0800538f 	.word	0x0800538f
 8005358:	0800536b 	.word	0x0800536b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800535c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005364:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005368:	e012      	b.n	8005390 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800536a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800536e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005372:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005376:	e00b      	b.n	8005390 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005378:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800537c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005380:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005384:	e004      	b.n	8005390 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800538c:	e000      	b.n	8005390 <USB_ActivateEndpoint+0x7c>
      break;
 800538e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	b21a      	sxth	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	7b1b      	ldrb	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 8180 	bne.w	8005706 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8084 	beq.w	8005518 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	4413      	add	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	00da      	lsls	r2, r3, #3
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	88db      	ldrh	r3, [r3, #6]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	827b      	strh	r3, [r7, #18]
 8005452:	8a7b      	ldrh	r3, [r7, #18]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <USB_ActivateEndpoint+0x180>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	823b      	strh	r3, [r7, #16]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	8a3b      	ldrh	r3, [r7, #16]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	78db      	ldrb	r3, [r3, #3]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d020      	beq.n	80054de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b2:	81bb      	strh	r3, [r7, #12]
 80054b4:	89bb      	ldrh	r3, [r7, #12]
 80054b6:	f083 0320 	eor.w	r3, r3, #32
 80054ba:	81bb      	strh	r3, [r7, #12]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	89bb      	ldrh	r3, [r7, #12]
 80054c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
 80054dc:	e3f9      	b.n	8005cd2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f4:	81fb      	strh	r3, [r7, #14]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	441a      	add	r2, r3
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800550e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005512:	b29b      	uxth	r3, r3
 8005514:	8013      	strh	r3, [r2, #0]
 8005516:	e3dc      	b.n	8005cd2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	633b      	str	r3, [r7, #48]	@ 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	4413      	add	r3, r2
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	00da      	lsls	r2, r3, #3
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	4413      	add	r3, r2
 8005536:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	88db      	ldrh	r3, [r3, #6]
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	4413      	add	r3, r2
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	00da      	lsls	r2, r3, #3
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	4413      	add	r3, r2
 800556a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	b29a      	uxth	r2, r3
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <USB_ActivateEndpoint+0x28a>
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e041      	b.n	8005622 <USB_ActivateEndpoint+0x30e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80055a4:	d81c      	bhi.n	80055e0 <USB_ActivateEndpoint+0x2cc>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <USB_ActivateEndpoint+0x2b2>
 80055bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055c0:	3301      	adds	r3, #1
 80055c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e020      	b.n	8005622 <USB_ActivateEndpoint+0x30e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <USB_ActivateEndpoint+0x2ec>
 80055f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055fa:	3b01      	subs	r3, #1
 80055fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29a      	uxth	r2, r3
 8005606:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800560a:	b29b      	uxth	r3, r3
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	4313      	orrs	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561c:	b29a      	uxth	r2, r3
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005630:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01b      	beq.n	8005672 <USB_ActivateEndpoint+0x35e>
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005650:	843b      	strh	r3, [r7, #32]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8c3b      	ldrh	r3, [r7, #32]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800566a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d124      	bne.n	80056c4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800568c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005690:	83bb      	strh	r3, [r7, #28]
 8005692:	8bbb      	ldrh	r3, [r7, #28]
 8005694:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005698:	83bb      	strh	r3, [r7, #28]
 800569a:	8bbb      	ldrh	r3, [r7, #28]
 800569c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056a0:	83bb      	strh	r3, [r7, #28]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	8bbb      	ldrh	r3, [r7, #28]
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]
 80056c2:	e306      	b.n	8005cd2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	83fb      	strh	r3, [r7, #30]
 80056dc:	8bfb      	ldrh	r3, [r7, #30]
 80056de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056e2:	83fb      	strh	r3, [r7, #30]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	8bfb      	ldrh	r3, [r7, #30]
 80056f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005700:	b29b      	uxth	r3, r3
 8005702:	8013      	strh	r3, [r2, #0]
 8005704:	e2e5      	b.n	8005cd2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	78db      	ldrb	r3, [r3, #3]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d11e      	bne.n	800574c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005724:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005762:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005798:	4413      	add	r3, r2
 800579a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	00da      	lsls	r2, r3, #3
 80057a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	891b      	ldrh	r3, [r3, #8]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	677b      	str	r3, [r7, #116]	@ 0x74
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057cc:	4413      	add	r3, r2
 80057ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00da      	lsls	r2, r3, #3
 80057d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057de:	673b      	str	r3, [r7, #112]	@ 0x70
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	895b      	ldrh	r3, [r3, #10]
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 81af 	bne.w	8005b58 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800580a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800580e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01d      	beq.n	8005852 <USB_ActivateEndpoint+0x53e>
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800584a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005862:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01d      	beq.n	80058aa <USB_ActivateEndpoint+0x596>
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005884:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d16b      	bne.n	800598a <USB_ActivateEndpoint+0x676>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058bc:	b29b      	uxth	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	4413      	add	r3, r2
 80058c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	00da      	lsls	r2, r3, #3
 80058cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ce:	4413      	add	r3, r2
 80058d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <USB_ActivateEndpoint+0x5f0>
 80058ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e05d      	b.n	80059c0 <USB_ActivateEndpoint+0x6ac>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b3e      	cmp	r3, #62	@ 0x3e
 800590a:	d81c      	bhi.n	8005946 <USB_ActivateEndpoint+0x632>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_ActivateEndpoint+0x618>
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800592c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005936:	b29b      	uxth	r3, r3
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	b29b      	uxth	r3, r3
 800593c:	4313      	orrs	r3, r2
 800593e:	b29a      	uxth	r2, r3
 8005940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e03c      	b.n	80059c0 <USB_ActivateEndpoint+0x6ac>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <USB_ActivateEndpoint+0x652>
 800595c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005960:	3b01      	subs	r3, #1
 8005962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29b      	uxth	r3, r3
 8005976:	4313      	orrs	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	e01a      	b.n	80059c0 <USB_ActivateEndpoint+0x6ac>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d116      	bne.n	80059c0 <USB_ActivateEndpoint+0x6ac>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	657b      	str	r3, [r7, #84]	@ 0x54
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a2:	4413      	add	r3, r2
 80059a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	00da      	lsls	r2, r3, #3
 80059ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d16b      	bne.n	8005aa4 <USB_ActivateEndpoint+0x790>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059dc:	4413      	add	r3, r2
 80059de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	00da      	lsls	r2, r3, #3
 80059e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e8:	4413      	add	r3, r2
 80059ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <USB_ActivateEndpoint+0x70a>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e05b      	b.n	8005ad6 <USB_ActivateEndpoint+0x7c2>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a24:	d81c      	bhi.n	8005a60 <USB_ActivateEndpoint+0x74c>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <USB_ActivateEndpoint+0x732>
 8005a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a40:	3301      	adds	r3, #1
 8005a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e03a      	b.n	8005ad6 <USB_ActivateEndpoint+0x7c2>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <USB_ActivateEndpoint+0x76c>
 8005a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4313      	orrs	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e018      	b.n	8005ad6 <USB_ActivateEndpoint+0x7c2>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d114      	bne.n	8005ad6 <USB_ActivateEndpoint+0x7c2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab8:	4413      	add	r3, r2
 8005aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	00da      	lsls	r2, r3, #3
 8005ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005aee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005af4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005af6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005afc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	441a      	add	r2, r3
 8005b08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b34:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]
 8005b56:	e0bc      	b.n	8005cd2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005b68:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01d      	beq.n	8005bb0 <USB_ActivateEndpoint+0x89c>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005bc0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01d      	beq.n	8005c08 <USB_ActivateEndpoint+0x8f4>
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	78db      	ldrb	r3, [r3, #3]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d024      	beq.n	8005c5a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c26:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c2e:	f083 0320 	eor.w	r3, r3, #32
 8005c32:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]
 8005c58:	e01d      	b.n	8005c96 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c70:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	379c      	adds	r7, #156	@ 0x9c
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop

08005ce4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08d      	sub	sp, #52	@ 0x34
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	7b1b      	ldrb	r3, [r3, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 808e 	bne.w	8005e14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d044      	beq.n	8005d8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	81bb      	strh	r3, [r7, #12]
 8005d0e:	89bb      	ldrh	r3, [r7, #12]
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01b      	beq.n	8005d50 <USB_DeactivateEndpoint+0x6c>
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	817b      	strh	r3, [r7, #10]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	441a      	add	r2, r3
 8005d3a:	897b      	ldrh	r3, [r7, #10]
 8005d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d66:	813b      	strh	r3, [r7, #8]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	893b      	ldrh	r3, [r7, #8]
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]
 8005d88:	e192      	b.n	80060b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	827b      	strh	r3, [r7, #18]
 8005d98:	8a7b      	ldrh	r3, [r7, #18]
 8005d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <USB_DeactivateEndpoint+0xf6>
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db8:	823b      	strh	r3, [r7, #16]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8a3b      	ldrh	r3, [r7, #16]
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df0:	81fb      	strh	r3, [r7, #14]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	89fb      	ldrh	r3, [r7, #14]
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	e14d      	b.n	80060b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f040 80a5 	bne.w	8005f68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	843b      	strh	r3, [r7, #32]
 8005e2c:	8c3b      	ldrh	r3, [r7, #32]
 8005e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USB_DeactivateEndpoint+0x18a>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4c:	83fb      	strh	r3, [r7, #30]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8bfb      	ldrh	r3, [r7, #30]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	83bb      	strh	r3, [r7, #28]
 8005e7c:	8bbb      	ldrh	r3, [r7, #28]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01b      	beq.n	8005ebe <USB_DeactivateEndpoint+0x1da>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	837b      	strh	r3, [r7, #26]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8b7b      	ldrh	r3, [r7, #26]
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed4:	833b      	strh	r3, [r7, #24]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	8b3b      	ldrh	r3, [r7, #24]
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0c:	82fb      	strh	r3, [r7, #22]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f44:	82bb      	strh	r3, [r7, #20]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8abb      	ldrh	r3, [r7, #20]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]
 8005f66:	e0a3      	b.n	80060b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <USB_DeactivateEndpoint+0x2d4>
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005fc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <USB_DeactivateEndpoint+0x324>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006000:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006056:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3734      	adds	r7, #52	@ 0x34
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b0ac      	sub	sp, #176	@ 0xb0
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 84ca 	bne.w	8006a66 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d904      	bls.n	80060e8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e6:	e003      	b.n	80060f0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	7b1b      	ldrb	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d122      	bne.n	800613e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6959      	ldr	r1, [r3, #20]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	88da      	ldrh	r2, [r3, #6]
 8006100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006104:	b29b      	uxth	r3, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 febd 	bl	8006e86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4413      	add	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	00da      	lsls	r2, r3, #3
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	f000 bc6f 	b.w	8006a1c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b02      	cmp	r3, #2
 8006144:	f040 831e 	bne.w	8006784 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	429a      	cmp	r2, r3
 8006152:	f240 82cf 	bls.w	80066f4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006186:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800618a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800619a:	1ad2      	subs	r2, r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 814f 	beq.w	8006456 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d16b      	bne.n	800629c <USB_EPStartXfer+0x1de>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	4413      	add	r3, r2
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	00da      	lsls	r2, r3, #3
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <USB_EPStartXfer+0x158>
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29a      	uxth	r2, r3
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e05b      	b.n	80062ce <USB_EPStartXfer+0x210>
 8006216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800621a:	2b3e      	cmp	r3, #62	@ 0x3e
 800621c:	d81c      	bhi.n	8006258 <USB_EPStartXfer+0x19a>
 800621e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <USB_EPStartXfer+0x180>
 8006234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006238:	3301      	adds	r3, #1
 800623a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29b      	uxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e03a      	b.n	80062ce <USB_EPStartXfer+0x210>
 8006258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <USB_EPStartXfer+0x1ba>
 800626e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006272:	3b01      	subs	r3, #1
 8006274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29b      	uxth	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	e018      	b.n	80062ce <USB_EPStartXfer+0x210>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d114      	bne.n	80062ce <USB_EPStartXfer+0x210>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	4413      	add	r3, r2
 80062b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	00da      	lsls	r2, r3, #3
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	895b      	ldrh	r3, [r3, #10]
 80062d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fdce 	bl	8006e86 <USB_WritePMA>
            ep->xfer_buff += len;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f2:	441a      	add	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d907      	bls.n	8006314 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	621a      	str	r2, [r3, #32]
 8006312:	e006      	b.n	8006322 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d16b      	bne.n	8006402 <USB_EPStartXfer+0x344>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	00da      	lsls	r2, r3, #3
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	4413      	add	r3, r2
 8006348:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006358:	b29a      	uxth	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <USB_EPStartXfer+0x2be>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006374:	b29a      	uxth	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e05d      	b.n	8006438 <USB_EPStartXfer+0x37a>
 800637c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006380:	2b3e      	cmp	r3, #62	@ 0x3e
 8006382:	d81c      	bhi.n	80063be <USB_EPStartXfer+0x300>
 8006384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800638e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <USB_EPStartXfer+0x2e6>
 800639a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	e03c      	b.n	8006438 <USB_EPStartXfer+0x37a>
 80063be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <USB_EPStartXfer+0x320>
 80063d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063d8:	3b01      	subs	r3, #1
 80063da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	029b      	lsls	r3, r3, #10
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4313      	orrs	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e01a      	b.n	8006438 <USB_EPStartXfer+0x37a>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d116      	bne.n	8006438 <USB_EPStartXfer+0x37a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	00da      	lsls	r2, r3, #3
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	4413      	add	r3, r2
 8006428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006432:	b29a      	uxth	r2, r3
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	891b      	ldrh	r3, [r3, #8]
 800643c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6959      	ldr	r1, [r3, #20]
 8006444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006448:	b29b      	uxth	r3, r3
 800644a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fd19 	bl	8006e86 <USB_WritePMA>
 8006454:	e2e2      	b.n	8006a1c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d16b      	bne.n	8006536 <USB_EPStartXfer+0x478>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006468:	b29b      	uxth	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646e:	4413      	add	r3, r2
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	00da      	lsls	r2, r3, #3
 8006478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647a:	4413      	add	r3, r2
 800647c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006480:	647b      	str	r3, [r7, #68]	@ 0x44
 8006482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800648c:	b29a      	uxth	r2, r3
 800648e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <USB_EPStartXfer+0x3f2>
 800649a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e05d      	b.n	800656c <USB_EPStartXfer+0x4ae>
 80064b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064b6:	d81c      	bhi.n	80064f2 <USB_EPStartXfer+0x434>
 80064b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <USB_EPStartXfer+0x41a>
 80064ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064d2:	3301      	adds	r3, #1
 80064d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e03c      	b.n	800656c <USB_EPStartXfer+0x4ae>
 80064f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <USB_EPStartXfer+0x454>
 8006508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800650c:	3b01      	subs	r3, #1
 800650e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652e:	b29a      	uxth	r2, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e01a      	b.n	800656c <USB_EPStartXfer+0x4ae>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d116      	bne.n	800656c <USB_EPStartXfer+0x4ae>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	653b      	str	r3, [r7, #80]	@ 0x50
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800654e:	4413      	add	r3, r2
 8006550:	653b      	str	r3, [r7, #80]	@ 0x50
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	00da      	lsls	r2, r3, #3
 8006558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800655a:	4413      	add	r3, r2
 800655c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006566:	b29a      	uxth	r2, r3
 8006568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800656a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	891b      	ldrh	r3, [r3, #8]
 8006570:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6959      	ldr	r1, [r3, #20]
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800657c:	b29b      	uxth	r3, r3
 800657e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fc7f 	bl	8006e86 <USB_WritePMA>
            ep->xfer_buff += len;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006590:	441a      	add	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d907      	bls.n	80065b2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	621a      	str	r2, [r3, #32]
 80065b0:	e006      	b.n	80065c0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d16b      	bne.n	80066a4 <USB_EPStartXfer+0x5e6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	4413      	add	r3, r2
 80065de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	00da      	lsls	r2, r3, #3
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	4413      	add	r3, r2
 80065ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <USB_EPStartXfer+0x560>
 8006608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006616:	b29a      	uxth	r2, r3
 8006618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	e05b      	b.n	80066d6 <USB_EPStartXfer+0x618>
 800661e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006622:	2b3e      	cmp	r3, #62	@ 0x3e
 8006624:	d81c      	bhi.n	8006660 <USB_EPStartXfer+0x5a2>
 8006626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <USB_EPStartXfer+0x588>
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006640:	3301      	adds	r3, #1
 8006642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006650:	b29b      	uxth	r3, r3
 8006652:	029b      	lsls	r3, r3, #10
 8006654:	b29b      	uxth	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e03a      	b.n	80066d6 <USB_EPStartXfer+0x618>
 8006660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800666a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <USB_EPStartXfer+0x5c2>
 8006676:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800667a:	3b01      	subs	r3, #1
 800667c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29a      	uxth	r2, r3
 8006686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800668a:	b29b      	uxth	r3, r3
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	b29b      	uxth	r3, r3
 8006690:	4313      	orrs	r3, r2
 8006692:	b29b      	uxth	r3, r3
 8006694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669c:	b29a      	uxth	r2, r3
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e018      	b.n	80066d6 <USB_EPStartXfer+0x618>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d114      	bne.n	80066d6 <USB_EPStartXfer+0x618>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b8:	4413      	add	r3, r2
 80066ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	00da      	lsls	r2, r3, #3
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	895b      	ldrh	r3, [r3, #10]
 80066da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6959      	ldr	r1, [r3, #20]
 80066e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fbca 	bl	8006e86 <USB_WritePMA>
 80066f2:	e193      	b.n	8006a1c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800670e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006712:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006748:	4413      	add	r3, r2
 800674a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	00da      	lsls	r2, r3, #3
 8006752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006754:	4413      	add	r3, r2
 8006756:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800675a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800675c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006760:	b29a      	uxth	r2, r3
 8006762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006764:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	891b      	ldrh	r3, [r3, #8]
 800676a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6959      	ldr	r1, [r3, #20]
 8006772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006776:	b29b      	uxth	r3, r3
 8006778:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb82 	bl	8006e86 <USB_WritePMA>
 8006782:	e14b      	b.n	8006a1c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 809a 	beq.w	80068de <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d16b      	bne.n	800688e <USB_EPStartXfer+0x7d0>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c6:	4413      	add	r3, r2
 80067c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	00da      	lsls	r2, r3, #3
 80067d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d2:	4413      	add	r3, r2
 80067d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80067da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <USB_EPStartXfer+0x74a>
 80067f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e05b      	b.n	80068c0 <USB_EPStartXfer+0x802>
 8006808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800680c:	2b3e      	cmp	r3, #62	@ 0x3e
 800680e:	d81c      	bhi.n	800684a <USB_EPStartXfer+0x78c>
 8006810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800681a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <USB_EPStartXfer+0x772>
 8006826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800682a:	3301      	adds	r3, #1
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29a      	uxth	r2, r3
 8006836:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800683a:	b29b      	uxth	r3, r3
 800683c:	029b      	lsls	r3, r3, #10
 800683e:	b29b      	uxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b29a      	uxth	r2, r3
 8006844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e03a      	b.n	80068c0 <USB_EPStartXfer+0x802>
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <USB_EPStartXfer+0x7ac>
 8006860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006864:	3b01      	subs	r3, #1
 8006866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800686a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29b      	uxth	r3, r3
 800687e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006886:	b29a      	uxth	r2, r3
 8006888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e018      	b.n	80068c0 <USB_EPStartXfer+0x802>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d114      	bne.n	80068c0 <USB_EPStartXfer+0x802>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068a2:	4413      	add	r3, r2
 80068a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	895b      	ldrh	r3, [r3, #10]
 80068c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6959      	ldr	r1, [r3, #20]
 80068cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fad5 	bl	8006e86 <USB_WritePMA>
 80068dc:	e09e      	b.n	8006a1c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d16b      	bne.n	80069be <USB_EPStartXfer+0x900>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f6:	4413      	add	r3, r2
 80068f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	00da      	lsls	r2, r3, #3
 8006900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006902:	4413      	add	r3, r2
 8006904:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006914:	b29a      	uxth	r2, r3
 8006916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <USB_EPStartXfer+0x87a>
 8006922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e063      	b.n	8006a00 <USB_EPStartXfer+0x942>
 8006938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800693c:	2b3e      	cmp	r3, #62	@ 0x3e
 800693e:	d81c      	bhi.n	800697a <USB_EPStartXfer+0x8bc>
 8006940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800694a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <USB_EPStartXfer+0x8a2>
 8006956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800695a:	3301      	adds	r3, #1
 800695c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e042      	b.n	8006a00 <USB_EPStartXfer+0x942>
 800697a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <USB_EPStartXfer+0x8dc>
 8006990:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006994:	3b01      	subs	r3, #1
 8006996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800699a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	029b      	lsls	r3, r3, #10
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4313      	orrs	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e020      	b.n	8006a00 <USB_EPStartXfer+0x942>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d11c      	bne.n	8006a00 <USB_EPStartXfer+0x942>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069da:	4413      	add	r3, r2
 80069dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00da      	lsls	r2, r3, #3
 80069e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ea:	4413      	add	r3, r2
 80069ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	891b      	ldrh	r3, [r3, #8]
 8006a04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6959      	ldr	r1, [r3, #20]
 8006a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa35 	bl	8006e86 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a32:	817b      	strh	r3, [r7, #10]
 8006a34:	897b      	ldrh	r3, [r7, #10]
 8006a36:	f083 0310 	eor.w	r3, r3, #16
 8006a3a:	817b      	strh	r3, [r7, #10]
 8006a3c:	897b      	ldrh	r3, [r7, #10]
 8006a3e:	f083 0320 	eor.w	r3, r3, #32
 8006a42:	817b      	strh	r3, [r7, #10]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	897b      	ldrh	r3, [r7, #10]
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
 8006a64:	e0d5      	b.n	8006c12 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	7b1b      	ldrb	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d156      	bne.n	8006b1c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d122      	bne.n	8006abc <USB_EPStartXfer+0x9fe>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	78db      	ldrb	r3, [r3, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11e      	bne.n	8006abc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a94:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e01d      	b.n	8006af8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d907      	bls.n	8006b14 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	619a      	str	r2, [r3, #24]
 8006b12:	e054      	b.n	8006bbe <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	619a      	str	r2, [r3, #24]
 8006b1a:	e050      	b.n	8006bbe <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	78db      	ldrb	r3, [r3, #3]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d142      	bne.n	8006baa <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d048      	beq.n	8006bbe <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <USB_EPStartXfer+0xa96>
 8006b48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b54:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d12e      	bne.n	8006bbe <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d128      	bne.n	8006bbe <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b82:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
 8006ba8:	e009      	b.n	8006bbe <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	619a      	str	r2, [r3, #24]
 8006bb8:	e001      	b.n	8006bbe <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e02a      	b.n	8006c14 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006be0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006be4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006be8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	37b0      	adds	r7, #176	@ 0xb0
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d020      	beq.n	8006c70 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c44:	81bb      	strh	r3, [r7, #12]
 8006c46:	89bb      	ldrh	r3, [r7, #12]
 8006c48:	f083 0310 	eor.w	r3, r3, #16
 8006c4c:	81bb      	strh	r3, [r7, #12]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	441a      	add	r2, r3
 8006c58:	89bb      	ldrh	r3, [r7, #12]
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]
 8006c6e:	e01f      	b.n	8006cb0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c86:	81fb      	strh	r3, [r7, #14]
 8006c88:	89fb      	ldrh	r3, [r7, #14]
 8006c8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c8e:	81fb      	strh	r3, [r7, #14]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	89fb      	ldrh	r3, [r7, #14]
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b087      	sub	sp, #28
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d04c      	beq.n	8006d6a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	823b      	strh	r3, [r7, #16]
 8006cde:	8a3b      	ldrh	r3, [r7, #16]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <USB_EPClearStall+0x62>
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfe:	81fb      	strh	r3, [r7, #14]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	89fb      	ldrh	r3, [r7, #14]
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d06c      	beq.n	8006e02 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3e:	81bb      	strh	r3, [r7, #12]
 8006d40:	89bb      	ldrh	r3, [r7, #12]
 8006d42:	f083 0320 	eor.w	r3, r3, #32
 8006d46:	81bb      	strh	r3, [r7, #12]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	89bb      	ldrh	r3, [r7, #12]
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]
 8006d68:	e04b      	b.n	8006e02 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	82fb      	strh	r3, [r7, #22]
 8006d78:	8afb      	ldrh	r3, [r7, #22]
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01b      	beq.n	8006dba <USB_EPClearStall+0xfc>
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d98:	82bb      	strh	r3, [r7, #20]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	8abb      	ldrh	r3, [r7, #20]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd0:	827b      	strh	r3, [r7, #18]
 8006dd2:	8a7b      	ldrh	r3, [r7, #18]
 8006dd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006dd8:	827b      	strh	r3, [r7, #18]
 8006dda:	8a7b      	ldrh	r3, [r7, #18]
 8006ddc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006de0:	827b      	strh	r3, [r7, #18]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8a7b      	ldrh	r3, [r7, #18]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2280      	movs	r2, #128	@ 0x80
 8006e26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e78:	68fb      	ldr	r3, [r7, #12]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b08b      	sub	sp, #44	@ 0x2c
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	4611      	mov	r1, r2
 8006e92:	461a      	mov	r2, r3
 8006e94:	460b      	mov	r3, r1
 8006e96:	80fb      	strh	r3, [r7, #6]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e9c:	88bb      	ldrh	r3, [r7, #4]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006eac:	88fa      	ldrh	r2, [r7, #6]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eb6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ebc:	e01c      	b.n	8006ef8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b21b      	sxth	r3, r3
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	b21a      	sxth	r2, r3
 8006ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	8a7a      	ldrh	r2, [r7, #18]
 8006ede:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1df      	bne.n	8006ebe <USB_WritePMA+0x38>
  }
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	372c      	adds	r7, #44	@ 0x2c
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08b      	sub	sp, #44	@ 0x2c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f22:	88bb      	ldrh	r3, [r7, #4]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f3c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	e018      	b.n	8006f76 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	3302      	adds	r3, #2
 8006f50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	3b01      	subs	r3, #1
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e3      	bne.n	8006f44 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006f7c:	88bb      	ldrh	r3, [r7, #4]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	372c      	adds	r7, #44	@ 0x2c
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fb0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006fb4:	f002 f956 	bl	8009264 <USBD_static_malloc>
 8006fb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e066      	b.n	800709a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7c1b      	ldrb	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d119      	bne.n	8007010 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	2181      	movs	r1, #129	@ 0x81
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 ffe4 	bl	8008fb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 ffda 	bl	8008fb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2210      	movs	r2, #16
 800700a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800700e:	e016      	b.n	800703e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007010:	2340      	movs	r3, #64	@ 0x40
 8007012:	2202      	movs	r2, #2
 8007014:	2181      	movs	r1, #129	@ 0x81
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 ffcb 	bl	8008fb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007022:	2340      	movs	r3, #64	@ 0x40
 8007024:	2202      	movs	r2, #2
 8007026:	2101      	movs	r1, #1
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 ffc2 	bl	8008fb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2210      	movs	r2, #16
 800703a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800703e:	2308      	movs	r3, #8
 8007040:	2203      	movs	r2, #3
 8007042:	2182      	movs	r1, #130	@ 0x82
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 ffb4 	bl	8008fb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7c1b      	ldrb	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800707a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f002 f885 	bl	8009190 <USBD_LL_PrepareReceive>
 8007086:	e007      	b.n	8007098 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800708e:	2340      	movs	r3, #64	@ 0x40
 8007090:	2101      	movs	r1, #1
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f002 f87c 	bl	8009190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ae:	2181      	movs	r1, #129	@ 0x81
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 ffa4 	bl	8008ffe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070bc:	2101      	movs	r1, #1
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 ff9d 	bl	8008ffe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070cc:	2182      	movs	r1, #130	@ 0x82
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 ff95 	bl	8008ffe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 f8be 	bl	8009280 <USBD_static_free>
    pdev->pClassData = NULL;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e0af      	b.n	80072a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007148:	2b00      	cmp	r3, #0
 800714a:	d03f      	beq.n	80071cc <USBD_CDC_Setup+0xb4>
 800714c:	2b20      	cmp	r3, #32
 800714e:	f040 809f 	bne.w	8007290 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d02e      	beq.n	80071b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b25b      	sxtb	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	da16      	bge.n	8007192 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007170:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	88d2      	ldrh	r2, [r2, #6]
 8007176:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	88db      	ldrh	r3, [r3, #6]
 800717c:	2b07      	cmp	r3, #7
 800717e:	bf28      	it	cs
 8007180:	2307      	movcs	r3, #7
 8007182:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	89fa      	ldrh	r2, [r7, #14]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 facf 	bl	800872e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007190:	e085      	b.n	800729e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	785a      	ldrb	r2, [r3, #1]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071a8:	6939      	ldr	r1, [r7, #16]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	461a      	mov	r2, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fae8 	bl	8008786 <USBD_CtlPrepareRx>
      break;
 80071b6:	e072      	b.n	800729e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	7850      	ldrb	r0, [r2, #1]
 80071c4:	2200      	movs	r2, #0
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	4798      	blx	r3
      break;
 80071ca:	e068      	b.n	800729e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b0b      	cmp	r3, #11
 80071d2:	d852      	bhi.n	800727a <USBD_CDC_Setup+0x162>
 80071d4:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <USBD_CDC_Setup+0xc4>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	0800720d 	.word	0x0800720d
 80071e0:	08007289 	.word	0x08007289
 80071e4:	0800727b 	.word	0x0800727b
 80071e8:	0800727b 	.word	0x0800727b
 80071ec:	0800727b 	.word	0x0800727b
 80071f0:	0800727b 	.word	0x0800727b
 80071f4:	0800727b 	.word	0x0800727b
 80071f8:	0800727b 	.word	0x0800727b
 80071fc:	0800727b 	.word	0x0800727b
 8007200:	0800727b 	.word	0x0800727b
 8007204:	08007237 	.word	0x08007237
 8007208:	08007261 	.word	0x08007261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b03      	cmp	r3, #3
 8007216:	d107      	bne.n	8007228 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007218:	f107 030a 	add.w	r3, r7, #10
 800721c:	2202      	movs	r2, #2
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fa84 	bl	800872e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007226:	e032      	b.n	800728e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fa0e 	bl	800864c <USBD_CtlError>
            ret = USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	75fb      	strb	r3, [r7, #23]
          break;
 8007234:	e02b      	b.n	800728e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d107      	bne.n	8007252 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007242:	f107 030d 	add.w	r3, r7, #13
 8007246:	2201      	movs	r2, #1
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fa6f 	bl	800872e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007250:	e01d      	b.n	800728e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f9f9 	bl	800864c <USBD_CtlError>
            ret = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	75fb      	strb	r3, [r7, #23]
          break;
 800725e:	e016      	b.n	800728e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d00f      	beq.n	800728c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f9ec 	bl	800864c <USBD_CtlError>
            ret = USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007278:	e008      	b.n	800728c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f9e5 	bl	800864c <USBD_CtlError>
          ret = USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	75fb      	strb	r3, [r7, #23]
          break;
 8007286:	e002      	b.n	800728e <USBD_CDC_Setup+0x176>
          break;
 8007288:	bf00      	nop
 800728a:	e008      	b.n	800729e <USBD_CDC_Setup+0x186>
          break;
 800728c:	bf00      	nop
      }
      break;
 800728e:	e006      	b.n	800729e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f9da 	bl	800864c <USBD_CtlError>
      ret = USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	bf00      	nop
  }

  return (uint8_t)ret;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80072ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e04f      	b.n	800736a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3318      	adds	r3, #24
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d029      	beq.n	800733c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3318      	adds	r3, #24
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	78f9      	ldrb	r1, [r7, #3]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	460b      	mov	r3, r1
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4403      	add	r3, r0
 8007308:	3320      	adds	r3, #32
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007316:	2b00      	cmp	r3, #0
 8007318:	d110      	bne.n	800733c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3318      	adds	r3, #24
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800732e:	78f9      	ldrb	r1, [r7, #3]
 8007330:	2300      	movs	r3, #0
 8007332:	2200      	movs	r2, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 ff0a 	bl	800914e <USBD_LL_Transmit>
 800733a:	e015      	b.n	8007368 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e015      	b.n	80073c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 ff1a 	bl	80091d2 <USBD_LL_GetRxDataSize>
 800739e:	4602      	mov	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073ba:	4611      	mov	r1, r2
 80073bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	e01a      	b.n	8007418 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d014      	beq.n	8007416 <USBD_CDC_EP0_RxReady+0x4e>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073f2:	2bff      	cmp	r3, #255	@ 0xff
 80073f4:	d00f      	beq.n	8007416 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007404:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800740c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	22ff      	movs	r2, #255	@ 0xff
 8007412:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2243      	movs	r2, #67	@ 0x43
 800742c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800742e:	4b03      	ldr	r3, [pc, #12]	@ (800743c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000094 	.word	0x20000094

08007440 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2243      	movs	r2, #67	@ 0x43
 800744c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800744e:	4b03      	ldr	r3, [pc, #12]	@ (800745c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20000050 	.word	0x20000050

08007460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2243      	movs	r2, #67	@ 0x43
 800746c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800746e:	4b03      	ldr	r3, [pc, #12]	@ (800747c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	200000d8 	.word	0x200000d8

08007480 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	220a      	movs	r2, #10
 800748c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800748e:	4b03      	ldr	r3, [pc, #12]	@ (800749c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	2000000c 	.word	0x2000000c

080074a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e004      	b.n	80074be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e008      	b.n	80074fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007516:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800751e:	2303      	movs	r3, #3
 8007520:	e004      	b.n	800752c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007546:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	e01a      	b.n	8007590 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007560:	2b00      	cmp	r3, #0
 8007562:	d114      	bne.n	800758e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2201      	movs	r2, #1
 8007568:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007582:	2181      	movs	r1, #129	@ 0x81
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fde2 	bl	800914e <USBD_LL_Transmit>

    ret = USBD_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e016      	b.n	80075e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7c1b      	ldrb	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075c8:	2101      	movs	r1, #1
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fde0 	bl	8009190 <USBD_LL_PrepareReceive>
 80075d0:	e007      	b.n	80075e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075d8:	2340      	movs	r3, #64	@ 0x40
 80075da:	2101      	movs	r1, #1
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fdd7 	bl	8009190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	e01f      	b.n	8007644 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	79fa      	ldrb	r2, [r7, #7]
 8007636:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f001 fc3f 	bl	8008ebc <USBD_LL_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007660:	2303      	movs	r3, #3
 8007662:	e016      	b.n	8007692 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	f107 020e 	add.w	r2, r7, #14
 8007684:	4610      	mov	r0, r2
 8007686:	4798      	blx	r3
 8007688:	4602      	mov	r2, r0
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fc6a 	bl	8008f7c <USBD_LL_Start>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	4611      	mov	r1, r2
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
  }

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 ff48 	bl	80085d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2b02      	cmp	r3, #2
 800776a:	d01a      	beq.n	80077a2 <USBD_LL_SetupStage+0x72>
 800776c:	2b02      	cmp	r3, #2
 800776e:	d822      	bhi.n	80077b6 <USBD_LL_SetupStage+0x86>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <USBD_LL_SetupStage+0x4a>
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00a      	beq.n	800778e <USBD_LL_SetupStage+0x5e>
 8007778:	e01d      	b.n	80077b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9f0 	bl	8007b68 <USBD_StdDevReq>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
      break;
 800778c:	e020      	b.n	80077d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa54 	bl	8007c44 <USBD_StdItfReq>
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]
      break;
 80077a0:	e016      	b.n	80077d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa93 	bl	8007cd6 <USBD_StdEPReq>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
      break;
 80077b4:	e00c      	b.n	80077d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fc39 	bl	800903c <USBD_LL_StallEP>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
      break;
 80077ce:	bf00      	nop
  }

  return ret;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	460b      	mov	r3, r1
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d138      	bne.n	8007860 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80077f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d14a      	bne.n	8007896 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	429a      	cmp	r2, r3
 800780a:	d913      	bls.n	8007834 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	4293      	cmp	r3, r2
 8007824:	bf28      	it	cs
 8007826:	4613      	movcs	r3, r2
 8007828:	461a      	mov	r2, r3
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 ffc7 	bl	80087c0 <USBD_CtlContinueRx>
 8007832:	e030      	b.n	8007896 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b03      	cmp	r3, #3
 800783e:	d10b      	bne.n	8007858 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 ffc2 	bl	80087e2 <USBD_CtlSendStatus>
 800785e:	e01a      	b.n	8007896 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b03      	cmp	r3, #3
 800786a:	d114      	bne.n	8007896 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	7afa      	ldrb	r2, [r7, #11]
 8007882:	4611      	mov	r1, r2
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	4798      	blx	r3
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	e000      	b.n	8007898 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	460b      	mov	r3, r1
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d16b      	bne.n	800798c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3314      	adds	r3, #20
 80078b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d156      	bne.n	8007972 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d914      	bls.n	80078fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	1ad2      	subs	r2, r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 ff3c 	bl	8008764 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ec:	2300      	movs	r3, #0
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f001 fc4c 	bl	8009190 <USBD_LL_PrepareReceive>
 80078f8:	e03b      	b.n	8007972 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d11c      	bne.n	8007940 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800790e:	429a      	cmp	r2, r3
 8007910:	d316      	bcc.n	8007940 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800791c:	429a      	cmp	r2, r3
 800791e:	d20f      	bcs.n	8007940 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 ff1d 	bl	8008764 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007932:	2300      	movs	r3, #0
 8007934:	2200      	movs	r2, #0
 8007936:	2100      	movs	r1, #0
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f001 fc29 	bl	8009190 <USBD_LL_PrepareReceive>
 800793e:	e018      	b.n	8007972 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d10b      	bne.n	8007964 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007964:	2180      	movs	r1, #128	@ 0x80
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f001 fb68 	bl	800903c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 ff4b 	bl	8008808 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007978:	2b01      	cmp	r3, #1
 800797a:	d122      	bne.n	80079c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fe98 	bl	80076b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800798a:	e01a      	b.n	80079c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b03      	cmp	r3, #3
 8007996:	d114      	bne.n	80079c2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00e      	beq.n	80079c2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	7afa      	ldrb	r2, [r7, #11]
 80079ae:	4611      	mov	r1, r2
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	4798      	blx	r3
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	e000      	b.n	80079c4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e02f      	b.n	8007a60 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6852      	ldr	r2, [r2, #4]
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	4611      	mov	r1, r2
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a2a:	2340      	movs	r3, #64	@ 0x40
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fabe 	bl	8008fb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2240      	movs	r2, #64	@ 0x40
 8007a42:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a46:	2340      	movs	r3, #64	@ 0x40
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2180      	movs	r1, #128	@ 0x80
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 fab0 	bl	8008fb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2240      	movs	r2, #64	@ 0x40
 8007a5c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d106      	bne.n	8007ad6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e012      	b.n	8007b20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d10b      	bne.n	8007b1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	b21a      	sxth	r2, r3
 8007b4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b58:	89fb      	ldrh	r3, [r7, #14]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b7e:	2b40      	cmp	r3, #64	@ 0x40
 8007b80:	d005      	beq.n	8007b8e <USBD_StdDevReq+0x26>
 8007b82:	2b40      	cmp	r3, #64	@ 0x40
 8007b84:	d853      	bhi.n	8007c2e <USBD_StdDevReq+0xc6>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <USBD_StdDevReq+0x3a>
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d14f      	bne.n	8007c2e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba0:	e04a      	b.n	8007c38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d83b      	bhi.n	8007c22 <USBD_StdDevReq+0xba>
 8007baa:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <USBD_StdDevReq+0x48>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007c05 	.word	0x08007c05
 8007bb4:	08007c19 	.word	0x08007c19
 8007bb8:	08007c23 	.word	0x08007c23
 8007bbc:	08007c0f 	.word	0x08007c0f
 8007bc0:	08007c23 	.word	0x08007c23
 8007bc4:	08007be3 	.word	0x08007be3
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007c23 	.word	0x08007c23
 8007bd0:	08007bfb 	.word	0x08007bfb
 8007bd4:	08007bed 	.word	0x08007bed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9de 	bl	8007f9c <USBD_GetDescriptor>
          break;
 8007be0:	e024      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb6d 	bl	80082c4 <USBD_SetAddress>
          break;
 8007bea:	e01f      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fbac 	bl	800834c <USBD_SetConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bf8:	e018      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc4b 	bl	8008498 <USBD_GetConfig>
          break;
 8007c02:	e013      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc7c 	bl	8008504 <USBD_GetStatus>
          break;
 8007c0c:	e00e      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fcab 	bl	800856c <USBD_SetFeature>
          break;
 8007c16:	e009      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fcba 	bl	8008594 <USBD_ClrFeature>
          break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fd11 	bl	800864c <USBD_CtlError>
          break;
 8007c2a:	bf00      	nop
      }
      break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fd0b 	bl	800864c <USBD_CtlError>
      break;
 8007c36:	bf00      	nop
  }

  return ret;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop

08007c44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d005      	beq.n	8007c6a <USBD_StdItfReq+0x26>
 8007c5e:	2b40      	cmp	r3, #64	@ 0x40
 8007c60:	d82f      	bhi.n	8007cc2 <USBD_StdItfReq+0x7e>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <USBD_StdItfReq+0x26>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d12b      	bne.n	8007cc2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d81d      	bhi.n	8007cb4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	889b      	ldrh	r3, [r3, #4]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d813      	bhi.n	8007caa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	88db      	ldrh	r3, [r3, #6]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d110      	bne.n	8007cbe <USBD_StdItfReq+0x7a>
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10d      	bne.n	8007cbe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fd9d 	bl	80087e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ca8:	e009      	b.n	8007cbe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fccd 	bl	800864c <USBD_CtlError>
          break;
 8007cb2:	e004      	b.n	8007cbe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fcc8 	bl	800864c <USBD_CtlError>
          break;
 8007cbc:	e000      	b.n	8007cc0 <USBD_StdItfReq+0x7c>
          break;
 8007cbe:	bf00      	nop
      }
      break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fcc1 	bl	800864c <USBD_CtlError>
      break;
 8007cca:	bf00      	nop
  }

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	889b      	ldrh	r3, [r3, #4]
 8007ce8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	d007      	beq.n	8007d06 <USBD_StdEPReq+0x30>
 8007cf6:	2b40      	cmp	r3, #64	@ 0x40
 8007cf8:	f200 8145 	bhi.w	8007f86 <USBD_StdEPReq+0x2b0>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00c      	beq.n	8007d1a <USBD_StdEPReq+0x44>
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	f040 8140 	bne.w	8007f86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
      break;
 8007d18:	e13a      	b.n	8007f90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d007      	beq.n	8007d32 <USBD_StdEPReq+0x5c>
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	f300 8129 	bgt.w	8007f7a <USBD_StdEPReq+0x2a4>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d07f      	beq.n	8007e2c <USBD_StdEPReq+0x156>
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d03c      	beq.n	8007daa <USBD_StdEPReq+0xd4>
 8007d30:	e123      	b.n	8007f7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d002      	beq.n	8007d44 <USBD_StdEPReq+0x6e>
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d016      	beq.n	8007d70 <USBD_StdEPReq+0x9a>
 8007d42:	e02c      	b.n	8007d9e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00d      	beq.n	8007d66 <USBD_StdEPReq+0x90>
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b80      	cmp	r3, #128	@ 0x80
 8007d4e:	d00a      	beq.n	8007d66 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f971 	bl	800903c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d5a:	2180      	movs	r1, #128	@ 0x80
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f96d 	bl	800903c <USBD_LL_StallEP>
 8007d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d64:	e020      	b.n	8007da8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc6f 	bl	800864c <USBD_CtlError>
              break;
 8007d6e:	e01b      	b.n	8007da8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	885b      	ldrh	r3, [r3, #2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10e      	bne.n	8007d96 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <USBD_StdEPReq+0xc0>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b80      	cmp	r3, #128	@ 0x80
 8007d82:	d008      	beq.n	8007d96 <USBD_StdEPReq+0xc0>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	88db      	ldrh	r3, [r3, #6]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 f953 	bl	800903c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fd23 	bl	80087e2 <USBD_CtlSendStatus>

              break;
 8007d9c:	e004      	b.n	8007da8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fc53 	bl	800864c <USBD_CtlError>
              break;
 8007da6:	bf00      	nop
          }
          break;
 8007da8:	e0ec      	b.n	8007f84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d002      	beq.n	8007dbc <USBD_StdEPReq+0xe6>
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d016      	beq.n	8007de8 <USBD_StdEPReq+0x112>
 8007dba:	e030      	b.n	8007e1e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <USBD_StdEPReq+0x108>
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b80      	cmp	r3, #128	@ 0x80
 8007dc6:	d00a      	beq.n	8007dde <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f935 	bl	800903c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dd2:	2180      	movs	r1, #128	@ 0x80
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 f931 	bl	800903c <USBD_LL_StallEP>
 8007dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ddc:	e025      	b.n	8007e2a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fc33 	bl	800864c <USBD_CtlError>
              break;
 8007de6:	e020      	b.n	8007e2a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	885b      	ldrh	r3, [r3, #2]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d11b      	bne.n	8007e28 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 f93b 	bl	800907a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fcec 	bl	80087e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007e1c:	e004      	b.n	8007e28 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fc13 	bl	800864c <USBD_CtlError>
              break;
 8007e26:	e000      	b.n	8007e2a <USBD_StdEPReq+0x154>
              break;
 8007e28:	bf00      	nop
          }
          break;
 8007e2a:	e0ab      	b.n	8007f84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x168>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d032      	beq.n	8007ea2 <USBD_StdEPReq+0x1cc>
 8007e3c:	e097      	b.n	8007f6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <USBD_StdEPReq+0x17e>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b80      	cmp	r3, #128	@ 0x80
 8007e48:	d004      	beq.n	8007e54 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fbfd 	bl	800864c <USBD_CtlError>
                break;
 8007e52:	e091      	b.n	8007f78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da0b      	bge.n	8007e74 <USBD_StdEPReq+0x19e>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	3310      	adds	r3, #16
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	e00b      	b.n	8007e8c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2202      	movs	r2, #2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc47 	bl	800872e <USBD_CtlSendData>
              break;
 8007ea0:	e06a      	b.n	8007f78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da11      	bge.n	8007ece <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3324      	adds	r3, #36	@ 0x24
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d117      	bne.n	8007ef4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fbc0 	bl	800864c <USBD_CtlError>
                  break;
 8007ecc:	e054      	b.n	8007f78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fbad 	bl	800864c <USBD_CtlError>
                  break;
 8007ef2:	e041      	b.n	8007f78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da0b      	bge.n	8007f14 <USBD_StdEPReq+0x23e>
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3304      	adds	r3, #4
 8007f12:	e00b      	b.n	8007f2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <USBD_StdEPReq+0x264>
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b80      	cmp	r3, #128	@ 0x80
 8007f38:	d103      	bne.n	8007f42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e00e      	b.n	8007f60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f8b6 	bl	80090b8 <USBD_LL_IsStallEP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2201      	movs	r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e002      	b.n	8007f60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2202      	movs	r2, #2
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fbe1 	bl	800872e <USBD_CtlSendData>
              break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb6b 	bl	800864c <USBD_CtlError>
              break;
 8007f76:	bf00      	nop
          }
          break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb65 	bl	800864c <USBD_CtlError>
          break;
 8007f82:	bf00      	nop
      }
      break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb5f 	bl	800864c <USBD_CtlError>
      break;
 8007f8e:	bf00      	nop
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	2b0e      	cmp	r3, #14
 8007fbe:	f200 8152 	bhi.w	8008266 <USBD_GetDescriptor+0x2ca>
 8007fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <USBD_GetDescriptor+0x2c>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08008039 	.word	0x08008039
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008091 	.word	0x08008091
 8007fd4:	08008267 	.word	0x08008267
 8007fd8:	08008267 	.word	0x08008267
 8007fdc:	08008207 	.word	0x08008207
 8007fe0:	08008233 	.word	0x08008233
 8007fe4:	08008267 	.word	0x08008267
 8007fe8:	08008267 	.word	0x08008267
 8007fec:	08008267 	.word	0x08008267
 8007ff0:	08008267 	.word	0x08008267
 8007ff4:	08008267 	.word	0x08008267
 8007ff8:	08008267 	.word	0x08008267
 8007ffc:	08008267 	.word	0x08008267
 8008000:	08008005 	.word	0x08008005
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7c12      	ldrb	r2, [r2, #16]
 800801c:	f107 0108 	add.w	r1, r7, #8
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
 8008024:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008026:	e126      	b.n	8008276 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fb0e 	bl	800864c <USBD_CtlError>
        err++;
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	3301      	adds	r3, #1
 8008034:	72fb      	strb	r3, [r7, #11]
      break;
 8008036:	e11e      	b.n	8008276 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
      break;
 800804e:	e112      	b.n	8008276 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10d      	bne.n	8008074 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f107 0208 	add.w	r2, r7, #8
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	2202      	movs	r2, #2
 8008070:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008072:	e100      	b.n	8008276 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	f107 0208 	add.w	r2, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	2202      	movs	r2, #2
 800808c:	701a      	strb	r2, [r3, #0]
      break;
 800808e:	e0f2      	b.n	8008276 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b05      	cmp	r3, #5
 8008098:	f200 80ac 	bhi.w	80081f4 <USBD_GetDescriptor+0x258>
 800809c:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <USBD_GetDescriptor+0x108>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080f1 	.word	0x080080f1
 80080ac:	08008125 	.word	0x08008125
 80080b0:	08008159 	.word	0x08008159
 80080b4:	0800818d 	.word	0x0800818d
 80080b8:	080081c1 	.word	0x080081c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	7c12      	ldrb	r2, [r2, #16]
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080de:	e091      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fab2 	bl	800864c <USBD_CtlError>
            err++;
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	3301      	adds	r3, #1
 80080ec:	72fb      	strb	r3, [r7, #11]
          break;
 80080ee:	e089      	b.n	8008204 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	7c12      	ldrb	r2, [r2, #16]
 8008108:	f107 0108 	add.w	r1, r7, #8
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008112:	e077      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa98 	bl	800864c <USBD_CtlError>
            err++;
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	3301      	adds	r3, #1
 8008120:	72fb      	strb	r3, [r7, #11]
          break;
 8008122:	e06f      	b.n	8008204 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7c12      	ldrb	r2, [r2, #16]
 800813c:	f107 0108 	add.w	r1, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008146:	e05d      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa7e 	bl	800864c <USBD_CtlError>
            err++;
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	3301      	adds	r3, #1
 8008154:	72fb      	strb	r3, [r7, #11]
          break;
 8008156:	e055      	b.n	8008204 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	7c12      	ldrb	r2, [r2, #16]
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
 8008178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817a:	e043      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa64 	bl	800864c <USBD_CtlError>
            err++;
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	3301      	adds	r3, #1
 8008188:	72fb      	strb	r3, [r7, #11]
          break;
 800818a:	e03b      	b.n	8008204 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	f107 0108 	add.w	r1, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ae:	e029      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa4a 	bl	800864c <USBD_CtlError>
            err++;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	3301      	adds	r3, #1
 80081bc:	72fb      	strb	r3, [r7, #11]
          break;
 80081be:	e021      	b.n	8008204 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7c12      	ldrb	r2, [r2, #16]
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e2:	e00f      	b.n	8008204 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa30 	bl	800864c <USBD_CtlError>
            err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
          break;
 80081f2:	e007      	b.n	8008204 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa28 	bl	800864c <USBD_CtlError>
          err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008202:	bf00      	nop
      }
      break;
 8008204:	e037      	b.n	8008276 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7c1b      	ldrb	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008216:	f107 0208 	add.w	r2, r7, #8
 800821a:	4610      	mov	r0, r2
 800821c:	4798      	blx	r3
 800821e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008220:	e029      	b.n	8008276 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fa11 	bl	800864c <USBD_CtlError>
        err++;
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	3301      	adds	r3, #1
 800822e:	72fb      	strb	r3, [r7, #11]
      break;
 8008230:	e021      	b.n	8008276 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7c1b      	ldrb	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10d      	bne.n	8008256 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	f107 0208 	add.w	r2, r7, #8
 8008246:	4610      	mov	r0, r2
 8008248:	4798      	blx	r3
 800824a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	2207      	movs	r2, #7
 8008252:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008254:	e00f      	b.n	8008276 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f9f7 	bl	800864c <USBD_CtlError>
        err++;
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	3301      	adds	r3, #1
 8008262:	72fb      	strb	r3, [r7, #11]
      break;
 8008264:	e007      	b.n	8008276 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9ef 	bl	800864c <USBD_CtlError>
      err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	bf00      	nop
  }

  if (err != 0U)
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d11e      	bne.n	80082ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	88db      	ldrh	r3, [r3, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d016      	beq.n	80082b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008284:	893b      	ldrh	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00e      	beq.n	80082a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88da      	ldrh	r2, [r3, #6]
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	4293      	cmp	r3, r2
 8008292:	bf28      	it	cs
 8008294:	4613      	movcs	r3, r2
 8008296:	b29b      	uxth	r3, r3
 8008298:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800829a:	893b      	ldrh	r3, [r7, #8]
 800829c:	461a      	mov	r2, r3
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa44 	bl	800872e <USBD_CtlSendData>
 80082a6:	e009      	b.n	80082bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9ce 	bl	800864c <USBD_CtlError>
 80082b0:	e004      	b.n	80082bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa95 	bl	80087e2 <USBD_CtlSendStatus>
 80082b8:	e000      	b.n	80082bc <USBD_GetDescriptor+0x320>
    return;
 80082ba:	bf00      	nop
  }
}
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop

080082c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	889b      	ldrh	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d131      	bne.n	800833a <USBD_SetAddress+0x76>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d12d      	bne.n	800833a <USBD_SetAddress+0x76>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082e4:	d829      	bhi.n	800833a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d104      	bne.n	8008308 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9a3 	bl	800864c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008306:	e01d      	b.n	8008344 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7bfa      	ldrb	r2, [r7, #15]
 800830c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fefb 	bl	8009110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa61 	bl	80087e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832e:	e009      	b.n	8008344 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	e004      	b.n	8008344 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f985 	bl	800864c <USBD_CtlError>
  }
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	4b4c      	ldr	r3, [pc, #304]	@ (8008494 <USBD_SetConfig+0x148>)
 8008362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008364:	4b4b      	ldr	r3, [pc, #300]	@ (8008494 <USBD_SetConfig+0x148>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d905      	bls.n	8008378 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f96c 	bl	800864c <USBD_CtlError>
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e088      	b.n	800848a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d002      	beq.n	800838a <USBD_SetConfig+0x3e>
 8008384:	2b03      	cmp	r3, #3
 8008386:	d025      	beq.n	80083d4 <USBD_SetConfig+0x88>
 8008388:	e071      	b.n	800846e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800838a:	4b42      	ldr	r3, [pc, #264]	@ (8008494 <USBD_SetConfig+0x148>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01c      	beq.n	80083cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008392:	4b40      	ldr	r3, [pc, #256]	@ (8008494 <USBD_SetConfig+0x148>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800839c:	4b3d      	ldr	r3, [pc, #244]	@ (8008494 <USBD_SetConfig+0x148>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff f990 	bl	80076c8 <USBD_SetClassConfig>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f949 	bl	800864c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083ba:	e065      	b.n	8008488 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fa10 	bl	80087e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2203      	movs	r2, #3
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083ca:	e05d      	b.n	8008488 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fa08 	bl	80087e2 <USBD_CtlSendStatus>
      break;
 80083d2:	e059      	b.n	8008488 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008494 <USBD_SetConfig+0x148>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d112      	bne.n	8008402 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008494 <USBD_SetConfig+0x148>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ee:	4b29      	ldr	r3, [pc, #164]	@ (8008494 <USBD_SetConfig+0x148>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff f983 	bl	8007700 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9f1 	bl	80087e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008400:	e042      	b.n	8008488 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008402:	4b24      	ldr	r3, [pc, #144]	@ (8008494 <USBD_SetConfig+0x148>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d02a      	beq.n	8008466 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff f971 	bl	8007700 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800841e:	4b1d      	ldr	r3, [pc, #116]	@ (8008494 <USBD_SetConfig+0x148>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008428:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <USBD_SetConfig+0x148>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff f94a 	bl	80076c8 <USBD_SetClassConfig>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00f      	beq.n	800845e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f903 	bl	800864c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff f956 	bl	8007700 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800845c:	e014      	b.n	8008488 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9bf 	bl	80087e2 <USBD_CtlSendStatus>
      break;
 8008464:	e010      	b.n	8008488 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9bb 	bl	80087e2 <USBD_CtlSendStatus>
      break;
 800846c:	e00c      	b.n	8008488 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f8eb 	bl	800864c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008476:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <USBD_SetConfig+0x148>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff f93f 	bl	8007700 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008482:	2303      	movs	r3, #3
 8008484:	73fb      	strb	r3, [r7, #15]
      break;
 8008486:	bf00      	nop
  }

  return ret;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	2000023c 	.word	0x2000023c

08008498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d004      	beq.n	80084b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8cd 	bl	800864c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084b2:	e023      	b.n	80084fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	dc02      	bgt.n	80084c6 <USBD_GetConfig+0x2e>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc03      	bgt.n	80084cc <USBD_GetConfig+0x34>
 80084c4:	e015      	b.n	80084f2 <USBD_GetConfig+0x5a>
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d00b      	beq.n	80084e2 <USBD_GetConfig+0x4a>
 80084ca:	e012      	b.n	80084f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3308      	adds	r3, #8
 80084d6:	2201      	movs	r2, #1
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f927 	bl	800872e <USBD_CtlSendData>
        break;
 80084e0:	e00c      	b.n	80084fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3304      	adds	r3, #4
 80084e6:	2201      	movs	r2, #1
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f91f 	bl	800872e <USBD_CtlSendData>
        break;
 80084f0:	e004      	b.n	80084fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f8a9 	bl	800864c <USBD_CtlError>
        break;
 80084fa:	bf00      	nop
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008514:	b2db      	uxtb	r3, r3
 8008516:	3b01      	subs	r3, #1
 8008518:	2b02      	cmp	r3, #2
 800851a:	d81e      	bhi.n	800855a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	88db      	ldrh	r3, [r3, #6]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d004      	beq.n	800852e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f890 	bl	800864c <USBD_CtlError>
        break;
 800852c:	e01a      	b.n	8008564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f043 0202 	orr.w	r2, r3, #2
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	330c      	adds	r3, #12
 800854e:	2202      	movs	r2, #2
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8eb 	bl	800872e <USBD_CtlSendData>
      break;
 8008558:	e004      	b.n	8008564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f875 	bl	800864c <USBD_CtlError>
      break;
 8008562:	bf00      	nop
  }
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d106      	bne.n	800858c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f92b 	bl	80087e2 <USBD_CtlSendStatus>
  }
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d80b      	bhi.n	80085c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d10c      	bne.n	80085ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f910 	bl	80087e2 <USBD_CtlSendStatus>
      }
      break;
 80085c2:	e004      	b.n	80085ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f840 	bl	800864c <USBD_CtlError>
      break;
 80085cc:	e000      	b.n	80085d0 <USBD_ClrFeature+0x3c>
      break;
 80085ce:	bf00      	nop
  }
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fa90 	bl	8007b28 <SWAPBYTE>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff fa83 	bl	8007b28 <SWAPBYTE>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff fa76 	bl	8007b28 <SWAPBYTE>
 800863c:	4603      	mov	r3, r0
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	80da      	strh	r2, [r3, #6]
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008656:	2180      	movs	r1, #128	@ 0x80
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fcef 	bl	800903c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800865e:	2100      	movs	r1, #0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fceb 	bl	800903c <USBD_LL_StallEP>
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d036      	beq.n	80086f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008688:	6938      	ldr	r0, [r7, #16]
 800868a:	f000 f836 	bl	80086fa <USBD_GetLen>
 800868e:	4603      	mov	r3, r0
 8008690:	3301      	adds	r3, #1
 8008692:	b29b      	uxth	r3, r3
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	3301      	adds	r3, #1
 80086ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	4413      	add	r3, r2
 80086b4:	2203      	movs	r2, #3
 80086b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	3301      	adds	r3, #1
 80086bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086be:	e013      	b.n	80086e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	4413      	add	r3, r2
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	7812      	ldrb	r2, [r2, #0]
 80086ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3301      	adds	r3, #1
 80086d0:	613b      	str	r3, [r7, #16]
    idx++;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	3301      	adds	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
    idx++;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	3301      	adds	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e7      	bne.n	80086c0 <USBD_GetString+0x52>
 80086f0:	e000      	b.n	80086f4 <USBD_GetString+0x86>
    return;
 80086f2:	bf00      	nop
  }
}
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800870a:	e005      	b.n	8008718 <USBD_GetLen+0x1e>
  {
    len++;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	3301      	adds	r3, #1
 8008710:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3301      	adds	r3, #1
 8008716:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f5      	bne.n	800870c <USBD_GetLen+0x12>
  }

  return len;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	2100      	movs	r1, #0
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 fcfa 	bl	800914e <USBD_LL_Transmit>

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fce9 	bl	800914e <USBD_LL_Transmit>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2203      	movs	r2, #3
 8008796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	2100      	movs	r1, #0
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fced 	bl	8009190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	2100      	movs	r1, #0
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fcdc 	bl	8009190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2204      	movs	r2, #4
 80087ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fca8 	bl	800914e <USBD_LL_Transmit>

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2205      	movs	r2, #5
 8008814:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fcb6 	bl	8009190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008834:	2200      	movs	r2, #0
 8008836:	4912      	ldr	r1, [pc, #72]	@ (8008880 <MX_USB_Device_Init+0x50>)
 8008838:	4812      	ldr	r0, [pc, #72]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800883a:	f7fe fed7 	bl	80075ec <USBD_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008844:	f7f7 fef8 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008848:	490f      	ldr	r1, [pc, #60]	@ (8008888 <MX_USB_Device_Init+0x58>)
 800884a:	480e      	ldr	r0, [pc, #56]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800884c:	f7fe fefe 	bl	800764c <USBD_RegisterClass>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008856:	f7f7 feef 	bl	8000638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800885a:	490c      	ldr	r1, [pc, #48]	@ (800888c <MX_USB_Device_Init+0x5c>)
 800885c:	4809      	ldr	r0, [pc, #36]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800885e:	f7fe fe1f 	bl	80074a0 <USBD_CDC_RegisterInterface>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008868:	f7f7 fee6 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800886c:	4805      	ldr	r0, [pc, #20]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800886e:	f7fe ff14 	bl	800769a <USBD_Start>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008878:	f7f7 fede 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800887c:	bf00      	nop
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000130 	.word	0x20000130
 8008884:	20000240 	.word	0x20000240
 8008888:	20000018 	.word	0x20000018
 800888c:	2000011c 	.word	0x2000011c

08008890 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008894:	2200      	movs	r2, #0
 8008896:	4905      	ldr	r1, [pc, #20]	@ (80088ac <CDC_Init_FS+0x1c>)
 8008898:	4805      	ldr	r0, [pc, #20]	@ (80088b0 <CDC_Init_FS+0x20>)
 800889a:	f7fe fe16 	bl	80074ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800889e:	4905      	ldr	r1, [pc, #20]	@ (80088b4 <CDC_Init_FS+0x24>)
 80088a0:	4803      	ldr	r0, [pc, #12]	@ (80088b0 <CDC_Init_FS+0x20>)
 80088a2:	f7fe fe30 	bl	8007506 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000910 	.word	0x20000910
 80088b0:	20000240 	.word	0x20000240
 80088b4:	20000510 	.word	0x20000510

080088b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088be:	4618      	mov	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
 80088d4:	4613      	mov	r3, r2
 80088d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	2b23      	cmp	r3, #35	@ 0x23
 80088dc:	d84a      	bhi.n	8008974 <CDC_Control_FS+0xac>
 80088de:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <CDC_Control_FS+0x1c>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008975 	.word	0x08008975
 80088e8:	08008975 	.word	0x08008975
 80088ec:	08008975 	.word	0x08008975
 80088f0:	08008975 	.word	0x08008975
 80088f4:	08008975 	.word	0x08008975
 80088f8:	08008975 	.word	0x08008975
 80088fc:	08008975 	.word	0x08008975
 8008900:	08008975 	.word	0x08008975
 8008904:	08008975 	.word	0x08008975
 8008908:	08008975 	.word	0x08008975
 800890c:	08008975 	.word	0x08008975
 8008910:	08008975 	.word	0x08008975
 8008914:	08008975 	.word	0x08008975
 8008918:	08008975 	.word	0x08008975
 800891c:	08008975 	.word	0x08008975
 8008920:	08008975 	.word	0x08008975
 8008924:	08008975 	.word	0x08008975
 8008928:	08008975 	.word	0x08008975
 800892c:	08008975 	.word	0x08008975
 8008930:	08008975 	.word	0x08008975
 8008934:	08008975 	.word	0x08008975
 8008938:	08008975 	.word	0x08008975
 800893c:	08008975 	.word	0x08008975
 8008940:	08008975 	.word	0x08008975
 8008944:	08008975 	.word	0x08008975
 8008948:	08008975 	.word	0x08008975
 800894c:	08008975 	.word	0x08008975
 8008950:	08008975 	.word	0x08008975
 8008954:	08008975 	.word	0x08008975
 8008958:	08008975 	.word	0x08008975
 800895c:	08008975 	.word	0x08008975
 8008960:	08008975 	.word	0x08008975
 8008964:	08008975 	.word	0x08008975
 8008968:	08008975 	.word	0x08008975
 800896c:	08008975 	.word	0x08008975
 8008970:	08008975 	.word	0x08008975
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008974:	bf00      	nop
  }

  return (USBD_OK);
 8008976:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b090      	sub	sp, #64	@ 0x40
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Null-terminate the incoming buffer
	    if (*Len < APP_RX_DATA_SIZE) {
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008996:	d205      	bcs.n	80089a4 <CDC_Receive_FS+0x20>
	        Buf[*Len] = '\0';
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	4413      	add	r3, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
	    }

	    char* msg = (char*)Buf;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	    if (strncmp(msg, "ON", 2) == 0)
 80089a8:	2202      	movs	r2, #2
 80089aa:	4926      	ldr	r1, [pc, #152]	@ (8008a44 <CDC_Receive_FS+0xc0>)
 80089ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80089ae:	f000 fcab 	bl	8009308 <strncmp>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <CDC_Receive_FS+0x58>
	    {
	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80089b8:	2201      	movs	r2, #1
 80089ba:	2108      	movs	r1, #8
 80089bc:	4822      	ldr	r0, [pc, #136]	@ (8008a48 <CDC_Receive_FS+0xc4>)
 80089be:	f7f9 ff99 	bl	80028f4 <HAL_GPIO_WritePin>
	        const char reply[] = "LED is ON\r\n";
 80089c2:	4a22      	ldr	r2, [pc, #136]	@ (8008a4c <CDC_Receive_FS+0xc8>)
 80089c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80089c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80089ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 80089ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80089d2:	210b      	movs	r1, #11
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f843 	bl	8008a60 <CDC_Transmit_FS>
 80089da:	e027      	b.n	8008a2c <CDC_Receive_FS+0xa8>
	    }
	    else if (strncmp(msg, "OFF", 3) == 0)
 80089dc:	2203      	movs	r2, #3
 80089de:	491c      	ldr	r1, [pc, #112]	@ (8008a50 <CDC_Receive_FS+0xcc>)
 80089e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80089e2:	f000 fc91 	bl	8009308 <strncmp>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d111      	bne.n	8008a10 <CDC_Receive_FS+0x8c>
	    {
	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80089ec:	2200      	movs	r2, #0
 80089ee:	2108      	movs	r1, #8
 80089f0:	4815      	ldr	r0, [pc, #84]	@ (8008a48 <CDC_Receive_FS+0xc4>)
 80089f2:	f7f9 ff7f 	bl	80028f4 <HAL_GPIO_WritePin>
	        const char reply[] = "LED is OFF\r\n";
 80089f6:	4b17      	ldr	r3, [pc, #92]	@ (8008a54 <CDC_Receive_FS+0xd0>)
 80089f8:	f107 0420 	add.w	r4, r7, #32
 80089fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089fe:	c407      	stmia	r4!, {r0, r1, r2}
 8008a00:	7023      	strb	r3, [r4, #0]
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 8008a02:	f107 0320 	add.w	r3, r7, #32
 8008a06:	210c      	movs	r1, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f829 	bl	8008a60 <CDC_Transmit_FS>
 8008a0e:	e00d      	b.n	8008a2c <CDC_Receive_FS+0xa8>
	    }
	    else
	    {
	        const char reply[] = "Unknown command\r\n";
 8008a10:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <CDC_Receive_FS+0xd4>)
 8008a12:	f107 040c 	add.w	r4, r7, #12
 8008a16:	461d      	mov	r5, r3
 8008a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	8023      	strh	r3, [r4, #0]
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 8008a20:	f107 030c 	add.w	r3, r7, #12
 8008a24:	2111      	movs	r1, #17
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f81a 	bl	8008a60 <CDC_Transmit_FS>
	    }

	    // Re-arm USB OUT endpoint to receive next packet
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	480b      	ldr	r0, [pc, #44]	@ (8008a5c <CDC_Receive_FS+0xd8>)
 8008a30:	f7fe fd69 	bl	8007506 <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a34:	4809      	ldr	r0, [pc, #36]	@ (8008a5c <CDC_Receive_FS+0xd8>)
 8008a36:	f7fe fdaf 	bl	8007598 <USBD_CDC_ReceivePacket>

	    return (USBD_OK);
 8008a3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3740      	adds	r7, #64	@ 0x40
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bdb0      	pop	{r4, r5, r7, pc}
 8008a44:	0800938c 	.word	0x0800938c
 8008a48:	48000400 	.word	0x48000400
 8008a4c:	08009394 	.word	0x08009394
 8008a50:	08009390 	.word	0x08009390
 8008a54:	080093a0 	.word	0x080093a0
 8008a58:	080093b0 	.word	0x080093b0
 8008a5c:	20000240 	.word	0x20000240

08008a60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a70:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e00b      	b.n	8008a9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a86:	887b      	ldrh	r3, [r7, #2]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4806      	ldr	r0, [pc, #24]	@ (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a8e:	f7fe fd1c 	bl	80074ca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a92:	4805      	ldr	r0, [pc, #20]	@ (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a94:	f7fe fd50 	bl	8007538 <USBD_CDC_TransmitPacket>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000240 	.word	0x20000240

08008aac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2212      	movs	r2, #18
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008ae2:	4b03      	ldr	r3, [pc, #12]	@ (8008af0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000150 	.word	0x20000150

08008af4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2204      	movs	r2, #4
 8008b04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	@ (8008b14 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000164 	.word	0x20000164

08008b18 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4907      	ldr	r1, [pc, #28]	@ (8008b4c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b2e:	4808      	ldr	r0, [pc, #32]	@ (8008b50 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b30:	f7ff fd9d 	bl	800866e <USBD_GetString>
 8008b34:	e004      	b.n	8008b40 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4904      	ldr	r1, [pc, #16]	@ (8008b4c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b3a:	4805      	ldr	r0, [pc, #20]	@ (8008b50 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b3c:	f7ff fd97 	bl	800866e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b40:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000d10 	.word	0x20000d10
 8008b50:	080093c4 	.word	0x080093c4

08008b54 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	4904      	ldr	r1, [pc, #16]	@ (8008b74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008b64:	4804      	ldr	r0, [pc, #16]	@ (8008b78 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008b66:	f7ff fd82 	bl	800866e <USBD_GetString>
  return USBD_StrDesc;
 8008b6a:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000d10 	.word	0x20000d10
 8008b78:	080093dc 	.word	0x080093dc

08008b7c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	221a      	movs	r2, #26
 8008b8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b8e:	f000 f843 	bl	8008c18 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008b92:	4b02      	ldr	r3, [pc, #8]	@ (8008b9c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000168 	.word	0x20000168

08008ba0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4907      	ldr	r1, [pc, #28]	@ (8008bd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bb6:	4808      	ldr	r0, [pc, #32]	@ (8008bd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008bb8:	f7ff fd59 	bl	800866e <USBD_GetString>
 8008bbc:	e004      	b.n	8008bc8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4904      	ldr	r1, [pc, #16]	@ (8008bd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bc2:	4805      	ldr	r0, [pc, #20]	@ (8008bd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008bc4:	f7ff fd53 	bl	800866e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc8:	4b02      	ldr	r3, [pc, #8]	@ (8008bd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000d10 	.word	0x20000d10
 8008bd8:	080093f0 	.word	0x080093f0

08008bdc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4907      	ldr	r1, [pc, #28]	@ (8008c10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008bf2:	4808      	ldr	r0, [pc, #32]	@ (8008c14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008bf4:	f7ff fd3b 	bl	800866e <USBD_GetString>
 8008bf8:	e004      	b.n	8008c04 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4904      	ldr	r1, [pc, #16]	@ (8008c10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008bfe:	4805      	ldr	r0, [pc, #20]	@ (8008c14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c00:	f7ff fd35 	bl	800866e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	@ (8008c10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000d10 	.word	0x20000d10
 8008c14:	080093fc 	.word	0x080093fc

08008c18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c5c <Get_SerialNum+0x44>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c24:	4b0e      	ldr	r3, [pc, #56]	@ (8008c60 <Get_SerialNum+0x48>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <Get_SerialNum+0x4c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c3e:	2208      	movs	r2, #8
 8008c40:	4909      	ldr	r1, [pc, #36]	@ (8008c68 <Get_SerialNum+0x50>)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f814 	bl	8008c70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c48:	2204      	movs	r2, #4
 8008c4a:	4908      	ldr	r1, [pc, #32]	@ (8008c6c <Get_SerialNum+0x54>)
 8008c4c:	68b8      	ldr	r0, [r7, #8]
 8008c4e:	f000 f80f 	bl	8008c70 <IntToUnicode>
  }
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	1fff7590 	.word	0x1fff7590
 8008c60:	1fff7594 	.word	0x1fff7594
 8008c64:	1fff7598 	.word	0x1fff7598
 8008c68:	2000016a 	.word	0x2000016a
 8008c6c:	2000017a 	.word	0x2000017a

08008c70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e027      	b.n	8008cd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0f1b      	lsrs	r3, r3, #28
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d80b      	bhi.n	8008ca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	0f1b      	lsrs	r3, r3, #28
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3230      	adds	r2, #48	@ 0x30
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e00a      	b.n	8008cbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3237      	adds	r2, #55	@ 0x37
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	3301      	adds	r3, #1
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
 8008cd8:	7dfa      	ldrb	r2, [r7, #23]
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3d3      	bcc.n	8008c88 <IntToUnicode+0x18>
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b094      	sub	sp, #80	@ 0x50
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cf8:	f107 030c 	add.w	r3, r7, #12
 8008cfc:	2244      	movs	r2, #68	@ 0x44
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 faf9 	bl	80092f8 <memset>
  if(pcdHandle->Instance==USB)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a15      	ldr	r2, [pc, #84]	@ (8008d60 <HAL_PCD_MspInit+0x70>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d122      	bne.n	8008d56 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008d16:	2300      	movs	r3, #0
 8008d18:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d1a:	f107 030c 	add.w	r3, r7, #12
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fc f8b8 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008d2a:	f7f7 fc85 	bl	8000638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <HAL_PCD_MspInit+0x74>)
 8008d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d32:	4a0c      	ldr	r2, [pc, #48]	@ (8008d64 <HAL_PCD_MspInit+0x74>)
 8008d34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <HAL_PCD_MspInit+0x74>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d42:	60bb      	str	r3, [r7, #8]
 8008d44:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008d46:	2200      	movs	r2, #0
 8008d48:	2100      	movs	r1, #0
 8008d4a:	2014      	movs	r0, #20
 8008d4c:	f7f9 f9a5 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008d50:	2014      	movs	r0, #20
 8008d52:	f7f9 f9bc 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d56:	bf00      	nop
 8008d58:	3750      	adds	r7, #80	@ 0x50
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40005c00 	.word	0x40005c00
 8008d64:	40021000 	.word	0x40021000

08008d68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f7fe fcd6 	bl	8007730 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	440b      	add	r3, r1
 8008dac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7fe fd10 	bl	80077da <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	440b      	add	r3, r1
 8008de2:	3324      	adds	r3, #36	@ 0x24
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe fd59 	bl	80078a0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fe6d 	bl	8007ae4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	795b      	ldrb	r3, [r3, #5]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d001      	beq.n	8008e2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e26:	f7f7 fc07 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e30:	7bfa      	ldrb	r2, [r7, #15]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fe17 	bl	8007a68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fdc3 	bl	80079cc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fe12 	bl	8007a88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7a5b      	ldrb	r3, [r3, #9]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e6c:	4b04      	ldr	r3, [pc, #16]	@ (8008e80 <HAL_PCD_SuspendCallback+0x30>)
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	4a03      	ldr	r2, [pc, #12]	@ (8008e80 <HAL_PCD_SuspendCallback+0x30>)
 8008e72:	f043 0306 	orr.w	r3, r3, #6
 8008e76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	e000ed00 	.word	0xe000ed00

08008e84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7a5b      	ldrb	r3, [r3, #9]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e94:	4b08      	ldr	r3, [pc, #32]	@ (8008eb8 <HAL_PCD_ResumeCallback+0x34>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	4a07      	ldr	r2, [pc, #28]	@ (8008eb8 <HAL_PCD_ResumeCallback+0x34>)
 8008e9a:	f023 0306 	bic.w	r3, r3, #6
 8008e9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008ea0:	f000 f9f8 	bl	8009294 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fe02 	bl	8007ab4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed00 	.word	0xe000ed00

08008ebc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a29      	ldr	r2, [pc, #164]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ed0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008ed4:	4b27      	ldr	r3, [pc, #156]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ed6:	4a28      	ldr	r2, [pc, #160]	@ (8008f78 <USBD_LL_Init+0xbc>)
 8008ed8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008eda:	4b26      	ldr	r3, [pc, #152]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008edc:	2208      	movs	r2, #8
 8008ede:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ee0:	4b24      	ldr	r3, [pc, #144]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ee6:	4b23      	ldr	r3, [pc, #140]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ee8:	2202      	movs	r2, #2
 8008eea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008eec:	4b21      	ldr	r3, [pc, #132]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ef2:	4b20      	ldr	r3, [pc, #128]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008efe:	4b1d      	ldr	r3, [pc, #116]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f04:	481b      	ldr	r0, [pc, #108]	@ (8008f74 <USBD_LL_Init+0xb8>)
 8008f06:	f7f9 fd0d 	bl	8002924 <HAL_PCD_Init>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008f10:	f7f7 fb92 	bl	8000638 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f1a:	2318      	movs	r3, #24
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f7fb f994 	bl	800424c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f2a:	2358      	movs	r3, #88	@ 0x58
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2180      	movs	r1, #128	@ 0x80
 8008f30:	f7fb f98c 	bl	800424c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f3a:	23c0      	movs	r3, #192	@ 0xc0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2181      	movs	r1, #129	@ 0x81
 8008f40:	f7fb f984 	bl	800424c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2101      	movs	r1, #1
 8008f52:	f7fb f97b 	bl	800424c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f60:	2200      	movs	r2, #0
 8008f62:	2182      	movs	r1, #130	@ 0x82
 8008f64:	f7fb f972 	bl	800424c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000f10 	.word	0x20000f10
 8008f78:	40005c00 	.word	0x40005c00

08008f7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fd94 	bl	8002ac0 <HAL_PCD_Start>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f97e 	bl	80092a0 <USBD_Get_USB_Status>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	4608      	mov	r0, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	70fb      	strb	r3, [r7, #3]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70bb      	strb	r3, [r7, #2]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008fda:	78bb      	ldrb	r3, [r7, #2]
 8008fdc:	883a      	ldrh	r2, [r7, #0]
 8008fde:	78f9      	ldrb	r1, [r7, #3]
 8008fe0:	f7f9 fedb 	bl	8002d9a <HAL_PCD_EP_Open>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f958 	bl	80092a0 <USBD_Get_USB_Status>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009018:	78fa      	ldrb	r2, [r7, #3]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7f9 ff1b 	bl	8002e58 <HAL_PCD_EP_Close>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f939 	bl	80092a0 <USBD_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009032:	7bbb      	ldrb	r3, [r7, #14]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7f9 ffc4 	bl	8002fe8 <HAL_PCD_EP_SetStall>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f91a 	bl	80092a0 <USBD_Get_USB_Status>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009070:	7bbb      	ldrb	r3, [r7, #14]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f9 fff7 	bl	800308c <HAL_PCD_EP_ClrStall>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f8fb 	bl	80092a0 <USBD_Get_USB_Status>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da0b      	bge.n	80090ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	440b      	add	r3, r1
 80090e6:	3312      	adds	r3, #18
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	e00b      	b.n	8009104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	440b      	add	r3, r1
 80090fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f7f9 fe0f 	bl	8002d52 <HAL_PCD_SetAddress>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f8b0 	bl	80092a0 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
 800915a:	460b      	mov	r3, r1
 800915c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800916c:	7af9      	ldrb	r1, [r7, #11]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f7f9 ff02 	bl	8002f7a <HAL_PCD_EP_Transmit>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 f88f 	bl	80092a0 <USBD_Get_USB_Status>
 8009182:	4603      	mov	r3, r0
 8009184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009186:	7dbb      	ldrb	r3, [r7, #22]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	607a      	str	r2, [r7, #4]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	460b      	mov	r3, r1
 800919e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80091ae:	7af9      	ldrb	r1, [r7, #11]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	f7f9 fe98 	bl	8002ee8 <HAL_PCD_EP_Receive>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f86e 	bl	80092a0 <USBD_Get_USB_Status>
 80091c4:	4603      	mov	r3, r0
 80091c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f9 feae 	bl	8002f4a <HAL_PCD_EP_GetRxCount>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_PCDEx_LPM_Callback+0x18>
 800920a:	2b01      	cmp	r3, #1
 800920c:	d013      	beq.n	8009236 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800920e:	e023      	b.n	8009258 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7a5b      	ldrb	r3, [r3, #9]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009218:	f000 f83c 	bl	8009294 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800921c:	4b10      	ldr	r3, [pc, #64]	@ (8009260 <HAL_PCDEx_LPM_Callback+0x68>)
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	4a0f      	ldr	r2, [pc, #60]	@ (8009260 <HAL_PCDEx_LPM_Callback+0x68>)
 8009222:	f023 0306 	bic.w	r3, r3, #6
 8009226:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fc40 	bl	8007ab4 <USBD_LL_Resume>
    break;
 8009234:	e010      	b.n	8009258 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fc23 	bl	8007a88 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7a5b      	ldrb	r3, [r3, #9]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d005      	beq.n	8009256 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800924a:	4b05      	ldr	r3, [pc, #20]	@ (8009260 <HAL_PCDEx_LPM_Callback+0x68>)
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	4a04      	ldr	r2, [pc, #16]	@ (8009260 <HAL_PCDEx_LPM_Callback+0x68>)
 8009250:	f043 0306 	orr.w	r3, r3, #6
 8009254:	6113      	str	r3, [r2, #16]
    break;
 8009256:	bf00      	nop
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	e000ed00 	.word	0xe000ed00

08009264 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800926c:	4b03      	ldr	r3, [pc, #12]	@ (800927c <USBD_static_malloc+0x18>)
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	200011ec 	.word	0x200011ec

08009280 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009298:	f7f7 f862 	bl	8000360 <SystemClock_Config>
}
 800929c:	bf00      	nop
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d817      	bhi.n	80092e4 <USBD_Get_USB_Status+0x44>
 80092b4:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <USBD_Get_USB_Status+0x1c>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	080092d3 	.word	0x080092d3
 80092c4:	080092d9 	.word	0x080092d9
 80092c8:	080092df 	.word	0x080092df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
    break;
 80092d0:	e00b      	b.n	80092ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092d2:	2303      	movs	r3, #3
 80092d4:	73fb      	strb	r3, [r7, #15]
    break;
 80092d6:	e008      	b.n	80092ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d8:	2301      	movs	r3, #1
 80092da:	73fb      	strb	r3, [r7, #15]
    break;
 80092dc:	e005      	b.n	80092ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	73fb      	strb	r3, [r7, #15]
    break;
 80092e2:	e002      	b.n	80092ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]
    break;
 80092e8:	bf00      	nop
  }
  return usb_status;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <memset>:
 80092f8:	4402      	add	r2, r0
 80092fa:	4603      	mov	r3, r0
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d100      	bne.n	8009302 <memset+0xa>
 8009300:	4770      	bx	lr
 8009302:	f803 1b01 	strb.w	r1, [r3], #1
 8009306:	e7f9      	b.n	80092fc <memset+0x4>

08009308 <strncmp>:
 8009308:	b510      	push	{r4, lr}
 800930a:	b16a      	cbz	r2, 8009328 <strncmp+0x20>
 800930c:	3901      	subs	r1, #1
 800930e:	1884      	adds	r4, r0, r2
 8009310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009314:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009318:	429a      	cmp	r2, r3
 800931a:	d103      	bne.n	8009324 <strncmp+0x1c>
 800931c:	42a0      	cmp	r0, r4
 800931e:	d001      	beq.n	8009324 <strncmp+0x1c>
 8009320:	2a00      	cmp	r2, #0
 8009322:	d1f5      	bne.n	8009310 <strncmp+0x8>
 8009324:	1ad0      	subs	r0, r2, r3
 8009326:	bd10      	pop	{r4, pc}
 8009328:	4610      	mov	r0, r2
 800932a:	e7fc      	b.n	8009326 <strncmp+0x1e>

0800932c <__libc_init_array>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	4d0d      	ldr	r5, [pc, #52]	@ (8009364 <__libc_init_array+0x38>)
 8009330:	4c0d      	ldr	r4, [pc, #52]	@ (8009368 <__libc_init_array+0x3c>)
 8009332:	1b64      	subs	r4, r4, r5
 8009334:	10a4      	asrs	r4, r4, #2
 8009336:	2600      	movs	r6, #0
 8009338:	42a6      	cmp	r6, r4
 800933a:	d109      	bne.n	8009350 <__libc_init_array+0x24>
 800933c:	4d0b      	ldr	r5, [pc, #44]	@ (800936c <__libc_init_array+0x40>)
 800933e:	4c0c      	ldr	r4, [pc, #48]	@ (8009370 <__libc_init_array+0x44>)
 8009340:	f000 f818 	bl	8009374 <_init>
 8009344:	1b64      	subs	r4, r4, r5
 8009346:	10a4      	asrs	r4, r4, #2
 8009348:	2600      	movs	r6, #0
 800934a:	42a6      	cmp	r6, r4
 800934c:	d105      	bne.n	800935a <__libc_init_array+0x2e>
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	f855 3b04 	ldr.w	r3, [r5], #4
 8009354:	4798      	blx	r3
 8009356:	3601      	adds	r6, #1
 8009358:	e7ee      	b.n	8009338 <__libc_init_array+0xc>
 800935a:	f855 3b04 	ldr.w	r3, [r5], #4
 800935e:	4798      	blx	r3
 8009360:	3601      	adds	r6, #1
 8009362:	e7f2      	b.n	800934a <__libc_init_array+0x1e>
 8009364:	0800941c 	.word	0x0800941c
 8009368:	0800941c 	.word	0x0800941c
 800936c:	0800941c 	.word	0x0800941c
 8009370:	08009420 	.word	0x08009420

08009374 <_init>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr

08009380 <_fini>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr
