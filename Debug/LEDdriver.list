
LEDdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009340  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08009518  08009518  0000a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c4  080096c4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080096c4  080096c4  0000b1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080096c4  080096c4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c4  080096c4  0000a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080096cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c0  200001d4  080098a0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  080098a0  0000b594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155f9  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fa  00000000  00000000  000207fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00023ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d38  00000000  00000000  000251b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021653  00000000  00000000  00025ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015713  00000000  00000000  00047543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd162  00000000  00000000  0005cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129db8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa4  00000000  00000000  00129dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009500 	.word	0x08009500

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	08009500 	.word	0x08009500

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb36 	bl	800088e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f897 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USB_Device_Init();
 8000226:	f008 fafd 	bl	8008824 <MX_USB_Device_Init>
  MX_GPIO_Init();
 800022a:	f000 f9b5 	bl	8000598 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022e:	f000 f8df 	bl	80003f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000232:	f000 f977 	bl	8000524 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000236:	2100      	movs	r1, #0
 8000238:	4839      	ldr	r0, [pc, #228]	@ (8000320 <main+0x108>)
 800023a:	f001 ff7f 	bl	800213c <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800023e:	4839      	ldr	r0, [pc, #228]	@ (8000324 <main+0x10c>)
 8000240:	f000 ff68 	bl	8001114 <HAL_ADC_Start>

	      // IMON (PA0)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000244:	f04f 31ff 	mov.w	r1, #4294967295
 8000248:	4836      	ldr	r0, [pc, #216]	@ (8000324 <main+0x10c>)
 800024a:	f001 f81f 	bl	800128c <HAL_ADC_PollForConversion>
	      imon_raw = HAL_ADC_GetValue(&hadc1);
 800024e:	4835      	ldr	r0, [pc, #212]	@ (8000324 <main+0x10c>)
 8000250:	f001 f8f4 	bl	800143c <HAL_ADC_GetValue>
 8000254:	4603      	mov	r3, r0
 8000256:	4a34      	ldr	r2, [pc, #208]	@ (8000328 <main+0x110>)
 8000258:	6013      	str	r3, [r2, #0]
	      float v_imon = (imon_raw * 3.3f) / 4095.0f;
 800025a:	4b33      	ldr	r3, [pc, #204]	@ (8000328 <main+0x110>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	ee07 3a90 	vmov	s15, r3
 8000262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000266:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800032c <main+0x114>
 800026a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800026e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000330 <main+0x118>
 8000272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000276:	edc7 7a01 	vstr	s15, [r7, #4]
	      imon_current = v_imon / (14.0f * RCS_VALUE);
 800027a:	ed97 7a01 	vldr	s14, [r7, #4]
 800027e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000334 <main+0x11c>
 8000282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000286:	4b2c      	ldr	r3, [pc, #176]	@ (8000338 <main+0x120>)
 8000288:	edc3 7a00 	vstr	s15, [r3]

	      // VOUT (PA1)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800028c:	f04f 31ff 	mov.w	r1, #4294967295
 8000290:	4824      	ldr	r0, [pc, #144]	@ (8000324 <main+0x10c>)
 8000292:	f000 fffb 	bl	800128c <HAL_ADC_PollForConversion>
	      vout_raw = HAL_ADC_GetValue(&hadc1);
 8000296:	4823      	ldr	r0, [pc, #140]	@ (8000324 <main+0x10c>)
 8000298:	f001 f8d0 	bl	800143c <HAL_ADC_GetValue>
 800029c:	4603      	mov	r3, r0
 800029e:	4a27      	ldr	r2, [pc, #156]	@ (800033c <main+0x124>)
 80002a0:	6013      	str	r3, [r2, #0]
	      float v_vout_scaled = (vout_raw * 3.3f) / 4095.0f;
 80002a2:	4b26      	ldr	r3, [pc, #152]	@ (800033c <main+0x124>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	ee07 3a90 	vmov	s15, r3
 80002aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800032c <main+0x114>
 80002b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002b6:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000330 <main+0x118>
 80002ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002be:	edc7 7a00 	vstr	s15, [r7]
	      vout_voltage = (v_vout_scaled / 0.03226f) * VOUT_CAL_FACTOR;
 80002c2:	ed97 7a00 	vldr	s14, [r7]
 80002c6:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000340 <main+0x128>
 80002ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000344 <main+0x12c>
 80002d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <main+0x130>)
 80002d8:	edc3 7a00 	vstr	s15, [r3]

	      // POT (PA2)
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002dc:	f04f 31ff 	mov.w	r1, #4294967295
 80002e0:	4810      	ldr	r0, [pc, #64]	@ (8000324 <main+0x10c>)
 80002e2:	f000 ffd3 	bl	800128c <HAL_ADC_PollForConversion>
	      pot_value = HAL_ADC_GetValue(&hadc1);
 80002e6:	480f      	ldr	r0, [pc, #60]	@ (8000324 <main+0x10c>)
 80002e8:	f001 f8a8 	bl	800143c <HAL_ADC_GetValue>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a17      	ldr	r2, [pc, #92]	@ (800034c <main+0x134>)
 80002f0:	6013      	str	r3, [r2, #0]
	      pot_voltage = (pot_value * 3.3f) / 4095.0f;
 80002f2:	4b16      	ldr	r3, [pc, #88]	@ (800034c <main+0x134>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800032c <main+0x114>
 8000302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000306:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000330 <main+0x118>
 800030a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <main+0x138>)
 8000310:	edc3 7a00 	vstr	s15, [r3]

	      // Send POT value to DAC (12-bit right aligned)
	//      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pot_value);
	   //   HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2600);

	      HAL_Delay(10);
 8000314:	200a      	movs	r0, #10
 8000316:	f000 fb2b 	bl	8000970 <HAL_Delay>
  {
 800031a:	bf00      	nop
 800031c:	e78f      	b.n	800023e <main+0x26>
 800031e:	bf00      	nop
 8000320:	2000025c 	.word	0x2000025c
 8000324:	200001f0 	.word	0x200001f0
 8000328:	20000280 	.word	0x20000280
 800032c:	40533333 	.word	0x40533333
 8000330:	457ff000 	.word	0x457ff000
 8000334:	4093d70b 	.word	0x4093d70b
 8000338:	20000284 	.word	0x20000284
 800033c:	20000278 	.word	0x20000278
 8000340:	3d042310 	.word	0x3d042310
 8000344:	3f974bc7 	.word	0x3f974bc7
 8000348:	2000027c 	.word	0x2000027c
 800034c:	20000270 	.word	0x20000270
 8000350:	20000274 	.word	0x20000274

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	@ 0x50
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2238      	movs	r2, #56	@ 0x38
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f009 f888 	bl	8009478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800037a:	f003 ffcf 	bl	800431c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800037e:	2322      	movs	r3, #34	@ 0x22
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000386:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2340      	movs	r3, #64	@ 0x40
 800038a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000390:	2302      	movs	r3, #2
 8000392:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000394:	2302      	movs	r3, #2
 8000396:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000398:	2301      	movs	r3, #1
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800039c:	230c      	movs	r3, #12
 800039e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003a4:	2304      	movs	r3, #4
 80003a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f004 f867 	bl	8004484 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003bc:	f000 f936 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2303      	movs	r3, #3
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2103      	movs	r1, #3
 80003d8:	4618      	mov	r0, r3
 80003da:	f004 fb65 	bl	8004aa8 <HAL_RCC_ClockConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003e4:	f000 f922 	bl	800062c <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3750      	adds	r7, #80	@ 0x50
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08c      	sub	sp, #48	@ 0x30
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2220      	movs	r2, #32
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f009 f835 	bl	8009478 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800040e:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000410:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000416:	4b3f      	ldr	r3, [pc, #252]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000418:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800041c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	4b3d      	ldr	r3, [pc, #244]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b3b      	ldr	r3, [pc, #236]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800042a:	4b3a      	ldr	r3, [pc, #232]	@ (8000514 <MX_ADC1_Init+0x124>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000430:	4b38      	ldr	r3, [pc, #224]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000432:	2201      	movs	r2, #1
 8000434:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000436:	4b37      	ldr	r3, [pc, #220]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000438:	2204      	movs	r2, #4
 800043a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800043c:	4b35      	ldr	r3, [pc, #212]	@ (8000514 <MX_ADC1_Init+0x124>)
 800043e:	2200      	movs	r2, #0
 8000440:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000442:	4b34      	ldr	r3, [pc, #208]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000444:	2200      	movs	r2, #0
 8000446:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000448:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <MX_ADC1_Init+0x124>)
 800044a:	2204      	movs	r2, #4
 800044c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800044e:	4b31      	ldr	r3, [pc, #196]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000456:	4b2f      	ldr	r3, [pc, #188]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000458:	2200      	movs	r2, #0
 800045a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800045c:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <MX_ADC1_Init+0x124>)
 800045e:	2200      	movs	r2, #0
 8000460:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000462:	4b2c      	ldr	r3, [pc, #176]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000464:	2200      	movs	r2, #0
 8000466:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800046a:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <MX_ADC1_Init+0x124>)
 800046c:	2200      	movs	r2, #0
 800046e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000470:	4b28      	ldr	r3, [pc, #160]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000472:	2200      	movs	r2, #0
 8000474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000478:	4826      	ldr	r0, [pc, #152]	@ (8000514 <MX_ADC1_Init+0x124>)
 800047a:	f000 fcc7 	bl	8000e0c <HAL_ADC_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000484:	f000 f8d2 	bl	800062c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800048c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000490:	4619      	mov	r1, r3
 8000492:	4820      	ldr	r0, [pc, #128]	@ (8000514 <MX_ADC1_Init+0x124>)
 8000494:	f001 fc7c 	bl	8001d90 <HAL_ADCEx_MultiModeConfigChannel>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800049e:	f000 f8c5 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <MX_ADC1_Init+0x128>)
 80004a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004a6:	230c      	movs	r3, #12
 80004a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004aa:	2306      	movs	r3, #6
 80004ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ae:	237f      	movs	r3, #127	@ 0x7f
 80004b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b2:	2304      	movs	r3, #4
 80004b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	4815      	ldr	r0, [pc, #84]	@ (8000514 <MX_ADC1_Init+0x124>)
 80004c0:	f000 ffca 	bl	8001458 <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004ca:	f000 f8af 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004ce:	4b13      	ldr	r3, [pc, #76]	@ (800051c <MX_ADC1_Init+0x12c>)
 80004d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004d2:	2312      	movs	r3, #18
 80004d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004d6:	2307      	movs	r3, #7
 80004d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	@ (8000514 <MX_ADC1_Init+0x124>)
 80004e0:	f000 ffba 	bl	8001458 <HAL_ADC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80004ea:	f000 f89f 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_ADC1_Init+0x130>)
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004f2:	2318      	movs	r3, #24
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	@ (8000514 <MX_ADC1_Init+0x124>)
 80004fc:	f000 ffac 	bl	8001458 <HAL_ADC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000506:	f000 f891 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3730      	adds	r7, #48	@ 0x30
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200001f0 	.word	0x200001f0
 8000518:	04300002 	.word	0x04300002
 800051c:	08600004 	.word	0x08600004
 8000520:	0c900008 	.word	0x0c900008

08000524 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	@ 0x30
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2230      	movs	r2, #48	@ 0x30
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 ffa1 	bl	8009478 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_DAC1_Init+0x6c>)
 8000538:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <MX_DAC1_Init+0x70>)
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800053c:	4814      	ldr	r0, [pc, #80]	@ (8000590 <MX_DAC1_Init+0x6c>)
 800053e:	f001 fdda 	bl	80020f6 <HAL_DAC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000548:	f000 f870 	bl	800062c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800054c:	2302      	movs	r3, #2
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_DAC1_Init+0x6c>)
 8000578:	f001 fe7a 	bl	8002270 <HAL_DAC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000582:	f000 f853 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3730      	adds	r7, #48	@ 0x30
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000025c 	.word	0x2000025c
 8000594:	50000800 	.word	0x50000800

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x8c>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	4811      	ldr	r0, [pc, #68]	@ (8000628 <MX_GPIO_Init+0x90>)
 80005e4:	f002 f980 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nFLT_Pin */
  GPIO_InitStruct.Pin = nFLT_Pin;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nFLT_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0x90>)
 80005fc:	f001 fff2 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000600:	2308      	movs	r3, #8
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <MX_GPIO_Init+0x90>)
 8000618:	f001 ffe4 	bl	80025e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <HAL_MspInit+0x44>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <HAL_MspInit+0x44>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6613      	str	r3, [r2, #96]	@ 0x60
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <HAL_MspInit+0x44>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065a:	4a08      	ldr	r2, [pc, #32]	@ (800067c <HAL_MspInit+0x44>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	@ 0x58
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800066e:	f003 fef9 	bl	8004464 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	@ 0x68
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	2244      	movs	r2, #68	@ 0x44
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f008 fee9 	bl	8009478 <memset>
  if(hadc->Instance==ADC1)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ae:	d134      	bne.n	800071a <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fbe1 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006cc:	f7ff ffae 	bl	800062c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IMON_Pin|Vout_Pin|POT_Pin;
 8000700:	2307      	movs	r3, #7
 8000702:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000704:	2303      	movs	r3, #3
 8000706:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f001 ff65 	bl	80025e4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800071a:	bf00      	nop
 800071c:	3768      	adds	r7, #104	@ 0x68
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a15      	ldr	r2, [pc, #84]	@ (800079c <HAL_DAC_MspInit+0x74>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d124      	bne.n	8000794 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 8000750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_DAC_MspInit+0x78>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 800077a:	2310      	movs	r3, #16
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077e:	2303      	movs	r3, #3
 8000780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f001 ff28 	bl	80025e4 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	50000800 	.word	0x50000800
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f89b 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <USB_LP_IRQHandler+0x10>)
 800080a:	f002 f975 	bl	8002af8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000f60 	.word	0x20000f60

08000818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f008 fe25 	bl	80094b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fcd3 	bl	8000218 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   r0, =_estack
 8000874:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000880:	080096cc 	.word	0x080096cc
  ldr r2, =_sbss
 8000884:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000888:	20001594 	.word	0x20001594

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>

0800088e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f001 fbed 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f80e 	bl	80008c0 <HAL_InitTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	e001      	b.n	80008b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b0:	f7ff fec2 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b4:	79fb      	ldrb	r3, [r7, #7]

}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <HAL_InitTick+0x68>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d022      	beq.n	800091a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_InitTick+0x6c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_InitTick+0x68>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fbf8 	bl	80020de <HAL_SYSTICK_Config>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10f      	bne.n	8000914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d809      	bhi.n	800090e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f001 fbc4 	bl	800208e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_InitTick+0x70>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e007      	b.n	800091e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e004      	b.n	800091e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e001      	b.n	800091e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4413      	add	r3, r2
 8000942:	4a03      	ldr	r2, [pc, #12]	@ (8000950 <HAL_IncTick+0x1c>)
 8000944:	6013      	str	r3, [r2, #0]
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20000288 	.word	0x20000288
 8000954:	20000008 	.word	0x20000008

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000288 	.word	0x20000288

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d004      	beq.n	8000994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_Delay+0x40>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4413      	add	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000994:	bf00      	nop
 8000996:	f7ff ffdf 	bl	8000958 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d8f7      	bhi.n	8000996 <HAL_Delay+0x26>
  {
  }
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000008 	.word	0x20000008

080009b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	609a      	str	r2, [r3, #8]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3360      	adds	r3, #96	@ 0x60
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <LL_ADC_SetOffset+0x44>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a54:	bf00      	nop
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	03fff000 	.word	0x03fff000

08000a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3360      	adds	r3, #96	@ 0x60
 8000a72:	461a      	mov	r2, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3360      	adds	r3, #96	@ 0x60
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000aba:	bf00      	nop
 8000abc:	371c      	adds	r7, #28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3360      	adds	r3, #96	@ 0x60
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000af0:	bf00      	nop
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3360      	adds	r3, #96	@ 0x60
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	431a      	orrs	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b26:	bf00      	nop
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	615a      	str	r2, [r3, #20]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3330      	adds	r3, #48	@ 0x30
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	4413      	add	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	211f      	movs	r1, #31
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0e9b      	lsrs	r3, r3, #26
 8000bb6:	f003 011f 	and.w	r1, r3, #31
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f003 031f 	and.w	r3, r3, #31
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b087      	sub	sp, #28
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3314      	adds	r3, #20
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	0e5b      	lsrs	r3, r3, #25
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	4413      	add	r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	0d1b      	lsrs	r3, r3, #20
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	2107      	movs	r1, #7
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	0d1b      	lsrs	r3, r3, #20
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c20:	bf00      	nop
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0318 	and.w	r3, r3, #24
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c50:	40d9      	lsrs	r1, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	400b      	ands	r3, r1
 8000c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	0007ffff 	.word	0x0007ffff

08000c74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 031f 	and.w	r3, r3, #31
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	6093      	str	r3, [r2, #8]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ce4:	d101      	bne.n	8000cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d34:	d101      	bne.n	8000d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <LL_ADC_IsEnabled+0x18>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <LL_ADC_IsEnabled+0x1a>
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000da6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000daa:	f043 0204 	orr.w	r2, r3, #4
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d101      	bne.n	8000dfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e167      	b.n	80010f6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fc23 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff3f 	bl	8000cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff25 	bl	8000cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5a 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d115      	bne.n	8000e9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff3e 	bl	8000cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001100 <HAL_ADC_Init+0x2f4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	099b      	lsrs	r3, r3, #6
 8000e82:	4aa0      	ldr	r2, [pc, #640]	@ (8001104 <HAL_ADC_Init+0x2f8>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e90:	e002      	b.n	8000e98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f9      	bne.n	8000e92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff3c 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10d      	bne.n	8000eca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eb2:	f043 0210 	orr.w	r2, r3, #16
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff75 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 8000ed4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8100 	bne.w	80010e4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80fc 	bne.w	80010e4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ef4:	f043 0202 	orr.w	r2, r3, #2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff35 	bl	8000d70 <LL_ADC_IsEnabled>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d111      	bne.n	8000f30 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000f10:	f7ff ff2e 	bl	8000d70 <LL_ADC_IsEnabled>
 8000f14:	4604      	mov	r4, r0
 8000f16:	487c      	ldr	r0, [pc, #496]	@ (8001108 <HAL_ADC_Init+0x2fc>)
 8000f18:	f7ff ff2a 	bl	8000d70 <LL_ADC_IsEnabled>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d105      	bne.n	8000f30 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4878      	ldr	r0, [pc, #480]	@ (800110c <HAL_ADC_Init+0x300>)
 8000f2c:	f7ff fd42 	bl	80009b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7f5b      	ldrb	r3, [r3, #29]
 8000f34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d106      	bne.n	8000f6c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f62:	3b01      	subs	r3, #1
 8000f64:	045b      	lsls	r3, r3, #17
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d009      	beq.n	8000f88 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	4b60      	ldr	r3, [pc, #384]	@ (8001110 <HAL_ADC_Init+0x304>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff14 	bl	8000de4 <LL_ADC_INJ_IsConversionOngoing>
 8000fbc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d16d      	bne.n	80010a0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d16a      	bne.n	80010a0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fe6:	f023 0302 	bic.w	r3, r3, #2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	69b9      	ldr	r1, [r7, #24]
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d017      	beq.n	800102c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800100a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001014:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6911      	ldr	r1, [r2, #16]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	430b      	orrs	r3, r1
 8001026:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800102a:	e013      	b.n	8001054 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800103a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800104c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001050:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800105a:	2b01      	cmp	r3, #1
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001074:	4311      	orrs	r1, r2
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800107a:	4311      	orrs	r1, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001080:	430a      	orrs	r2, r1
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	e007      	b.n	80010a0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10c      	bne.n	80010c2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f023 010f 	bic.w	r1, r3, #15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c0:	e007      	b.n	80010d2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 020f 	bic.w	r2, r2, #15
 80010d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010e2:	e007      	b.n	80010f4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e8:	f043 0210 	orr.w	r2, r3, #16
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000
 8001104:	053e2d63 	.word	0x053e2d63
 8001108:	50000100 	.word	0x50000100
 800110c:	50000300 	.word	0x50000300
 8001110:	fff04007 	.word	0xfff04007

08001114 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800111c:	4859      	ldr	r0, [pc, #356]	@ (8001284 <HAL_ADC_Start+0x170>)
 800111e:	f7ff fda9 	bl	8000c74 <LL_ADC_GetMultimode>
 8001122:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe48 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 809f 	bne.w	8001274 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_ADC_Start+0x30>
 8001140:	2302      	movs	r3, #2
 8001142:	e09a      	b.n	800127a <HAL_ADC_Start+0x166>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fd73 	bl	8001c38 <ADC_Enable>
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 8086 	bne.w	800126a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001162:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a44      	ldr	r2, [pc, #272]	@ (8001288 <HAL_ADC_Start+0x174>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d002      	beq.n	8001182 <HAL_ADC_Start+0x6e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	e001      	b.n	8001186 <HAL_ADC_Start+0x72>
 8001182:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	4293      	cmp	r3, r2
 800118c:	d002      	beq.n	8001194 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d105      	bne.n	80011a0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011ac:	d106      	bne.n	80011bc <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f023 0206 	bic.w	r2, r3, #6
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80011ba:	e002      	b.n	80011c2 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	221c      	movs	r2, #28
 80011c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <HAL_ADC_Start+0x174>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d002      	beq.n	80011e2 <HAL_ADC_Start+0xce>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	e001      	b.n	80011e6 <HAL_ADC_Start+0xd2>
 80011e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d008      	beq.n	8001200 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d002      	beq.n	8001200 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d114      	bne.n	800122a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001212:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001216:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdb7 	bl	8000d96 <LL_ADC_REG_StartConversion>
 8001228:	e026      	b.n	8001278 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <HAL_ADC_Start+0x174>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d002      	beq.n	8001246 <HAL_ADC_Start+0x132>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	e001      	b.n	800124a <HAL_ADC_Start+0x136>
 8001246:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800124a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00f      	beq.n	8001278 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800125c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001260:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001268:	e006      	b.n	8001278 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001272:	e001      	b.n	8001278 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001274:	2302      	movs	r3, #2
 8001276:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001278:	7dfb      	ldrb	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	50000300 	.word	0x50000300
 8001288:	50000100 	.word	0x50000100

0800128c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001296:	4867      	ldr	r0, [pc, #412]	@ (8001434 <HAL_ADC_PollForConversion+0x1a8>)
 8001298:	f7ff fcec 	bl	8000c74 <LL_ADC_GetMultimode>
 800129c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d102      	bne.n	80012ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80012a6:	2308      	movs	r3, #8
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e02a      	b.n	8001302 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d002      	beq.n	80012be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0a6      	b.n	800142a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012dc:	2304      	movs	r3, #4
 80012de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80012e0:	e00f      	b.n	8001302 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80012e2:	4854      	ldr	r0, [pc, #336]	@ (8001434 <HAL_ADC_PollForConversion+0x1a8>)
 80012e4:	f7ff fcd4 	bl	8000c90 <LL_ADC_GetMultiDMATransfer>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e095      	b.n	800142a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012fe:	2304      	movs	r3, #4
 8001300:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001302:	f7ff fb29 	bl	8000958 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001308:	e021      	b.n	800134e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d01d      	beq.n	800134e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001312:	f7ff fb21 	bl	8000958 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d302      	bcc.n	8001328 <HAL_ADC_PollForConversion+0x9c>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d112      	bne.n	800134e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10b      	bne.n	800134e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e06d      	b.n	800142a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0d6      	beq.n	800130a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001360:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fbf3 	bl	8000b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01c      	beq.n	80013b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7f5b      	ldrb	r3, [r3, #29]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d118      	bne.n	80013b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b08      	cmp	r3, #8
 800138c:	d111      	bne.n	80013b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001392:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <HAL_ADC_PollForConversion+0x1ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_PollForConversion+0x136>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	e001      	b.n	80013c6 <HAL_ADC_PollForConversion+0x13a>
 80013c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d008      	beq.n	80013e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d002      	beq.n	80013e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b09      	cmp	r3, #9
 80013de:	d104      	bne.n	80013ea <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e00d      	b.n	8001406 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_ADC_PollForConversion+0x1ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d002      	beq.n	80013fa <HAL_ADC_PollForConversion+0x16e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e001      	b.n	80013fe <HAL_ADC_PollForConversion+0x172>
 80013fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d104      	bne.n	8001416 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2208      	movs	r2, #8
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	220c      	movs	r2, #12
 8001426:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	50000300 	.word	0x50000300
 8001438:	50000100 	.word	0x50000100

0800143c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0b6      	sub	sp, #216	@ 0xd8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x22>
 8001476:	2302      	movs	r3, #2
 8001478:	e3c8      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x7b4>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc99 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 83ad 	bne.w	8001bee <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	f7ff fb6c 	bl	8000b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc87 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 80014b0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fc93 	bl	8000de4 <LL_ADC_INJ_IsConversionOngoing>
 80014be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 81d9 	bne.w	800187e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 81d4 	bne.w	800187e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014de:	d10f      	bne.n	8001500 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb73 	bl	8000bd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fb1a 	bl	8000b32 <LL_ADC_SetSamplingTimeCommonConfig>
 80014fe:	e00e      	b.n	800151e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	461a      	mov	r2, r3
 800150e:	f7ff fb62 	bl	8000bd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fb0a 	bl	8000b32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d022      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6919      	ldr	r1, [r3, #16]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001550:	f7ff fa64 	bl	8000a1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	461a      	mov	r2, r3
 8001562:	f7ff fab0 	bl	8000ac6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <HAL_ADC_ConfigChannel+0x124>
 8001576:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800157a:	e000      	b.n	800157e <HAL_ADC_ConfigChannel+0x126>
 800157c:	2300      	movs	r3, #0
 800157e:	461a      	mov	r2, r3
 8001580:	f7ff fabc 	bl	8000afc <LL_ADC_SetOffsetSaturation>
 8001584:	e17b      	b.n	800187e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fa69 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10a      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x15a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fa5e 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	e01e      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x198>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa53 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80015e0:	2320      	movs	r3, #32
 80015e2:	e004      	b.n	80015ee <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80015e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1b0>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0e9b      	lsrs	r3, r3, #26
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	e018      	b.n	800163a <HAL_ADC_ConfigChannel+0x1e2>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800161c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800162c:	2320      	movs	r3, #32
 800162e:	e004      	b.n	800163a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800163a:	429a      	cmp	r2, r3
 800163c:	d106      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa22 	bl	8000a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fa06 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10a      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x220>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff f9fb 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	0e9b      	lsrs	r3, r3, #26
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	e01e      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x25e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f9f0 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800169e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80016a6:	2320      	movs	r3, #32
 80016a8:	e004      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80016aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x276>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e9b      	lsrs	r3, r3, #26
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	e018      	b.n	8001700 <HAL_ADC_ConfigChannel+0x2a8>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80016e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80016ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80016f2:	2320      	movs	r3, #32
 80016f4:	e004      	b.n	8001700 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80016f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001700:	429a      	cmp	r2, r3
 8001702:	d106      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	2101      	movs	r1, #1
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f9bf 	bl	8000a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2102      	movs	r1, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f9a3 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <HAL_ADC_ConfigChannel+0x2e6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f998 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	0e9b      	lsrs	r3, r3, #26
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	e01e      	b.n	800177c <HAL_ADC_ConfigChannel+0x324>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2102      	movs	r1, #2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff f98d 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800175c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001760:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800176c:	2320      	movs	r3, #32
 800176e:	e004      	b.n	800177a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x33c>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	e016      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x36a>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80017a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80017ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e004      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80017b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	2102      	movs	r1, #2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f95e 	bl	8000a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2103      	movs	r1, #3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f942 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10a      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x3a8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2103      	movs	r1, #3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f937 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	f003 021f 	and.w	r2, r3, #31
 80017fe:	e017      	b.n	8001830 <HAL_ADC_ConfigChannel+0x3d8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2103      	movs	r1, #3
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f92c 	bl	8000a64 <LL_ADC_GetOffsetChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800181a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800181c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001822:	2320      	movs	r3, #32
 8001824:	e003      	b.n	800182e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001826:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x3f0>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0e9b      	lsrs	r3, r3, #26
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	e011      	b.n	800186c <HAL_ADC_ConfigChannel+0x414>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001858:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800185a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e003      	b.n	800186c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	2103      	movs	r1, #3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f909 	bl	8000a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa74 	bl	8000d70 <LL_ADC_IsEnabled>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 8140 	bne.w	8001b10 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	461a      	mov	r2, r3
 800189e:	f7ff f9c5 	bl	8000c2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a8f      	ldr	r2, [pc, #572]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x68c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	f040 8131 	bne.w	8001b10 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x47e>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	3301      	adds	r3, #1
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	bf94      	ite	ls
 80018ce:	2301      	movls	r3, #1
 80018d0:	2300      	movhi	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	e019      	b.n	800190a <HAL_ADC_ConfigChannel+0x4b2>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80018e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80018e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e003      	b.n	80018fa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80018f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b09      	cmp	r3, #9
 8001902:	bf94      	ite	ls
 8001904:	2301      	movls	r3, #1
 8001906:	2300      	movhi	r3, #0
 8001908:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800190a:	2b00      	cmp	r3, #0
 800190c:	d079      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <HAL_ADC_ConfigChannel+0x4d2>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0e9b      	lsrs	r3, r3, #26
 8001920:	3301      	adds	r3, #1
 8001922:	069b      	lsls	r3, r3, #26
 8001924:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001928:	e015      	b.n	8001956 <HAL_ADC_ConfigChannel+0x4fe>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800193a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e003      	b.n	800194e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	069b      	lsls	r3, r3, #26
 8001952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x51e>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	3301      	adds	r3, #1
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	e017      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x54e>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001986:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e003      	b.n	800199a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	ea42 0103 	orr.w	r1, r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x574>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 021f 	and.w	r2, r3, #31
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	e018      	b.n	80019fe <HAL_ADC_ConfigChannel+0x5a6>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80019da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80019de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80019e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	f003 021f 	and.w	r2, r3, #31
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fe:	430b      	orrs	r3, r1
 8001a00:	e081      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x5c6>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	3301      	adds	r3, #1
 8001a16:	069b      	lsls	r3, r3, #26
 8001a18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1c:	e015      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x5f2>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e003      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	069b      	lsls	r3, r3, #26
 8001a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x612>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0e9b      	lsrs	r3, r3, #26
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	e017      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x642>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	61fb      	str	r3, [r7, #28]
  return result;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	ea42 0103 	orr.w	r1, r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x66e>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0e9b      	lsrs	r3, r3, #26
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	3b1e      	subs	r3, #30
 8001abe:	051b      	lsls	r3, r3, #20
 8001ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	e01e      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x6ac>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	613b      	str	r3, [r7, #16]
  return result;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d104      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e006      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x698>
 8001ae2:	bf00      	nop
 8001ae4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	051b      	lsls	r3, r3, #20
 8001b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f863 	bl	8000bd6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b3f      	ldr	r3, [pc, #252]	@ (8001c14 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d071      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b1c:	483e      	ldr	r0, [pc, #248]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b1e:	f7fe ff6f 	bl	8000a00 <LL_ADC_GetCommonPathInternalCh>
 8001b22:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_ConfigChannel+0x6e2>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a3a      	ldr	r2, [pc, #232]	@ (8001c20 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d127      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d121      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b4e:	d157      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482f      	ldr	r0, [pc, #188]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b5c:	f7fe ff3d 	bl	80009da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b60:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b88:	e03a      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_ADC_ConfigChannel+0x7d4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d113      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02a      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4818      	ldr	r0, [pc, #96]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bb6:	f7fe ff10 	bl	80009da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bba:	e021      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d11c      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d116      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	@ (8001c30 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d011      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001be0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be4:	4619      	mov	r1, r3
 8001be6:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001be8:	f7fe fef7 	bl	80009da <LL_ADC_SetCommonPathInternalCh>
 8001bec:	e008      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	f043 0220 	orr.w	r2, r3, #32
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c08:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	37d8      	adds	r7, #216	@ 0xd8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	80080000 	.word	0x80080000
 8001c18:	50000300 	.word	0x50000300
 8001c1c:	c3210000 	.word	0xc3210000
 8001c20:	90c00010 	.word	0x90c00010
 8001c24:	20000000 	.word	0x20000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	c7520000 	.word	0xc7520000
 8001c30:	50000100 	.word	0x50000100
 8001c34:	cb840000 	.word	0xcb840000

08001c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f891 	bl	8000d70 <LL_ADC_IsEnabled>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d169      	bne.n	8001d28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <ADC_Enable+0xfc>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e055      	b.n	8001d2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f860 	bl	8000d48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c88:	482b      	ldr	r0, [pc, #172]	@ (8001d38 <ADC_Enable+0x100>)
 8001c8a:	f7fe feb9 	bl	8000a00 <LL_ADC_GetCommonPathInternalCh>
 8001c8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <ADC_Enable+0x104>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <ADC_Enable+0x108>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb2:	e002      	b.n	8001cba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cc0:	f7fe fe4a 	bl	8000958 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cc6:	e028      	b.n	8001d1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f84f 	bl	8000d70 <LL_ADC_IsEnabled>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f833 	bl	8000d48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce2:	f7fe fe39 	bl	8000958 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d914      	bls.n	8001d1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d00d      	beq.n	8001d1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e007      	b.n	8001d2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d1cf      	bne.n	8001cc8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	8000003f 	.word	0x8000003f
 8001d38:	50000300 	.word	0x50000300
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	053e2d63 	.word	0x053e2d63

08001d44 <LL_ADC_IsEnabled>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_IsEnabled+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_IsEnabled+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_REG_IsConversionOngoing>:
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d101      	bne.n	8001d82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b0a1      	sub	sp, #132	@ 0x84
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e08b      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001db6:	2300      	movs	r3, #0
 8001db8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc6:	d102      	bne.n	8001dce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dc8:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	e001      	b.n	8001dd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e06a      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ffb9 	bl	8001d6a <LL_ADC_REG_IsConversionOngoing>
 8001df8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ffb3 	bl	8001d6a <LL_ADC_REG_IsConversionOngoing>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d14c      	bne.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d149      	bne.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001e12:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d028      	beq.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e2e:	035b      	lsls	r3, r3, #13
 8001e30:	430b      	orrs	r3, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e38:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e3c:	f7ff ff82 	bl	8001d44 <LL_ADC_IsEnabled>
 8001e40:	4604      	mov	r4, r0
 8001e42:	4823      	ldr	r0, [pc, #140]	@ (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e44:	f7ff ff7e 	bl	8001d44 <LL_ADC_IsEnabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4323      	orrs	r3, r4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d133      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e58:	f023 030f 	bic.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	6811      	ldr	r1, [r2, #0]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	6892      	ldr	r2, [r2, #8]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e6a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	e024      	b.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e7e:	f7ff ff61 	bl	8001d44 <LL_ADC_IsEnabled>
 8001e82:	4604      	mov	r4, r0
 8001e84:	4812      	ldr	r0, [pc, #72]	@ (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e86:	f7ff ff5d 	bl	8001d44 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e9a:	f023 030f 	bic.w	r3, r3, #15
 8001e9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ea0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea2:	e009      	b.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001eb6:	e000      	b.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ec2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3784      	adds	r7, #132	@ 0x84
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	50000100 	.word	0x50000100
 8001ed4:	50000300 	.word	0x50000300

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	@ (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff40 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff90 	bl	8001fcc <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5f 	bl	8001f78 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff33 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa4 	bl	8002034 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e014      	b.n	8002132 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	791b      	ldrb	r3, [r3, #4]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe fb05 	bl	8000728 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e056      	b.n	80021fe <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	795b      	ldrb	r3, [r3, #5]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_DAC_Start+0x20>
 8002158:	2302      	movs	r3, #2
 800215a:	e050      	b.n	80021fe <HAL_DAC_Start+0xc2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2201      	movs	r2, #1
 8002176:	409a      	lsls	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002180:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_DAC_Start+0xd0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_DAC_Start+0xd4>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8002192:	e002      	b.n	800219a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10f      	bne.n	80021c6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d11d      	bne.n	80021f0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	e014      	b.n	80021f0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2102      	movs	r1, #2
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000
 8002210:	053e2d63 	.word	0x053e2d63

08002214 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e018      	b.n	8002262 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3308      	adds	r3, #8
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e004      	b.n	8002258 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3314      	adds	r3, #20
 8002256:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_DAC_ConfigChannel+0x1c>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e1a1      	b.n	80025d4 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	795b      	ldrb	r3, [r3, #5]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_DAC_ConfigChannel+0x32>
 800229e:	2302      	movs	r3, #2
 80022a0:	e198      	b.n	80025d4 <HAL_DAC_ConfigChannel+0x364>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2202      	movs	r2, #2
 80022ac:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d17a      	bne.n	80023ac <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022b6:	f7fe fb4f 	bl	8000958 <HAL_GetTick>
 80022ba:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d13d      	bne.n	800233e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022c2:	e018      	b.n	80022f6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022c4:	f7fe fb48 	bl	8000958 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d911      	bls.n	80022f6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f043 0208 	orr.w	r2, r3, #8
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2203      	movs	r2, #3
 80022f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e16e      	b.n	80025d4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1df      	bne.n	80022c4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
 800230e:	e020      	b.n	8002352 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002310:	f7fe fb22 	bl	8000958 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d90f      	bls.n	800233e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	da0a      	bge.n	800233e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f043 0208 	orr.w	r2, r3, #8
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2203      	movs	r2, #3
 8002338:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e14a      	b.n	80025d4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	dbe3      	blt.n	8002310 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	ea02 0103 	and.w	r1, r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	21ff      	movs	r1, #255	@ 0xff
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	ea02 0103 	and.w	r1, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d11d      	bne.n	80023f0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	221f      	movs	r2, #31
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	4013      	ands	r3, r2
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e4:	4313      	orrs	r3, r2
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2207      	movs	r2, #7
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002408:	4013      	ands	r3, r2
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	e00f      	b.n	800243a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d102      	bne.n	8002428 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002422:	2301      	movs	r3, #1
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e008      	b.n	800243a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002430:	2301      	movs	r3, #1
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	e001      	b.n	800243a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245c:	4013      	ands	r3, r2
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d102      	bne.n	800246e <HAL_DAC_ConfigChannel+0x1fe>
 8002468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246c:	e000      	b.n	8002470 <HAL_DAC_ConfigChannel+0x200>
 800246e:	2300      	movs	r3, #0
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002488:	4013      	ands	r3, r2
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	795b      	ldrb	r3, [r3, #5]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_DAC_ConfigChannel+0x22a>
 8002494:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002498:	e000      	b.n	800249c <HAL_DAC_ConfigChannel+0x22c>
 800249a:	2300      	movs	r3, #0
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d114      	bne.n	80024dc <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80024b2:	f002 fc97 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 80024b6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4a48      	ldr	r2, [pc, #288]	@ (80025dc <HAL_DAC_ConfigChannel+0x36c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d904      	bls.n	80024ca <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c8:	e00f      	b.n	80024ea <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4a44      	ldr	r2, [pc, #272]	@ (80025e0 <HAL_DAC_ConfigChannel+0x370>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d90a      	bls.n	80024e8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024da:	e006      	b.n	80024ea <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	4313      	orrs	r3, r2
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e6:	e000      	b.n	80024ea <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80024e8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	4313      	orrs	r3, r2
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002502:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253c:	4013      	ands	r3, r2
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002554:	4313      	orrs	r3, r2
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	22c0      	movs	r2, #192	@ 0xc0
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	ea02 0103 	and.w	r1, r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3728      	adds	r7, #40	@ 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	09896800 	.word	0x09896800
 80025e0:	04c4b400 	.word	0x04c4b400

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025f2:	e15a      	b.n	80028aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 814c 	beq.w	80028a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d005      	beq.n	8002624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002620:	2b02      	cmp	r3, #2
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0201 	and.w	r2, r3, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d017      	beq.n	80026c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a6 	beq.w	80028a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002758:	4b5b      	ldr	r3, [pc, #364]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 800275a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275c:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6613      	str	r3, [r2, #96]	@ 0x60
 8002764:	4b58      	ldr	r3, [pc, #352]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002770:	4a56      	ldr	r2, [pc, #344]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800279a:	d01f      	beq.n	80027dc <HAL_GPIO_Init+0x1f8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4c      	ldr	r2, [pc, #304]	@ (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d019      	beq.n	80027d8 <HAL_GPIO_Init+0x1f4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4b      	ldr	r2, [pc, #300]	@ (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_GPIO_Init+0x1f0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a4a      	ldr	r2, [pc, #296]	@ (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00d      	beq.n	80027d0 <HAL_GPIO_Init+0x1ec>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a49      	ldr	r2, [pc, #292]	@ (80028dc <HAL_GPIO_Init+0x2f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <HAL_GPIO_Init+0x1e8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a48      	ldr	r2, [pc, #288]	@ (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_GPIO_Init+0x1e4>
 80027c4:	2305      	movs	r3, #5
 80027c6:	e00a      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c8:	2306      	movs	r3, #6
 80027ca:	e008      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027cc:	2304      	movs	r3, #4
 80027ce:	e006      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d0:	2303      	movs	r3, #3
 80027d2:	e004      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027dc:	2300      	movs	r3, #0
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	4093      	lsls	r3, r2
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ee:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002820:	4a30      	ldr	r2, [pc, #192]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002826:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800284a:	4a26      	ldr	r2, [pc, #152]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002850:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002874:	4a1b      	ldr	r2, [pc, #108]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289e:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f ae9d 	bne.w	80025f4 <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	48000400 	.word	0x48000400
 80028d4:	48000800 	.word	0x48000800
 80028d8:	48000c00 	.word	0x48000c00
 80028dc:	48001000 	.word	0x48001000
 80028e0:	48001400 	.word	0x48001400
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002904:	e002      	b.n	800290c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0c0      	b.n	8002aac <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 fa0e 	bl	8008d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fca0 	bl	8005296 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e03e      	b.n	80029da <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3311      	adds	r3, #17
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	3310      	adds	r3, #16
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3313      	adds	r3, #19
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3320      	adds	r3, #32
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3324      	adds	r3, #36	@ 0x24
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3bb      	bcc.n	800295c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e044      	b.n	8002a74 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3301      	adds	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	791b      	ldrb	r3, [r3, #4]
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3b5      	bcc.n	80029ea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a8a:	f002 fc1f 	bl	80052cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7a9b      	ldrb	r3, [r3, #10]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f001 fc0e 	bl	80042c6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_Start+0x16>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e012      	b.n	8002af0 <HAL_PCD_Start+0x3c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fbc6 	bl	8005268 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 f9a3 	bl	8006e2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 f9a8 	bl	8006e5a <USB_ReadInterrupts>
 8002b0a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fb06 	bl	8003128 <PCD_EP_ISR_Handler>

    return;
 8002b1c:	e110      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f006 f99e 	bl	8008e82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b46:	2100      	movs	r1, #0
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8fc 	bl	8002d46 <HAL_PCD_SetAddress>

    return;
 8002b4e:	e0f7      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b72:	e0e5      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b90:	b292      	uxth	r2, r2
 8002b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b96:	e0d3      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d034      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0204 	bic.w	r2, r2, #4
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0208 	bic.w	r2, r2, #8
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002be4:	2100      	movs	r1, #0
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f006 fb3e 	bl	8009268 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f006 f981 	bl	8008ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c0a:	e099      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d027      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0208 	orr.w	r2, r2, #8
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c40:	b292      	uxth	r2, r2
 8002c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0204 	orr.w	r2, r2, #4
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f006 f92e 	bl	8008ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c64:	e06c      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d040      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c82:	b292      	uxth	r2, r2
 8002c84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12b      	bne.n	8002cea <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0204 	orr.w	r2, r2, #4
 8002ca4:	b292      	uxth	r2, r2
 8002ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0208 	orr.w	r2, r2, #8
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f006 fac0 	bl	8009268 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ce8:	e02a      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f006 f8e8 	bl	8008ec0 <HAL_PCD_SuspendCallback>
    return;
 8002cf0:	e026      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00f      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f006 f8a6 	bl	8008e66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d1a:	e011      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d3e:	bf00      	nop
  }
}
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_PCD_SetAddress+0x1a>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e012      	b.n	8002d86 <HAL_PCD_SetAddress+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f004 f844 	bl	8006e04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	4608      	mov	r0, r1
 8002d98:	4611      	mov	r1, r2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	70fb      	strb	r3, [r7, #3]
 8002da0:	460b      	mov	r3, r1
 8002da2:	803b      	strh	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da0e      	bge.n	8002dd2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0207 	and.w	r2, r3, #7
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	3310      	adds	r3, #16
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00e      	b.n	8002df0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002dfc:	883b      	ldrh	r3, [r7, #0]
 8002dfe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	78ba      	ldrb	r2, [r7, #2]
 8002e0a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e0c:	78bb      	ldrb	r3, [r7, #2]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d102      	bne.n	8002e18 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_PCD_EP_Open+0x98>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e00e      	b.n	8002e44 <HAL_PCD_EP_Open+0xb6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fa67 	bl	8005308 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e42:	7afb      	ldrb	r3, [r7, #11]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0e      	bge.n	8002e7e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 0207 	and.w	r2, r3, #7
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3310      	adds	r3, #16
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00e      	b.n	8002e9c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 0207 	and.w	r2, r3, #7
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_PCD_EP_Close+0x6a>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e00e      	b.n	8002ed4 <HAL_PCD_EP_Close+0x88>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 ff07 	bl	8005cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 f8bf 	bl	80060b2 <USB_EPStartXfer>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 0207 	and.w	r2, r3, #7
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	7afb      	ldrb	r3, [r7, #11]
 8002f80:	f003 0207 	and.w	r2, r3, #7
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	3310      	adds	r3, #16
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f870 	bl	80060b2 <USB_EPStartXfer>

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	7912      	ldrb	r2, [r2, #4]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e03e      	b.n	8003078 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da0e      	bge.n	8003020 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0207 	and.w	r2, r3, #7
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3310      	adds	r3, #16
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	705a      	strb	r2, [r3, #1]
 800301e:	e00c      	b.n	800303a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_PCD_EP_SetStall+0x7e>
 8003056:	2302      	movs	r3, #2
 8003058:	e00e      	b.n	8003078 <HAL_PCD_EP_SetStall+0x9c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fdd1 	bl	8006c10 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	7912      	ldrb	r2, [r2, #4]
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e040      	b.n	8003120 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da0e      	bge.n	80030c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 0207 	and.w	r2, r3, #7
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3310      	adds	r3, #16
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	705a      	strb	r2, [r3, #1]
 80030c2:	e00e      	b.n	80030e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_PCD_EP_ClrStall+0x82>
 80030fe:	2302      	movs	r3, #2
 8003100:	e00e      	b.n	8003120 <HAL_PCD_EP_ClrStall+0xa0>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 fdce 	bl	8006cb2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b092      	sub	sp, #72	@ 0x48
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003130:	e333      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800313a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800313c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003148:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 8108 	bne.w	8003362 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003152:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d14c      	bne.n	80031f6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29b      	uxth	r3, r3
 800317e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3310      	adds	r3, #16
 8003184:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	441a      	add	r2, r3
 80031b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031bc:	2100      	movs	r1, #0
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f005 fe37 	bl	8008e32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 82e5 	beq.w	800379a <PCD_EP_ISR_Handler+0x672>
 80031d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 82e0 	bne.w	800379a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7b1b      	ldrb	r3, [r3, #12]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	731a      	strb	r2, [r3, #12]
 80031f4:	e2d1      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031fc:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4413      	add	r3, r2
 800322a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003236:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003248:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800324a:	b29b      	uxth	r3, r3
 800324c:	f003 fe58 	bl	8006f00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29a      	uxth	r2, r3
 8003258:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800325c:	4013      	ands	r3, r2
 800325e:	817b      	strh	r3, [r7, #10]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	897a      	ldrh	r2, [r7, #10]
 8003266:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800326a:	b292      	uxth	r2, r2
 800326c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f005 fdb2 	bl	8008dd8 <HAL_PCD_SetupStageCallback>
 8003274:	e291      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003276:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800327a:	2b00      	cmp	r3, #0
 800327c:	f280 828d 	bge.w	800379a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29a      	uxth	r2, r3
 8003288:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800328c:	4013      	ands	r3, r2
 800328e:	81fb      	strh	r3, [r7, #14]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	89fa      	ldrh	r2, [r7, #14]
 8003296:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800329a:	b292      	uxth	r2, r2
 800329c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <PCD_EP_ISR_Handler+0x1da>
 80032ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032dc:	6959      	ldr	r1, [r3, #20]
 80032de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f003 fe0a 	bl	8006f00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f005 fd7d 	bl	8008dfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800330a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800330c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 8242 	bne.w	800379a <PCD_EP_ISR_Handler+0x672>
 8003316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003318:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800331c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003320:	f000 823b 	beq.w	800379a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003334:	81bb      	strh	r3, [r7, #12]
 8003336:	89bb      	ldrh	r3, [r7, #12]
 8003338:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800333c:	81bb      	strh	r3, [r7, #12]
 800333e:	89bb      	ldrh	r3, [r7, #12]
 8003340:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003344:	81bb      	strh	r3, [r7, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	89bb      	ldrh	r3, [r7, #12]
 800334c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335c:	b29b      	uxth	r3, r3
 800335e:	8013      	strh	r3, [r2, #0]
 8003360:	e21b      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003374:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003378:	2b00      	cmp	r3, #0
 800337a:	f280 80f1 	bge.w	8003560 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003394:	4013      	ands	r3, r2
 8003396:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ac:	b292      	uxth	r2, r2
 80033ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033b0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d123      	bne.n	8003416 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80033f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 808b 	beq.w	8003516 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	6959      	ldr	r1, [r3, #20]
 8003408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340a:	88da      	ldrh	r2, [r3, #6]
 800340c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003410:	f003 fd76 	bl	8006f00 <USB_ReadPMA>
 8003414:	e07f      	b.n	8003516 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d109      	bne.n	8003432 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800341e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003420:	461a      	mov	r2, r3
 8003422:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9c6 	bl	80037b6 <HAL_PCD_EP_DB_Receive>
 800342a:	4603      	mov	r3, r0
 800342c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003430:	e071      	b.n	8003516 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800345e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800346a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800346e:	b29b      	uxth	r3, r3
 8003470:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d022      	beq.n	80034d2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80034b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02c      	beq.n	8003516 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c2:	6959      	ldr	r1, [r3, #20]
 80034c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c6:	891a      	ldrh	r2, [r3, #8]
 80034c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034cc:	f003 fd18 	bl	8006f00 <USB_ReadPMA>
 80034d0:	e021      	b.n	8003516 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80034fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003508:	6959      	ldr	r1, [r3, #20]
 800350a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350c:	895a      	ldrh	r2, [r3, #10]
 800350e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003512:	f003 fcf5 	bl	8006f00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800351e:	441a      	add	r2, r3
 8003520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800352c:	441a      	add	r2, r3
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <PCD_EP_ISR_Handler+0x41e>
 800353a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800353e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	d206      	bcs.n	8003554 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f005 fc55 	bl	8008dfc <HAL_PCD_DataOutStageCallback>
 8003552:	e005      	b.n	8003560 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fda9 	bl	80060b2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003560:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8117 	beq.w	800379a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800356c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3310      	adds	r3, #16
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80035ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f040 80a1 	bne.w	8003704 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80035c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ca:	7b1b      	ldrb	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8092 	beq.w	80036f6 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d046      	beq.n	800366a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d126      	bne.n	8003632 <PCD_EP_ISR_Handler+0x50a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	00da      	lsls	r2, r3, #3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4413      	add	r3, r2
 8003606:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003616:	b29a      	uxth	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362a:	b29a      	uxth	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	e061      	b.n	80036f6 <PCD_EP_ISR_Handler+0x5ce>
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	785b      	ldrb	r3, [r3, #1]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d15d      	bne.n	80036f6 <PCD_EP_ISR_Handler+0x5ce>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00da      	lsls	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2200      	movs	r2, #0
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e045      	b.n	80036f6 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d126      	bne.n	80036c6 <PCD_EP_ISR_Handler+0x59e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	4413      	add	r3, r2
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	4413      	add	r3, r2
 800369a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e017      	b.n	80036f6 <PCD_EP_ISR_Handler+0x5ce>
 80036c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d113      	bne.n	80036f6 <PCD_EP_ISR_Handler+0x5ce>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	4413      	add	r3, r2
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00da      	lsls	r2, r3, #3
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	4413      	add	r3, r2
 80036ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f005 fb98 	bl	8008e32 <HAL_PCD_DataInStageCallback>
 8003702:	e04a      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003704:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d13f      	bne.n	800378e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	4413      	add	r3, r2
 8003728:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800373a:	429a      	cmp	r2, r3
 800373c:	d906      	bls.n	800374c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e002      	b.n	8003752 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800374c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800375a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f005 fb66 	bl	8008e32 <HAL_PCD_DataInStageCallback>
 8003766:	e018      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800376e:	441a      	add	r2, r3
 8003770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003772:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800377a:	441a      	add	r2, r3
 800377c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800377e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fc93 	bl	80060b2 <USB_EPStartXfer>
 800378c:	e005      	b.n	800379a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800378e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003790:	461a      	mov	r2, r3
 8003792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f917 	bl	80039c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f6ff acc3 	blt.w	8003132 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3748      	adds	r7, #72	@ 0x48
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d07c      	beq.n	80038c8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	8b7b      	ldrh	r3, [r7, #26]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d306      	bcc.n	800380c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	8b7b      	ldrh	r3, [r7, #26]
 8003804:	1ad2      	subs	r2, r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	619a      	str	r2, [r3, #24]
 800380a:	e002      	b.n	8003812 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d123      	bne.n	8003862 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003834:	833b      	strh	r3, [r7, #24]
 8003836:	8b3b      	ldrh	r3, [r7, #24]
 8003838:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800383c:	833b      	strh	r3, [r7, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	8b3b      	ldrh	r3, [r7, #24]
 800384e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385e:	b29b      	uxth	r3, r3
 8003860:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01f      	beq.n	80038ac <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	82fb      	strh	r3, [r7, #22]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ac:	8b7b      	ldrh	r3, [r7, #26]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8085 	beq.w	80039be <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6959      	ldr	r1, [r3, #20]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	891a      	ldrh	r2, [r3, #8]
 80038c0:	8b7b      	ldrh	r3, [r7, #26]
 80038c2:	f003 fb1d 	bl	8006f00 <USB_ReadPMA>
 80038c6:	e07a      	b.n	80039be <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	8b7b      	ldrh	r3, [r7, #26]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d306      	bcc.n	8003906 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	619a      	str	r2, [r3, #24]
 8003904:	e002      	b.n	800390c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d123      	bne.n	800395c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800392a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392e:	83fb      	strh	r3, [r7, #30]
 8003930:	8bfb      	ldrh	r3, [r7, #30]
 8003932:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003936:	83fb      	strh	r3, [r7, #30]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	8bfb      	ldrh	r3, [r7, #30]
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11f      	bne.n	80039a6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003980:	83bb      	strh	r3, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	8bbb      	ldrh	r3, [r7, #28]
 8003992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800399a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800399e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039a6:	8b7b      	ldrh	r3, [r7, #26]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6959      	ldr	r1, [r3, #20]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	895a      	ldrh	r2, [r3, #10]
 80039b8:	8b7b      	ldrh	r3, [r7, #26]
 80039ba:	f003 faa1 	bl	8006f00 <USB_ReadPMA>
    }
  }

  return count;
 80039be:	8b7b      	ldrh	r3, [r7, #26]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0a6      	sub	sp, #152	@ 0x98
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 81f7 	beq.w	8003dd0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a06:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d907      	bls.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	619a      	str	r2, [r3, #24]
 8003a24:	e002      	b.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 80e1 	bne.w	8003bf8 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d126      	bne.n	8003a8c <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	4413      	add	r3, r2
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	00da      	lsls	r2, r3, #3
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	4413      	add	r3, r2
 8003a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	801a      	strh	r2, [r3, #0]
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	e01a      	b.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d116      	bne.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa8:	4413      	add	r3, r2
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	00da      	lsls	r2, r3, #3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d126      	bne.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x156>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	00da      	lsls	r2, r3, #3
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	4413      	add	r3, r2
 8003af2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e017      	b.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x186>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d113      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x186>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	4413      	add	r3, r2
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	00da      	lsls	r2, r3, #3
 8003b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b40:	4413      	add	r3, r2
 8003b42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	78db      	ldrb	r3, [r3, #3]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d123      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b70:	837b      	strh	r3, [r7, #26]
 8003b72:	8b7b      	ldrh	r3, [r7, #26]
 8003b74:	f083 0320 	eor.w	r3, r3, #32
 8003b78:	837b      	strh	r3, [r7, #26]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f005 f944 	bl	8008e32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01f      	beq.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	833b      	strh	r3, [r7, #24]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	441a      	add	r2, r3
 8003bde:	8b3b      	ldrh	r3, [r7, #24]
 8003be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e31f      	b.n	8004238 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d021      	beq.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 82ca 	bne.w	80041e6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c68:	441a      	add	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d309      	bcc.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	621a      	str	r2, [r3, #32]
 8003c8c:	e015      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003c96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ca4:	e009      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d15f      	bne.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	4413      	add	r3, r2
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e051      	b.n	8003dba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d18:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d1a:	d816      	bhi.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x382>
 8003d1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d2e:	3301      	adds	r3, #1
 8003d30:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d46:	801a      	strh	r2, [r3, #0]
 8003d48:	e037      	b.n	8003dba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x398>
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e01b      	b.n	8003dba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d117      	bne.n	8003dba <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9e:	4413      	add	r3, r2
 8003da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	00da      	lsls	r2, r3, #3
 8003da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6959      	ldr	r1, [r3, #20]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	891a      	ldrh	r2, [r3, #8]
 8003dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f003 f856 	bl	8006e7a <USB_WritePMA>
 8003dce:	e20a      	b.n	80041e6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d307      	bcc.n	8003e14 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e0c:	1ad2      	subs	r2, r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	619a      	str	r2, [r3, #24]
 8003e12:	e002      	b.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f040 80f6 	bne.w	8004010 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d126      	bne.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e40:	4413      	add	r3, r2
 8003e42:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	00da      	lsls	r2, r3, #3
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e52:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e62:	801a      	strh	r2, [r3, #0]
 8003e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	e01a      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d116      	bne.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e96:	4413      	add	r3, r2
 8003e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	00da      	lsls	r2, r3, #3
 8003ea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d12f      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x558>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed8:	4413      	add	r3, r2
 8003eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e01c      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x592>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d118      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x592>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f38:	4413      	add	r3, r2
 8003f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00da      	lsls	r2, r3, #3
 8003f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f48:	4413      	add	r3, r2
 8003f4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f56:	2200      	movs	r2, #0
 8003f58:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d127      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f80:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f84:	f083 0320 	eor.w	r3, r3, #32
 8003f88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f004 ff3a 	bl	8008e32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d121      	bne.n	800400c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004008:	b29b      	uxth	r3, r3
 800400a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e113      	b.n	8004238 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d121      	bne.n	800405e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004034:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	441a      	add	r2, r3
 8004046:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800404a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800404e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405a:	b29b      	uxth	r3, r3
 800405c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 80be 	bne.w	80041e6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004072:	441a      	add	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004080:	441a      	add	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d309      	bcc.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800409e:	1ad2      	subs	r2, r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	e015      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d107      	bne.n	80040be <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80040ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040bc:	e009      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d15f      	bne.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f4:	4413      	add	r3, r2
 80040f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	00da      	lsls	r2, r3, #3
 80040fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004100:	4413      	add	r3, r2
 8004102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004106:	667b      	str	r3, [r7, #100]	@ 0x64
 8004108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004112:	b29a      	uxth	r2, r3
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_PCD_EP_DB_Transmit+0x76c>
 800411e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800412c:	b29a      	uxth	r2, r3
 800412e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	e04e      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004136:	2b3e      	cmp	r3, #62	@ 0x3e
 8004138:	d816      	bhi.n	8004168 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800413a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_PCD_EP_DB_Transmit+0x788>
 800414a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800414c:	3301      	adds	r3, #1
 800414e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29a      	uxth	r2, r3
 8004156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004158:	b29b      	uxth	r3, r3
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	b29b      	uxth	r3, r3
 800415e:	4313      	orrs	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e034      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	663b      	str	r3, [r7, #96]	@ 0x60
 800416e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417a:	3b01      	subs	r3, #1
 800417c:	663b      	str	r3, [r7, #96]	@ 0x60
 800417e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29a      	uxth	r2, r3
 8004184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004186:	b29b      	uxth	r3, r3
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	b29b      	uxth	r3, r3
 800418c:	4313      	orrs	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29a      	uxth	r2, r3
 800419a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	e018      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d114      	bne.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041b6:	4413      	add	r3, r2
 80041b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	00da      	lsls	r2, r3, #3
 80041c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6959      	ldr	r1, [r3, #20]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	895a      	ldrh	r2, [r3, #10]
 80041de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f002 fe4a 	bl	8006e7a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004200:	82fb      	strh	r3, [r7, #22]
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	f083 0310 	eor.w	r3, r3, #16
 8004208:	82fb      	strh	r3, [r7, #22]
 800420a:	8afb      	ldrh	r3, [r7, #22]
 800420c:	f083 0320 	eor.w	r3, r3, #32
 8004210:	82fb      	strh	r3, [r7, #22]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8afb      	ldrh	r3, [r7, #22]
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3798      	adds	r7, #152	@ 0x98
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	4613      	mov	r3, r2
 8004250:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	f003 0207 	and.w	r2, r3, #7
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	3310      	adds	r3, #16
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e009      	b.n	800428a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004276:	897a      	ldrh	r2, [r7, #10]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	b29a      	uxth	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	80da      	strh	r2, [r3, #6]
 800429e:	e00b      	b.n	80042b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2201      	movs	r2, #1
 80042a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d141      	bne.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800432a:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004336:	d131      	bne.n	800439c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004338:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433e:	4a46      	ldr	r2, [pc, #280]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004348:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004350:	4a41      	ldr	r2, [pc, #260]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004358:	4b40      	ldr	r3, [pc, #256]	@ (800445c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2232      	movs	r2, #50	@ 0x32
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a3f      	ldr	r2, [pc, #252]	@ (8004460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	0c9b      	lsrs	r3, r3, #18
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436e:	e002      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004376:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d102      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f2      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800438a:	4b33      	ldr	r3, [pc, #204]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d158      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e057      	b.n	800444c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800439c:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043ac:	e04d      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b4:	d141      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043b6:	4b28      	ldr	r3, [pc, #160]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d131      	bne.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c4:	4b24      	ldr	r3, [pc, #144]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	4a23      	ldr	r2, [pc, #140]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d4:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2232      	movs	r2, #50	@ 0x32
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	e002      	b.n	8004402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004402:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440e:	d102      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f2      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004422:	d112      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e011      	b.n	800444c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004438:	e007      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004442:	4a05      	ldr	r2, [pc, #20]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40007000 	.word	0x40007000
 800445c:	20000000 	.word	0x20000000
 8004460:	431bde83 	.word	0x431bde83

08004464 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a04      	ldr	r2, [pc, #16]	@ (8004480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800446e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004472:	6093      	str	r3, [r2, #8]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40007000 	.word	0x40007000

08004484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e2fe      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d075      	beq.n	800458e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b97      	ldr	r3, [pc, #604]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ac:	4b94      	ldr	r3, [pc, #592]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d102      	bne.n	80044c2 <HAL_RCC_OscConfig+0x3e>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d002      	beq.n	80044c8 <HAL_RCC_OscConfig+0x44>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d05b      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d157      	bne.n	800458c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e2d9      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x74>
 80044ea:	4b85      	ldr	r3, [pc, #532]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a84      	ldr	r2, [pc, #528]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x98>
 8004502:	4b7f      	ldr	r3, [pc, #508]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7e      	ldr	r2, [pc, #504]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b7c      	ldr	r3, [pc, #496]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7b      	ldr	r2, [pc, #492]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 800451c:	4b78      	ldr	r3, [pc, #480]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a77      	ldr	r2, [pc, #476]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b75      	ldr	r3, [pc, #468]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a74      	ldr	r2, [pc, #464]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fc fa0c 	bl	8000958 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fc fa08 	bl	8000958 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e29e      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004556:	4b6a      	ldr	r3, [pc, #424]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xc0>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fc f9f8 	bl	8000958 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fc f9f4 	bl	8000958 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	@ 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e28a      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457e:	4b60      	ldr	r3, [pc, #384]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d075      	beq.n	8004686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459a:	4b59      	ldr	r3, [pc, #356]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a4:	4b56      	ldr	r3, [pc, #344]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b0c      	cmp	r3, #12
 80045b2:	d102      	bne.n	80045ba <HAL_RCC_OscConfig+0x136>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_OscConfig+0x13c>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d11f      	bne.n	8004600 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_OscConfig+0x154>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e25d      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	4946      	ldr	r1, [pc, #280]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045ec:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fc f965 	bl	80008c0 <HAL_InitTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d043      	beq.n	8004684 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e249      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b3d      	ldr	r3, [pc, #244]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3c      	ldr	r2, [pc, #240]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fc f9a0 	bl	8000958 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fc f99c 	bl	8000958 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e232      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	492d      	ldr	r1, [pc, #180]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	604b      	str	r3, [r1, #4]
 800464e:	e01a      	b.n	8004686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2a      	ldr	r2, [pc, #168]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800465a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fc f97c 	bl	8000958 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004664:	f7fc f978 	bl	8000958 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e20e      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004676:	4b22      	ldr	r3, [pc, #136]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x1e0>
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004684:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d041      	beq.n	8004716 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a0:	4a17      	ldr	r2, [pc, #92]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fc f955 	bl	8000958 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fc f951 	bl	8000958 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1e7      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ef      	beq.n	80046b2 <HAL_RCC_OscConfig+0x22e>
 80046d2:	e020      	b.n	8004716 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80046d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046da:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fc f938 	bl	8000958 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ea:	e00d      	b.n	8004708 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fc f934 	bl	8000958 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d906      	bls.n	8004708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1ca      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004708:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ea      	bne.n	80046ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80a6 	beq.w	8004870 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004728:	4b84      	ldr	r3, [pc, #528]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_OscConfig+0x2b4>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x2b6>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b7f      	ldr	r3, [pc, #508]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	4a7e      	ldr	r2, [pc, #504]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004748:	6593      	str	r3, [r2, #88]	@ 0x58
 800474a:	4b7c      	ldr	r3, [pc, #496]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475a:	4b79      	ldr	r3, [pc, #484]	@ (8004940 <HAL_RCC_OscConfig+0x4bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004766:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <HAL_RCC_OscConfig+0x4bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	@ (8004940 <HAL_RCC_OscConfig+0x4bc>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7fc f8f1 	bl	8000958 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7fc f8ed 	bl	8000958 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e183      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478c:	4b6c      	ldr	r3, [pc, #432]	@ (8004940 <HAL_RCC_OscConfig+0x4bc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d108      	bne.n	80047b2 <HAL_RCC_OscConfig+0x32e>
 80047a0:	4b66      	ldr	r3, [pc, #408]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	4a65      	ldr	r2, [pc, #404]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b0:	e024      	b.n	80047fc <HAL_RCC_OscConfig+0x378>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d110      	bne.n	80047dc <HAL_RCC_OscConfig+0x358>
 80047ba:	4b60      	ldr	r3, [pc, #384]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ca:	4b5c      	ldr	r3, [pc, #368]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d0:	4a5a      	ldr	r2, [pc, #360]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047da:	e00f      	b.n	80047fc <HAL_RCC_OscConfig+0x378>
 80047dc:	4b57      	ldr	r3, [pc, #348]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a56      	ldr	r2, [pc, #344]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ec:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a52      	ldr	r2, [pc, #328]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fc f8a8 	bl	8000958 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fc f8a4 	bl	8000958 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e138      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	4b46      	ldr	r3, [pc, #280]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ed      	beq.n	800480c <HAL_RCC_OscConfig+0x388>
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fc f891 	bl	8000958 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fc f88d 	bl	8000958 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e121      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004850:	4b3a      	ldr	r3, [pc, #232]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ed      	bne.n	800483a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b35      	ldr	r3, [pc, #212]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	4a34      	ldr	r2, [pc, #208]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01c      	beq.n	80048be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004884:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488a:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fc f860 	bl	8000958 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489c:	f7fc f85c 	bl	8000958 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0f2      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ae:	4b23      	ldr	r3, [pc, #140]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <HAL_RCC_OscConfig+0x418>
 80048bc:	e01b      	b.n	80048f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048be:	4b1f      	ldr	r3, [pc, #124]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c4:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fc f843 	bl	8000958 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d6:	f7fc f83f 	bl	8000958 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0d5      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e8:	4b14      	ldr	r3, [pc, #80]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 80048ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80c9 	beq.w	8004a92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004900:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b0c      	cmp	r3, #12
 800490a:	f000 8083 	beq.w	8004a14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d15e      	bne.n	80049d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a08      	ldr	r2, [pc, #32]	@ (800493c <HAL_RCC_OscConfig+0x4b8>)
 800491c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fc f819 	bl	8000958 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004928:	e00c      	b.n	8004944 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492a:	f7fc f815 	bl	8000958 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d905      	bls.n	8004944 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0ab      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
 800493c:	40021000 	.word	0x40021000
 8004940:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004944:	4b55      	ldr	r3, [pc, #340]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ec      	bne.n	800492a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004950:	4b52      	ldr	r3, [pc, #328]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	4b52      	ldr	r3, [pc, #328]	@ (8004aa0 <HAL_RCC_OscConfig+0x61c>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6a11      	ldr	r1, [r2, #32]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004960:	3a01      	subs	r2, #1
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	4311      	orrs	r1, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800496a:	0212      	lsls	r2, r2, #8
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004972:	0852      	lsrs	r2, r2, #1
 8004974:	3a01      	subs	r2, #1
 8004976:	0552      	lsls	r2, r2, #21
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800497e:	0852      	lsrs	r2, r2, #1
 8004980:	3a01      	subs	r2, #1
 8004982:	0652      	lsls	r2, r2, #25
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800498a:	06d2      	lsls	r2, r2, #27
 800498c:	430a      	orrs	r2, r1
 800498e:	4943      	ldr	r1, [pc, #268]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004990:	4313      	orrs	r3, r2
 8004992:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b41      	ldr	r3, [pc, #260]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a40      	ldr	r2, [pc, #256]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a0:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a3d      	ldr	r2, [pc, #244]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fb ffd4 	bl	8000958 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fb ffd0 	bl	8000958 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e066      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	4b35      	ldr	r3, [pc, #212]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x530>
 80049d2:	e05e      	b.n	8004a92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b31      	ldr	r3, [pc, #196]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fb ffba 	bl	8000958 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fb ffb6 	bl	8000958 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04c      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fa:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a06:	4b25      	ldr	r3, [pc, #148]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	4924      	ldr	r1, [pc, #144]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004a0c:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <HAL_RCC_OscConfig+0x620>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60cb      	str	r3, [r1, #12]
 8004a12:	e03e      	b.n	8004a92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e039      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <HAL_RCC_OscConfig+0x618>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0203 	and.w	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d12c      	bne.n	8004a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d123      	bne.n	8004a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d11b      	bne.n	8004a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d113      	bne.n	8004a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	3b01      	subs	r3, #1
 8004a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	3b01      	subs	r3, #1
 8004a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	019f800c 	.word	0x019f800c
 8004aa4:	feeefffc 	.word	0xfeeefffc

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e11e      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b91      	ldr	r3, [pc, #580]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d910      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b8e      	ldr	r3, [pc, #568]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 020f 	bic.w	r2, r3, #15
 8004ad6:	498c      	ldr	r1, [pc, #560]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b8a      	ldr	r3, [pc, #552]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e106      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d073      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d129      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b04:	4b81      	ldr	r3, [pc, #516]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0f4      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b14:	f000 f972 	bl	8004dfc <RCC_GetSysClockFreqFromPLLSource>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d10 <HAL_RCC_ClockConfig+0x268>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d93f      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b22:	4b7a      	ldr	r3, [pc, #488]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d033      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d12f      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b42:	4b72      	ldr	r3, [pc, #456]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b4a:	4a70      	ldr	r2, [pc, #448]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e024      	b.n	8004ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b60:	4b6a      	ldr	r3, [pc, #424]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0c6      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b70:	4b66      	ldr	r3, [pc, #408]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0be      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b80:	f000 f8ce 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4a61      	ldr	r2, [pc, #388]	@ (8004d10 <HAL_RCC_ClockConfig+0x268>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d909      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b96:	4a5d      	ldr	r2, [pc, #372]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4957      	ldr	r1, [pc, #348]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fb fed0 	bl	8000958 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbc:	f7fb fecc 	bl	8000958 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e095      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 020c 	and.w	r2, r3, #12
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1eb      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d023      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b43      	ldr	r3, [pc, #268]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a42      	ldr	r2, [pc, #264]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c14:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b39      	ldr	r3, [pc, #228]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4936      	ldr	r1, [pc, #216]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c3e:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4a32      	ldr	r2, [pc, #200]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004c44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d21d      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 020f 	bic.w	r2, r3, #15
 8004c60:	4929      	ldr	r1, [pc, #164]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c68:	f7fb fe76 	bl	8000958 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fb fe72 	bl	8000958 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e03b      	b.n	8004cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1ed      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4917      	ldr	r1, [pc, #92]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cbe:	4b13      	ldr	r3, [pc, #76]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490f      	ldr	r1, [pc, #60]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd2:	f000 f825 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490c      	ldr	r1, [pc, #48]	@ (8004d14 <HAL_RCC_ClockConfig+0x26c>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	4a0a      	ldr	r2, [pc, #40]	@ (8004d18 <HAL_RCC_ClockConfig+0x270>)
 8004cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <HAL_RCC_ClockConfig+0x274>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fde2 	bl	80008c0 <HAL_InitTick>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	04c4b400 	.word	0x04c4b400
 8004d14:	080095b0 	.word	0x080095b0
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	20000004 	.word	0x20000004

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d26:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d102      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d32:	4b2a      	ldr	r3, [pc, #168]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e047      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d38:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 030c 	and.w	r3, r3, #12
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d102      	bne.n	8004d4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d44:	4b26      	ldr	r3, [pc, #152]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	e03e      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d4a:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d136      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d56:	4b20      	ldr	r3, [pc, #128]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d60:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d10c      	bne.n	8004d8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d74:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	4a16      	ldr	r2, [pc, #88]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d7e:	68d2      	ldr	r2, [r2, #12]
 8004d80:	0a12      	lsrs	r2, r2, #8
 8004d82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	617b      	str	r3, [r7, #20]
      break;
 8004d8c:	e00c      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d8e:	4a13      	ldr	r2, [pc, #76]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4a10      	ldr	r2, [pc, #64]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d98:	68d2      	ldr	r2, [r2, #12]
 8004d9a:	0a12      	lsrs	r2, r2, #8
 8004d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
      break;
 8004da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	0e5b      	lsrs	r3, r3, #25
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	3301      	adds	r3, #1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dc8:	693b      	ldr	r3, [r7, #16]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	00f42400 	.word	0x00f42400
 8004de0:	007a1200 	.word	0x007a1200

08004de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de8:	4b03      	ldr	r3, [pc, #12]	@ (8004df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000000 	.word	0x20000000

08004dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e02:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d10c      	bne.n	8004e3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e20:	4a17      	ldr	r2, [pc, #92]	@ (8004e80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e2a:	68d2      	ldr	r2, [r2, #12]
 8004e2c:	0a12      	lsrs	r2, r2, #8
 8004e2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
    break;
 8004e38:	e00c      	b.n	8004e54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3a:	4a12      	ldr	r2, [pc, #72]	@ (8004e84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	4a0e      	ldr	r2, [pc, #56]	@ (8004e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e44:	68d2      	ldr	r2, [r2, #12]
 8004e46:	0a12      	lsrs	r2, r2, #8
 8004e48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
    break;
 8004e52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e54:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	0e5b      	lsrs	r3, r3, #25
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e6e:	687b      	ldr	r3, [r7, #4]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	00f42400 	.word	0x00f42400

08004e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e90:	2300      	movs	r3, #0
 8004e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e94:	2300      	movs	r3, #0
 8004e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8098 	beq.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eaa:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10d      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	4b40      	ldr	r3, [pc, #256]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a39      	ldr	r2, [pc, #228]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ede:	f7fb fd3b 	bl	8000958 <HAL_GetTick>
 8004ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee4:	e009      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fb fd37 	bl	8000958 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d902      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efa:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ef      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d159      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d019      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f28:	4b23      	ldr	r3, [pc, #140]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f34:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f44:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f54:	4a18      	ldr	r2, [pc, #96]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fb fcf7 	bl	8000958 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fb fcf3 	bl	8000958 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d902      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	74fb      	strb	r3, [r7, #19]
            break;
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f86:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ec      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	4903      	ldr	r1, [pc, #12]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	74bb      	strb	r3, [r7, #18]
 8004fb6:	e005      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc4:	7c7b      	ldrb	r3, [r7, #17]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fca:	4ba6      	ldr	r3, [pc, #664]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	4aa5      	ldr	r2, [pc, #660]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fe2:	4ba0      	ldr	r3, [pc, #640]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f023 0203 	bic.w	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	499c      	ldr	r1, [pc, #624]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005004:	4b97      	ldr	r3, [pc, #604]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f023 020c 	bic.w	r2, r3, #12
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4994      	ldr	r1, [pc, #592]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005026:	4b8f      	ldr	r3, [pc, #572]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	498b      	ldr	r1, [pc, #556]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005048:	4b86      	ldr	r3, [pc, #536]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4983      	ldr	r1, [pc, #524]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800506a:	4b7e      	ldr	r3, [pc, #504]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	497a      	ldr	r1, [pc, #488]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800508c:	4b75      	ldr	r3, [pc, #468]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005092:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	4972      	ldr	r1, [pc, #456]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4969      	ldr	r1, [pc, #420]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d0:	4b64      	ldr	r3, [pc, #400]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4961      	ldr	r1, [pc, #388]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	4958      	ldr	r1, [pc, #352]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005114:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	4950      	ldr	r1, [pc, #320]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005132:	d105      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b4b      	ldr	r3, [pc, #300]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800513e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800514c:	4b45      	ldr	r3, [pc, #276]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	4942      	ldr	r1, [pc, #264]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516c:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005176:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005184:	4b37      	ldr	r3, [pc, #220]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	4934      	ldr	r1, [pc, #208]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051bc:	4b29      	ldr	r3, [pc, #164]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ca:	4926      	ldr	r1, [pc, #152]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b21      	ldr	r3, [pc, #132]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a20      	ldr	r2, [pc, #128]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d015      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005202:	4918      	ldr	r1, [pc, #96]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005212:	d105      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4a12      	ldr	r2, [pc, #72]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800521e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800522c:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523a:	490a      	ldr	r1, [pc, #40]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800524a:	d105      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005256:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005258:	7cbb      	ldrb	r3, [r7, #18]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000

08005268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005278:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800527c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800529e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80052a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005308:	b480      	push	{r7}
 800530a:	b0a7      	sub	sp, #156	@ 0x9c
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d81f      	bhi.n	800537a <USB_ActivateEndpoint+0x72>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <USB_ActivateEndpoint+0x38>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005351 	.word	0x08005351
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005383 	.word	0x08005383
 800534c:	0800535f 	.word	0x0800535f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005350:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005358:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800535c:	e012      	b.n	8005384 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800535e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005362:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005366:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800536a:	e00b      	b.n	8005384 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800536c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005374:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005378:	e004      	b.n	8005384 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005380:	e000      	b.n	8005384 <USB_ActivateEndpoint+0x7c>
      break;
 8005382:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800539a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	b21a      	sxth	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b21b      	sxth	r3, r3
 80053ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 8180 	bne.w	80056fa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8084 	beq.w	800550c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	4413      	add	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	00da      	lsls	r2, r3, #3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	88db      	ldrh	r3, [r3, #6]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	b29b      	uxth	r3, r3
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	827b      	strh	r3, [r7, #18]
 8005446:	8a7b      	ldrh	r3, [r7, #18]
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <USB_ActivateEndpoint+0x180>
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005466:	823b      	strh	r3, [r7, #16]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	8a3b      	ldrh	r3, [r7, #16]
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d020      	beq.n	80054d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a6:	81bb      	strh	r3, [r7, #12]
 80054a8:	89bb      	ldrh	r3, [r7, #12]
 80054aa:	f083 0320 	eor.w	r3, r3, #32
 80054ae:	81bb      	strh	r3, [r7, #12]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	89bb      	ldrh	r3, [r7, #12]
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
 80054d0:	e3f9      	b.n	8005cc6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e8:	81fb      	strh	r3, [r7, #14]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]
 800550a:	e3dc      	b.n	8005cc6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	4413      	add	r3, r2
 800551e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	00da      	lsls	r2, r3, #3
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	4413      	add	r3, r2
 800552a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	88db      	ldrh	r3, [r3, #6]
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	4413      	add	r3, r2
 8005552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	00da      	lsls	r2, r3, #3
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	4413      	add	r3, r2
 800555e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800556e:	b29a      	uxth	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <USB_ActivateEndpoint+0x28a>
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e041      	b.n	8005616 <USB_ActivateEndpoint+0x30e>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b3e      	cmp	r3, #62	@ 0x3e
 8005598:	d81c      	bhi.n	80055d4 <USB_ActivateEndpoint+0x2cc>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <USB_ActivateEndpoint+0x2b2>
 80055b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055b4:	3301      	adds	r3, #1
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	029b      	lsls	r3, r3, #10
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4313      	orrs	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	e020      	b.n	8005616 <USB_ActivateEndpoint+0x30e>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <USB_ActivateEndpoint+0x2ec>
 80055ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055ee:	3b01      	subs	r3, #1
 80055f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055fe:	b29b      	uxth	r3, r3
 8005600:	029b      	lsls	r3, r3, #10
 8005602:	b29b      	uxth	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005624:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01b      	beq.n	8005666 <USB_ActivateEndpoint+0x35e>
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005644:	843b      	strh	r3, [r7, #32]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	8c3b      	ldrh	r3, [r7, #32]
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d124      	bne.n	80056b8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005684:	83bb      	strh	r3, [r7, #28]
 8005686:	8bbb      	ldrh	r3, [r7, #28]
 8005688:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800568c:	83bb      	strh	r3, [r7, #28]
 800568e:	8bbb      	ldrh	r3, [r7, #28]
 8005690:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005694:	83bb      	strh	r3, [r7, #28]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8bbb      	ldrh	r3, [r7, #28]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
 80056b6:	e306      	b.n	8005cc6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	83fb      	strh	r3, [r7, #30]
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056d6:	83fb      	strh	r3, [r7, #30]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	8bfb      	ldrh	r3, [r7, #30]
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]
 80056f8:	e2e5      	b.n	8005cc6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	78db      	ldrb	r3, [r3, #3]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d11e      	bne.n	8005740 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005718:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e01d      	b.n	800577c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005756:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800578c:	4413      	add	r3, r2
 800578e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	00da      	lsls	r2, r3, #3
 8005796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005798:	4413      	add	r3, r2
 800579a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800579e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	891b      	ldrh	r3, [r3, #8]
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c0:	4413      	add	r3, r2
 80057c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	00da      	lsls	r2, r3, #3
 80057ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057cc:	4413      	add	r3, r2
 80057ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	895b      	ldrh	r3, [r3, #10]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	b29b      	uxth	r3, r3
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 81af 	bne.w	8005b4c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80057fe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8005802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01d      	beq.n	8005846 <USB_ActivateEndpoint+0x53e>
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800583e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005856:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800585a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01d      	beq.n	800589e <USB_ActivateEndpoint+0x596>
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005878:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005896:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d16b      	bne.n	800597e <USB_ActivateEndpoint+0x676>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b6:	4413      	add	r3, r2
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <USB_ActivateEndpoint+0x5f0>
 80058e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e05d      	b.n	80059b4 <USB_ActivateEndpoint+0x6ac>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80058fe:	d81c      	bhi.n	800593a <USB_ActivateEndpoint+0x632>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <USB_ActivateEndpoint+0x618>
 8005916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800591a:	3301      	adds	r3, #1
 800591c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29a      	uxth	r2, r3
 8005926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29b      	uxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	b29a      	uxth	r2, r3
 8005934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e03c      	b.n	80059b4 <USB_ActivateEndpoint+0x6ac>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <USB_ActivateEndpoint+0x652>
 8005950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005954:	3b01      	subs	r3, #1
 8005956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005964:	b29b      	uxth	r3, r3
 8005966:	029b      	lsls	r3, r3, #10
 8005968:	b29b      	uxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005976:	b29a      	uxth	r2, r3
 8005978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	e01a      	b.n	80059b4 <USB_ActivateEndpoint+0x6ac>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d116      	bne.n	80059b4 <USB_ActivateEndpoint+0x6ac>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	657b      	str	r3, [r7, #84]	@ 0x54
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005996:	4413      	add	r3, r2
 8005998:	657b      	str	r3, [r7, #84]	@ 0x54
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	00da      	lsls	r2, r3, #3
 80059a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d16b      	bne.n	8005a98 <USB_ActivateEndpoint+0x790>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d0:	4413      	add	r3, r2
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	00da      	lsls	r2, r3, #3
 80059da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <USB_ActivateEndpoint+0x70a>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e05b      	b.n	8005aca <USB_ActivateEndpoint+0x7c2>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a18:	d81c      	bhi.n	8005a54 <USB_ActivateEndpoint+0x74c>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <USB_ActivateEndpoint+0x732>
 8005a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a34:	3301      	adds	r3, #1
 8005a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e03a      	b.n	8005aca <USB_ActivateEndpoint+0x7c2>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <USB_ActivateEndpoint+0x76c>
 8005a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e018      	b.n	8005aca <USB_ActivateEndpoint+0x7c2>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d114      	bne.n	8005aca <USB_ActivateEndpoint+0x7c2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aac:	4413      	add	r3, r2
 8005aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00da      	lsls	r2, r3, #3
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005ae2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ae4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005aea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005aec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005af0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005afe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b28:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]
 8005b4a:	e0bc      	b.n	8005cc6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005b5c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01d      	beq.n	8005ba4 <USB_ActivateEndpoint+0x89c>
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005bb4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01d      	beq.n	8005bfc <USB_ActivateEndpoint+0x8f4>
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d024      	beq.n	8005c4e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c22:	f083 0320 	eor.w	r3, r3, #32
 8005c26:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	8013      	strh	r3, [r2, #0]
 8005c4c:	e01d      	b.n	8005c8a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c64:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cc6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	379c      	adds	r7, #156	@ 0x9c
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b08d      	sub	sp, #52	@ 0x34
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	7b1b      	ldrb	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 808e 	bne.w	8005e08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d044      	beq.n	8005d7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	81bb      	strh	r3, [r7, #12]
 8005d02:	89bb      	ldrh	r3, [r7, #12]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <USB_DeactivateEndpoint+0x6c>
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	817b      	strh	r3, [r7, #10]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5a:	813b      	strh	r3, [r7, #8]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	893b      	ldrh	r3, [r7, #8]
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]
 8005d7c:	e192      	b.n	80060a4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	827b      	strh	r3, [r7, #18]
 8005d8c:	8a7b      	ldrh	r3, [r7, #18]
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01b      	beq.n	8005dce <USB_DeactivateEndpoint+0xf6>
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dac:	823b      	strh	r3, [r7, #16]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	8a3b      	ldrh	r3, [r7, #16]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de4:	81fb      	strh	r3, [r7, #14]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	89fb      	ldrh	r3, [r7, #14]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	e14d      	b.n	80060a4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 80a5 	bne.w	8005f5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	843b      	strh	r3, [r7, #32]
 8005e20:	8c3b      	ldrh	r3, [r7, #32]
 8005e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01b      	beq.n	8005e62 <USB_DeactivateEndpoint+0x18a>
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e40:	83fb      	strh	r3, [r7, #30]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	441a      	add	r2, r3
 8005e4c:	8bfb      	ldrh	r3, [r7, #30]
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	83bb      	strh	r3, [r7, #28]
 8005e70:	8bbb      	ldrh	r3, [r7, #28]
 8005e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <USB_DeactivateEndpoint+0x1da>
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e90:	837b      	strh	r3, [r7, #26]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	8b7b      	ldrh	r3, [r7, #26]
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec8:	833b      	strh	r3, [r7, #24]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8b3b      	ldrh	r3, [r7, #24]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ee2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f00:	82fb      	strh	r3, [r7, #22]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	8afb      	ldrh	r3, [r7, #22]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f38:	82bb      	strh	r3, [r7, #20]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	8abb      	ldrh	r3, [r7, #20]
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
 8005f5a:	e0a3      	b.n	80060a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <USB_DeactivateEndpoint+0x2d4>
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005fba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <USB_DeactivateEndpoint+0x324>
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800602c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3734      	adds	r7, #52	@ 0x34
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b0ac      	sub	sp, #176	@ 0xb0
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 84ca 	bne.w	8006a5a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d904      	bls.n	80060dc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060da:	e003      	b.n	80060e4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	7b1b      	ldrb	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d122      	bne.n	8006132 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88da      	ldrh	r2, [r3, #6]
 80060f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 febd 	bl	8006e7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800610a:	b29b      	uxth	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	00da      	lsls	r2, r3, #3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4413      	add	r3, r2
 800611e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	f000 bc6f 	b.w	8006a10 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b02      	cmp	r3, #2
 8006138:	f040 831e 	bne.w	8006778 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	f240 82cf 	bls.w	80066e8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006160:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800617a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800617e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 814f 	beq.w	800644a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d16b      	bne.n	8006290 <USB_EPStartXfer+0x1de>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	4413      	add	r3, r2
 80061ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00da      	lsls	r2, r3, #3
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <USB_EPStartXfer+0x158>
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006202:	b29a      	uxth	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e05b      	b.n	80062c2 <USB_EPStartXfer+0x210>
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006210:	d81c      	bhi.n	800624c <USB_EPStartXfer+0x19a>
 8006212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <USB_EPStartXfer+0x180>
 8006228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800622c:	3301      	adds	r3, #1
 800622e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e03a      	b.n	80062c2 <USB_EPStartXfer+0x210>
 800624c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <USB_EPStartXfer+0x1ba>
 8006262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006266:	3b01      	subs	r3, #1
 8006268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006276:	b29b      	uxth	r3, r3
 8006278:	029b      	lsls	r3, r3, #10
 800627a:	b29b      	uxth	r3, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006288:	b29a      	uxth	r2, r3
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e018      	b.n	80062c2 <USB_EPStartXfer+0x210>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d114      	bne.n	80062c2 <USB_EPStartXfer+0x210>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	4413      	add	r3, r2
 80062a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00da      	lsls	r2, r3, #3
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	895b      	ldrh	r3, [r3, #10]
 80062c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6959      	ldr	r1, [r3, #20]
 80062ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fdce 	bl	8006e7a <USB_WritePMA>
            ep->xfer_buff += len;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062e6:	441a      	add	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d907      	bls.n	8006308 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006300:	1ad2      	subs	r2, r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	621a      	str	r2, [r3, #32]
 8006306:	e006      	b.n	8006316 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d16b      	bne.n	80063f6 <USB_EPStartXfer+0x344>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	4413      	add	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	00da      	lsls	r2, r3, #3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800634c:	b29a      	uxth	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <USB_EPStartXfer+0x2be>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e05d      	b.n	800642c <USB_EPStartXfer+0x37a>
 8006370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006374:	2b3e      	cmp	r3, #62	@ 0x3e
 8006376:	d81c      	bhi.n	80063b2 <USB_EPStartXfer+0x300>
 8006378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <USB_EPStartXfer+0x2e6>
 800638e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006392:	3301      	adds	r3, #1
 8006394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e03c      	b.n	800642c <USB_EPStartXfer+0x37a>
 80063b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <USB_EPStartXfer+0x320>
 80063c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e01a      	b.n	800642c <USB_EPStartXfer+0x37a>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d116      	bne.n	800642c <USB_EPStartXfer+0x37a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	623b      	str	r3, [r7, #32]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	4413      	add	r3, r2
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00da      	lsls	r2, r3, #3
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006426:	b29a      	uxth	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	891b      	ldrh	r3, [r3, #8]
 8006430:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6959      	ldr	r1, [r3, #20]
 8006438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800643c:	b29b      	uxth	r3, r3
 800643e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fd19 	bl	8006e7a <USB_WritePMA>
 8006448:	e2e2      	b.n	8006a10 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d16b      	bne.n	800652a <USB_EPStartXfer+0x478>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645c:	b29b      	uxth	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006462:	4413      	add	r3, r2
 8006464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	00da      	lsls	r2, r3, #3
 800646c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646e:	4413      	add	r3, r2
 8006470:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006474:	647b      	str	r3, [r7, #68]	@ 0x44
 8006476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006480:	b29a      	uxth	r2, r3
 8006482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <USB_EPStartXfer+0x3f2>
 800648e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e05d      	b.n	8006560 <USB_EPStartXfer+0x4ae>
 80064a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064aa:	d81c      	bhi.n	80064e6 <USB_EPStartXfer+0x434>
 80064ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <USB_EPStartXfer+0x41a>
 80064c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064c6:	3301      	adds	r3, #1
 80064c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e03c      	b.n	8006560 <USB_EPStartXfer+0x4ae>
 80064e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <USB_EPStartXfer+0x454>
 80064fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006500:	3b01      	subs	r3, #1
 8006502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006510:	b29b      	uxth	r3, r3
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	b29b      	uxth	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e01a      	b.n	8006560 <USB_EPStartXfer+0x4ae>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	785b      	ldrb	r3, [r3, #1]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d116      	bne.n	8006560 <USB_EPStartXfer+0x4ae>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	653b      	str	r3, [r7, #80]	@ 0x50
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006542:	4413      	add	r3, r2
 8006544:	653b      	str	r3, [r7, #80]	@ 0x50
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	00da      	lsls	r2, r3, #3
 800654c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800654e:	4413      	add	r3, r2
 8006550:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800655a:	b29a      	uxth	r2, r3
 800655c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800655e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	891b      	ldrh	r3, [r3, #8]
 8006564:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6959      	ldr	r1, [r3, #20]
 800656c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006570:	b29b      	uxth	r3, r3
 8006572:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc7f 	bl	8006e7a <USB_WritePMA>
            ep->xfer_buff += len;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006584:	441a      	add	r2, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	429a      	cmp	r2, r3
 8006594:	d907      	bls.n	80065a6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	621a      	str	r2, [r3, #32]
 80065a4:	e006      	b.n	80065b4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d16b      	bne.n	8006698 <USB_EPStartXfer+0x5e6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	4413      	add	r3, r2
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	00da      	lsls	r2, r3, #3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	4413      	add	r3, r2
 80065de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <USB_EPStartXfer+0x560>
 80065fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e05b      	b.n	80066ca <USB_EPStartXfer+0x618>
 8006612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006616:	2b3e      	cmp	r3, #62	@ 0x3e
 8006618:	d81c      	bhi.n	8006654 <USB_EPStartXfer+0x5a2>
 800661a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USB_EPStartXfer+0x588>
 8006630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29b      	uxth	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e03a      	b.n	80066ca <USB_EPStartXfer+0x618>
 8006654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800665e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <USB_EPStartXfer+0x5c2>
 800666a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800666e:	3b01      	subs	r3, #1
 8006670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29b      	uxth	r3, r3
 8006684:	4313      	orrs	r3, r2
 8006686:	b29b      	uxth	r3, r3
 8006688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006690:	b29a      	uxth	r2, r3
 8006692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e018      	b.n	80066ca <USB_EPStartXfer+0x618>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d114      	bne.n	80066ca <USB_EPStartXfer+0x618>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ac:	4413      	add	r3, r2
 80066ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00da      	lsls	r2, r3, #3
 80066b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	895b      	ldrh	r3, [r3, #10]
 80066ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6959      	ldr	r1, [r3, #20]
 80066d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fbca 	bl	8006e7a <USB_WritePMA>
 80066e6:	e193      	b.n	8006a10 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006706:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800673c:	4413      	add	r3, r2
 800673e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00da      	lsls	r2, r3, #3
 8006746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006748:	4413      	add	r3, r2
 800674a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800674e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006754:	b29a      	uxth	r2, r3
 8006756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006758:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	891b      	ldrh	r3, [r3, #8]
 800675e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6959      	ldr	r1, [r3, #20]
 8006766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676a:	b29b      	uxth	r3, r3
 800676c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb82 	bl	8006e7a <USB_WritePMA>
 8006776:	e14b      	b.n	8006a10 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 809a 	beq.w	80068d2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d16b      	bne.n	8006882 <USB_EPStartXfer+0x7d0>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067ba:	4413      	add	r3, r2
 80067bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00da      	lsls	r2, r3, #3
 80067c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <USB_EPStartXfer+0x74a>
 80067e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e05b      	b.n	80068b4 <USB_EPStartXfer+0x802>
 80067fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006800:	2b3e      	cmp	r3, #62	@ 0x3e
 8006802:	d81c      	bhi.n	800683e <USB_EPStartXfer+0x78c>
 8006804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800680e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USB_EPStartXfer+0x772>
 800681a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800681e:	3301      	adds	r3, #1
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	4313      	orrs	r3, r2
 8006836:	b29a      	uxth	r2, r3
 8006838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e03a      	b.n	80068b4 <USB_EPStartXfer+0x802>
 800683e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <USB_EPStartXfer+0x7ac>
 8006854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006858:	3b01      	subs	r3, #1
 800685a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800685e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006868:	b29b      	uxth	r3, r3
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	b29b      	uxth	r3, r3
 800686e:	4313      	orrs	r3, r2
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e018      	b.n	80068b4 <USB_EPStartXfer+0x802>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d114      	bne.n	80068b4 <USB_EPStartXfer+0x802>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006890:	b29b      	uxth	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006896:	4413      	add	r3, r2
 8006898:	673b      	str	r3, [r7, #112]	@ 0x70
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	00da      	lsls	r2, r3, #3
 80068a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068a2:	4413      	add	r3, r2
 80068a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	895b      	ldrh	r3, [r3, #10]
 80068b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6959      	ldr	r1, [r3, #20]
 80068c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fad5 	bl	8006e7a <USB_WritePMA>
 80068d0:	e09e      	b.n	8006a10 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d16b      	bne.n	80069b2 <USB_EPStartXfer+0x900>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068ea:	4413      	add	r3, r2
 80068ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	00da      	lsls	r2, r3, #3
 80068f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006908:	b29a      	uxth	r2, r3
 800690a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <USB_EPStartXfer+0x87a>
 8006916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006924:	b29a      	uxth	r2, r3
 8006926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e063      	b.n	80069f4 <USB_EPStartXfer+0x942>
 800692c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006930:	2b3e      	cmp	r3, #62	@ 0x3e
 8006932:	d81c      	bhi.n	800696e <USB_EPStartXfer+0x8bc>
 8006934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <USB_EPStartXfer+0x8a2>
 800694a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800694e:	3301      	adds	r3, #1
 8006950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29a      	uxth	r2, r3
 800695a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29b      	uxth	r3, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	b29a      	uxth	r2, r3
 8006968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e042      	b.n	80069f4 <USB_EPStartXfer+0x942>
 800696e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <USB_EPStartXfer+0x8dc>
 8006984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006988:	3b01      	subs	r3, #1
 800698a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800698e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006998:	b29b      	uxth	r3, r3
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	b29b      	uxth	r3, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e020      	b.n	80069f4 <USB_EPStartXfer+0x942>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d11c      	bne.n	80069f4 <USB_EPStartXfer+0x942>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ce:	4413      	add	r3, r2
 80069d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	00da      	lsls	r2, r3, #3
 80069da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069de:	4413      	add	r3, r2
 80069e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	891b      	ldrh	r3, [r3, #8]
 80069f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6959      	ldr	r1, [r3, #20]
 8006a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa35 	bl	8006e7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a26:	817b      	strh	r3, [r7, #10]
 8006a28:	897b      	ldrh	r3, [r7, #10]
 8006a2a:	f083 0310 	eor.w	r3, r3, #16
 8006a2e:	817b      	strh	r3, [r7, #10]
 8006a30:	897b      	ldrh	r3, [r7, #10]
 8006a32:	f083 0320 	eor.w	r3, r3, #32
 8006a36:	817b      	strh	r3, [r7, #10]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	897b      	ldrh	r3, [r7, #10]
 8006a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8013      	strh	r3, [r2, #0]
 8006a58:	e0d5      	b.n	8006c06 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	7b1b      	ldrb	r3, [r3, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d156      	bne.n	8006b10 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d122      	bne.n	8006ab0 <USB_EPStartXfer+0x9fe>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	78db      	ldrb	r3, [r3, #3]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d11e      	bne.n	8006ab0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]
 8006aae:	e01d      	b.n	8006aec <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d907      	bls.n	8006b08 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	1ad2      	subs	r2, r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	619a      	str	r2, [r3, #24]
 8006b06:	e054      	b.n	8006bb2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	619a      	str	r2, [r3, #24]
 8006b0e:	e050      	b.n	8006bb2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d142      	bne.n	8006b9e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d048      	beq.n	8006bb2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <USB_EPStartXfer+0xa96>
 8006b3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d12e      	bne.n	8006bb2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b54:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d128      	bne.n	8006bb2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	e009      	b.n	8006bb2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d103      	bne.n	8006bae <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	619a      	str	r2, [r3, #24]
 8006bac:	e001      	b.n	8006bb2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e02a      	b.n	8006c08 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006be0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	37b0      	adds	r7, #176	@ 0xb0
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d020      	beq.n	8006c64 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c38:	81bb      	strh	r3, [r7, #12]
 8006c3a:	89bb      	ldrh	r3, [r7, #12]
 8006c3c:	f083 0310 	eor.w	r3, r3, #16
 8006c40:	81bb      	strh	r3, [r7, #12]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	89bb      	ldrh	r3, [r7, #12]
 8006c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	8013      	strh	r3, [r2, #0]
 8006c62:	e01f      	b.n	8006ca4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7a:	81fb      	strh	r3, [r7, #14]
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c82:	81fb      	strh	r3, [r7, #14]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d04c      	beq.n	8006d5e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	823b      	strh	r3, [r7, #16]
 8006cd2:	8a3b      	ldrh	r3, [r7, #16]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01b      	beq.n	8006d14 <USB_EPClearStall+0x62>
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf2:	81fb      	strh	r3, [r7, #14]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	89fb      	ldrh	r3, [r7, #14]
 8006d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d06c      	beq.n	8006df6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d32:	81bb      	strh	r3, [r7, #12]
 8006d34:	89bb      	ldrh	r3, [r7, #12]
 8006d36:	f083 0320 	eor.w	r3, r3, #32
 8006d3a:	81bb      	strh	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	89bb      	ldrh	r3, [r7, #12]
 8006d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	8013      	strh	r3, [r2, #0]
 8006d5c:	e04b      	b.n	8006df6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	82fb      	strh	r3, [r7, #22]
 8006d6c:	8afb      	ldrh	r3, [r7, #22]
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01b      	beq.n	8006dae <USB_EPClearStall+0xfc>
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8c:	82bb      	strh	r3, [r7, #20]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	8abb      	ldrh	r3, [r7, #20]
 8006d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc4:	827b      	strh	r3, [r7, #18]
 8006dc6:	8a7b      	ldrh	r3, [r7, #18]
 8006dc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006dcc:	827b      	strh	r3, [r7, #18]
 8006dce:	8a7b      	ldrh	r3, [r7, #18]
 8006dd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006dd4:	827b      	strh	r3, [r7, #18]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	8a7b      	ldrh	r3, [r7, #18]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d103      	bne.n	8006e1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2280      	movs	r2, #128	@ 0x80
 8006e1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b08b      	sub	sp, #44	@ 0x2c
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	4611      	mov	r1, r2
 8006e86:	461a      	mov	r2, r3
 8006e88:	460b      	mov	r3, r1
 8006e8a:	80fb      	strh	r3, [r7, #6]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e90:	88bb      	ldrh	r3, [r7, #4]
 8006e92:	3301      	adds	r3, #1
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eaa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb0:	e01c      	b.n	8006eec <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	b21b      	sxth	r3, r3
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	b21a      	sxth	r2, r3
 8006ec4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	b21b      	sxth	r3, r3
 8006ecc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	8a7a      	ldrh	r2, [r7, #18]
 8006ed2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	3301      	adds	r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1df      	bne.n	8006eb2 <USB_WritePMA+0x38>
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	372c      	adds	r7, #44	@ 0x2c
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b08b      	sub	sp, #44	@ 0x2c
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	460b      	mov	r3, r1
 8006f10:	80fb      	strh	r3, [r7, #6]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f16:	88bb      	ldrh	r3, [r7, #4]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f26:	88fa      	ldrh	r2, [r7, #6]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f36:	e018      	b.n	8006f6a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	3302      	adds	r3, #2
 8006f44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	3301      	adds	r3, #1
 8006f52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3301      	adds	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	3b01      	subs	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e3      	bne.n	8006f38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006f70:	88bb      	ldrh	r3, [r7, #4]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	701a      	strb	r2, [r3, #0]
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	372c      	adds	r7, #44	@ 0x2c
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fa4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006fa8:	f002 f994 	bl	80092d4 <USBD_static_malloc>
 8006fac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e066      	b.n	800708e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7c1b      	ldrb	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d119      	bne.n	8007004 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	2181      	movs	r1, #129	@ 0x81
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f002 f822 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fe8:	2202      	movs	r2, #2
 8006fea:	2101      	movs	r1, #1
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 f818 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007002:	e016      	b.n	8007032 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007004:	2340      	movs	r3, #64	@ 0x40
 8007006:	2202      	movs	r2, #2
 8007008:	2181      	movs	r1, #129	@ 0x81
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 f809 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007016:	2340      	movs	r3, #64	@ 0x40
 8007018:	2202      	movs	r2, #2
 800701a:	2101      	movs	r1, #1
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 f800 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2210      	movs	r2, #16
 800702e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007032:	2308      	movs	r3, #8
 8007034:	2203      	movs	r2, #3
 8007036:	2182      	movs	r1, #130	@ 0x82
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fff2 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7c1b      	ldrb	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800706e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007072:	2101      	movs	r1, #1
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 f8c3 	bl	8009200 <USBD_LL_PrepareReceive>
 800707a:	e007      	b.n	800708c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007082:	2340      	movs	r3, #64	@ 0x40
 8007084:	2101      	movs	r1, #1
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f002 f8ba 	bl	8009200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070a2:	2181      	movs	r1, #129	@ 0x81
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 ffe2 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070b0:	2101      	movs	r1, #1
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 ffdb 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070c0:	2182      	movs	r1, #130	@ 0x82
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 ffd3 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 f8fc 	bl	80092f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800711c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e0af      	b.n	8007294 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800713c:	2b00      	cmp	r3, #0
 800713e:	d03f      	beq.n	80071c0 <USBD_CDC_Setup+0xb4>
 8007140:	2b20      	cmp	r3, #32
 8007142:	f040 809f 	bne.w	8007284 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d02e      	beq.n	80071ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b25b      	sxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	da16      	bge.n	8007186 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007164:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	88d2      	ldrh	r2, [r2, #6]
 800716a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	88db      	ldrh	r3, [r3, #6]
 8007170:	2b07      	cmp	r3, #7
 8007172:	bf28      	it	cs
 8007174:	2307      	movcs	r3, #7
 8007176:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	89fa      	ldrh	r2, [r7, #14]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 facf 	bl	8008722 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007184:	e085      	b.n	8007292 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	785a      	ldrb	r2, [r3, #1]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800719c:	6939      	ldr	r1, [r7, #16]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fae8 	bl	800877a <USBD_CtlPrepareRx>
      break;
 80071aa:	e072      	b.n	8007292 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	7850      	ldrb	r0, [r2, #1]
 80071b8:	2200      	movs	r2, #0
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	4798      	blx	r3
      break;
 80071be:	e068      	b.n	8007292 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b0b      	cmp	r3, #11
 80071c6:	d852      	bhi.n	800726e <USBD_CDC_Setup+0x162>
 80071c8:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <USBD_CDC_Setup+0xc4>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	08007201 	.word	0x08007201
 80071d4:	0800727d 	.word	0x0800727d
 80071d8:	0800726f 	.word	0x0800726f
 80071dc:	0800726f 	.word	0x0800726f
 80071e0:	0800726f 	.word	0x0800726f
 80071e4:	0800726f 	.word	0x0800726f
 80071e8:	0800726f 	.word	0x0800726f
 80071ec:	0800726f 	.word	0x0800726f
 80071f0:	0800726f 	.word	0x0800726f
 80071f4:	0800726f 	.word	0x0800726f
 80071f8:	0800722b 	.word	0x0800722b
 80071fc:	08007255 	.word	0x08007255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d107      	bne.n	800721c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800720c:	f107 030a 	add.w	r3, r7, #10
 8007210:	2202      	movs	r2, #2
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fa84 	bl	8008722 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800721a:	e032      	b.n	8007282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fa0e 	bl	8008640 <USBD_CtlError>
            ret = USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	75fb      	strb	r3, [r7, #23]
          break;
 8007228:	e02b      	b.n	8007282 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d107      	bne.n	8007246 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007236:	f107 030d 	add.w	r3, r7, #13
 800723a:	2201      	movs	r2, #1
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa6f 	bl	8008722 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007244:	e01d      	b.n	8007282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f9f9 	bl	8008640 <USBD_CtlError>
            ret = USBD_FAIL;
 800724e:	2303      	movs	r3, #3
 8007250:	75fb      	strb	r3, [r7, #23]
          break;
 8007252:	e016      	b.n	8007282 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b03      	cmp	r3, #3
 800725e:	d00f      	beq.n	8007280 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f9ec 	bl	8008640 <USBD_CtlError>
            ret = USBD_FAIL;
 8007268:	2303      	movs	r3, #3
 800726a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800726c:	e008      	b.n	8007280 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f9e5 	bl	8008640 <USBD_CtlError>
          ret = USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	75fb      	strb	r3, [r7, #23]
          break;
 800727a:	e002      	b.n	8007282 <USBD_CDC_Setup+0x176>
          break;
 800727c:	bf00      	nop
 800727e:	e008      	b.n	8007292 <USBD_CDC_Setup+0x186>
          break;
 8007280:	bf00      	nop
      }
      break;
 8007282:	e006      	b.n	8007292 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 f9da 	bl	8008640 <USBD_CtlError>
      ret = USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	75fb      	strb	r3, [r7, #23]
      break;
 8007290:	bf00      	nop
  }

  return (uint8_t)ret;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80072ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e04f      	b.n	800735e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3318      	adds	r3, #24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d029      	beq.n	8007330 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3318      	adds	r3, #24
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	78f9      	ldrb	r1, [r7, #3]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	460b      	mov	r3, r1
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4403      	add	r3, r0
 80072fc:	3320      	adds	r3, #32
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	fbb2 f1f3 	udiv	r1, r2, r3
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800730a:	2b00      	cmp	r3, #0
 800730c:	d110      	bne.n	8007330 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3318      	adds	r3, #24
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007322:	78f9      	ldrb	r1, [r7, #3]
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 ff48 	bl	80091be <USBD_LL_Transmit>
 800732e:	e015      	b.n	800735c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	e015      	b.n	80073b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 ff58 	bl	8009242 <USBD_LL_GetRxDataSize>
 8007392:	4602      	mov	r2, r0
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073ae:	4611      	mov	r1, r2
 80073b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e01a      	b.n	800740c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d014      	beq.n	800740a <USBD_CDC_EP0_RxReady+0x4e>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073e6:	2bff      	cmp	r3, #255	@ 0xff
 80073e8:	d00f      	beq.n	800740a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80073f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007400:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	22ff      	movs	r2, #255	@ 0xff
 8007406:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2243      	movs	r2, #67	@ 0x43
 8007420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007422:	4b03      	ldr	r3, [pc, #12]	@ (8007430 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000094 	.word	0x20000094

08007434 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2243      	movs	r2, #67	@ 0x43
 8007440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007442:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	20000050 	.word	0x20000050

08007454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2243      	movs	r2, #67	@ 0x43
 8007460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007462:	4b03      	ldr	r3, [pc, #12]	@ (8007470 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	200000d8 	.word	0x200000d8

08007474 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	220a      	movs	r2, #10
 8007480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007482:	4b03      	ldr	r3, [pc, #12]	@ (8007490 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	2000000c 	.word	0x2000000c

08007494 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e004      	b.n	80074b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074be:	b480      	push	{r7}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e008      	b.n	80074ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800750a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	e004      	b.n	8007520 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800753a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	e01a      	b.n	8007584 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007554:	2b00      	cmp	r3, #0
 8007556:	d114      	bne.n	8007582 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007576:	2181      	movs	r1, #129	@ 0x81
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fe20 	bl	80091be <USBD_LL_Transmit>

    ret = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800759a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e016      	b.n	80075d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7c1b      	ldrb	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075bc:	2101      	movs	r1, #1
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fe1e 	bl	8009200 <USBD_LL_PrepareReceive>
 80075c4:	e007      	b.n	80075d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075cc:	2340      	movs	r3, #64	@ 0x40
 80075ce:	2101      	movs	r1, #1
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fe15 	bl	8009200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e01f      	b.n	8007638 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	79fa      	ldrb	r2, [r7, #7]
 800762a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f001 fc7d 	bl	8008f2c <USBD_LL_Init>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	e016      	b.n	8007686 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	f107 020e 	add.w	r2, r7, #14
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	4602      	mov	r2, r0
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fca8 	bl	8008fec <USBD_LL_Start>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076c8:	2303      	movs	r3, #3
 80076ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	4611      	mov	r1, r2
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	4611      	mov	r1, r2
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
  }

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 ff48 	bl	80085cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	2b02      	cmp	r3, #2
 800775e:	d01a      	beq.n	8007796 <USBD_LL_SetupStage+0x72>
 8007760:	2b02      	cmp	r3, #2
 8007762:	d822      	bhi.n	80077aa <USBD_LL_SetupStage+0x86>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <USBD_LL_SetupStage+0x4a>
 8007768:	2b01      	cmp	r3, #1
 800776a:	d00a      	beq.n	8007782 <USBD_LL_SetupStage+0x5e>
 800776c:	e01d      	b.n	80077aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9f0 	bl	8007b5c <USBD_StdDevReq>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
      break;
 8007780:	e020      	b.n	80077c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa54 	bl	8007c38 <USBD_StdItfReq>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e016      	b.n	80077c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa93 	bl	8007cca <USBD_StdEPReq>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]
      break;
 80077a8:	e00c      	b.n	80077c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fc77 	bl	80090ac <USBD_LL_StallEP>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	460b      	mov	r3, r1
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d138      	bne.n	8007854 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80077e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d14a      	bne.n	800788a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d913      	bls.n	8007828 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	1ad2      	subs	r2, r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4293      	cmp	r3, r2
 8007818:	bf28      	it	cs
 800781a:	4613      	movcs	r3, r2
 800781c:	461a      	mov	r2, r3
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 ffc7 	bl	80087b4 <USBD_CtlContinueRx>
 8007826:	e030      	b.n	800788a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b03      	cmp	r3, #3
 8007832:	d10b      	bne.n	800784c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 ffc2 	bl	80087d6 <USBD_CtlSendStatus>
 8007852:	e01a      	b.n	800788a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b03      	cmp	r3, #3
 800785e:	d114      	bne.n	800788a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	7afa      	ldrb	r2, [r7, #11]
 8007876:	4611      	mov	r1, r2
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	4798      	blx	r3
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	e000      	b.n	800788c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	460b      	mov	r3, r1
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d16b      	bne.n	8007980 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3314      	adds	r3, #20
 80078ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d156      	bne.n	8007966 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d914      	bls.n	80078ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	1ad2      	subs	r2, r2, r3
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	461a      	mov	r2, r3
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 ff3c 	bl	8008758 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e0:	2300      	movs	r3, #0
 80078e2:	2200      	movs	r2, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 fc8a 	bl	8009200 <USBD_LL_PrepareReceive>
 80078ec:	e03b      	b.n	8007966 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d11c      	bne.n	8007934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007902:	429a      	cmp	r2, r3
 8007904:	d316      	bcc.n	8007934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007910:	429a      	cmp	r2, r3
 8007912:	d20f      	bcs.n	8007934 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 ff1d 	bl	8008758 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007926:	2300      	movs	r3, #0
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f001 fc67 	bl	8009200 <USBD_LL_PrepareReceive>
 8007932:	e018      	b.n	8007966 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b03      	cmp	r3, #3
 800793e:	d10b      	bne.n	8007958 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007958:	2180      	movs	r1, #128	@ 0x80
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 fba6 	bl	80090ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 ff4b 	bl	80087fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d122      	bne.n	80079b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fe98 	bl	80076a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800797e:	e01a      	b.n	80079b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b03      	cmp	r3, #3
 800798a:	d114      	bne.n	80079b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	7afa      	ldrb	r2, [r7, #11]
 80079a2:	4611      	mov	r1, r2
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	4798      	blx	r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	e000      	b.n	80079b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e02f      	b.n	8007a54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00f      	beq.n	8007a1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6852      	ldr	r2, [r2, #4]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	4611      	mov	r1, r2
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a1e:	2340      	movs	r3, #64	@ 0x40
 8007a20:	2200      	movs	r2, #0
 8007a22:	2100      	movs	r1, #0
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fafc 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2240      	movs	r2, #64	@ 0x40
 8007a36:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a3a:	2340      	movs	r3, #64	@ 0x40
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2180      	movs	r1, #128	@ 0x80
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 faee 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2240      	movs	r2, #64	@ 0x40
 8007a50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2204      	movs	r2, #4
 8007a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d106      	bne.n	8007aca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e012      	b.n	8007b14 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d10b      	bne.n	8007b12 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	3301      	adds	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	b21a      	sxth	r2, r3
 8007b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d005      	beq.n	8007b82 <USBD_StdDevReq+0x26>
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d853      	bhi.n	8007c22 <USBD_StdDevReq+0xc6>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <USBD_StdDevReq+0x3a>
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d14f      	bne.n	8007c22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e04a      	b.n	8007c2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d83b      	bhi.n	8007c16 <USBD_StdDevReq+0xba>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <USBD_StdDevReq+0x48>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007c0d 	.word	0x08007c0d
 8007bac:	08007c17 	.word	0x08007c17
 8007bb0:	08007c03 	.word	0x08007c03
 8007bb4:	08007c17 	.word	0x08007c17
 8007bb8:	08007bd7 	.word	0x08007bd7
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007c17 	.word	0x08007c17
 8007bc4:	08007bef 	.word	0x08007bef
 8007bc8:	08007be1 	.word	0x08007be1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f9de 	bl	8007f90 <USBD_GetDescriptor>
          break;
 8007bd4:	e024      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb6d 	bl	80082b8 <USBD_SetAddress>
          break;
 8007bde:	e01f      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fbac 	bl	8008340 <USBD_SetConfig>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
          break;
 8007bec:	e018      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc4b 	bl	800848c <USBD_GetConfig>
          break;
 8007bf6:	e013      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fc7c 	bl	80084f8 <USBD_GetStatus>
          break;
 8007c00:	e00e      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fcab 	bl	8008560 <USBD_SetFeature>
          break;
 8007c0a:	e009      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fcba 	bl	8008588 <USBD_ClrFeature>
          break;
 8007c14:	e004      	b.n	8007c20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fd11 	bl	8008640 <USBD_CtlError>
          break;
 8007c1e:	bf00      	nop
      }
      break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fd0b 	bl	8008640 <USBD_CtlError>
      break;
 8007c2a:	bf00      	nop
  }

  return ret;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c4e:	2b40      	cmp	r3, #64	@ 0x40
 8007c50:	d005      	beq.n	8007c5e <USBD_StdItfReq+0x26>
 8007c52:	2b40      	cmp	r3, #64	@ 0x40
 8007c54:	d82f      	bhi.n	8007cb6 <USBD_StdItfReq+0x7e>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <USBD_StdItfReq+0x26>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d12b      	bne.n	8007cb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d81d      	bhi.n	8007ca8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	889b      	ldrh	r3, [r3, #4]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d813      	bhi.n	8007c9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	88db      	ldrh	r3, [r3, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d110      	bne.n	8007cb2 <USBD_StdItfReq+0x7a>
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10d      	bne.n	8007cb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fd9d 	bl	80087d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c9c:	e009      	b.n	8007cb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fccd 	bl	8008640 <USBD_CtlError>
          break;
 8007ca6:	e004      	b.n	8007cb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fcc8 	bl	8008640 <USBD_CtlError>
          break;
 8007cb0:	e000      	b.n	8007cb4 <USBD_StdItfReq+0x7c>
          break;
 8007cb2:	bf00      	nop
      }
      break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fcc1 	bl	8008640 <USBD_CtlError>
      break;
 8007cbe:	bf00      	nop
  }

  return ret;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	889b      	ldrh	r3, [r3, #4]
 8007cdc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ce6:	2b40      	cmp	r3, #64	@ 0x40
 8007ce8:	d007      	beq.n	8007cfa <USBD_StdEPReq+0x30>
 8007cea:	2b40      	cmp	r3, #64	@ 0x40
 8007cec:	f200 8145 	bhi.w	8007f7a <USBD_StdEPReq+0x2b0>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00c      	beq.n	8007d0e <USBD_StdEPReq+0x44>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	f040 8140 	bne.w	8007f7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e13a      	b.n	8007f84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d007      	beq.n	8007d26 <USBD_StdEPReq+0x5c>
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f300 8129 	bgt.w	8007f6e <USBD_StdEPReq+0x2a4>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d07f      	beq.n	8007e20 <USBD_StdEPReq+0x156>
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d03c      	beq.n	8007d9e <USBD_StdEPReq+0xd4>
 8007d24:	e123      	b.n	8007f6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d002      	beq.n	8007d38 <USBD_StdEPReq+0x6e>
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d016      	beq.n	8007d64 <USBD_StdEPReq+0x9a>
 8007d36:	e02c      	b.n	8007d92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <USBD_StdEPReq+0x90>
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b80      	cmp	r3, #128	@ 0x80
 8007d42:	d00a      	beq.n	8007d5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f9af 	bl	80090ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d4e:	2180      	movs	r1, #128	@ 0x80
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f9ab 	bl	80090ac <USBD_LL_StallEP>
 8007d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d58:	e020      	b.n	8007d9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc6f 	bl	8008640 <USBD_CtlError>
              break;
 8007d62:	e01b      	b.n	8007d9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	885b      	ldrh	r3, [r3, #2]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10e      	bne.n	8007d8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00b      	beq.n	8007d8a <USBD_StdEPReq+0xc0>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b80      	cmp	r3, #128	@ 0x80
 8007d76:	d008      	beq.n	8007d8a <USBD_StdEPReq+0xc0>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d104      	bne.n	8007d8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f991 	bl	80090ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fd23 	bl	80087d6 <USBD_CtlSendStatus>

              break;
 8007d90:	e004      	b.n	8007d9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc53 	bl	8008640 <USBD_CtlError>
              break;
 8007d9a:	bf00      	nop
          }
          break;
 8007d9c:	e0ec      	b.n	8007f78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d002      	beq.n	8007db0 <USBD_StdEPReq+0xe6>
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d016      	beq.n	8007ddc <USBD_StdEPReq+0x112>
 8007dae:	e030      	b.n	8007e12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <USBD_StdEPReq+0x108>
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b80      	cmp	r3, #128	@ 0x80
 8007dba:	d00a      	beq.n	8007dd2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f973 	bl	80090ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc6:	2180      	movs	r1, #128	@ 0x80
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f96f 	bl	80090ac <USBD_LL_StallEP>
 8007dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dd0:	e025      	b.n	8007e1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fc33 	bl	8008640 <USBD_CtlError>
              break;
 8007dda:	e020      	b.n	8007e1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	885b      	ldrh	r3, [r3, #2]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11b      	bne.n	8007e1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f979 	bl	80090ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fcec 	bl	80087d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007e10:	e004      	b.n	8007e1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fc13 	bl	8008640 <USBD_CtlError>
              break;
 8007e1a:	e000      	b.n	8007e1e <USBD_StdEPReq+0x154>
              break;
 8007e1c:	bf00      	nop
          }
          break;
 8007e1e:	e0ab      	b.n	8007f78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d002      	beq.n	8007e32 <USBD_StdEPReq+0x168>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d032      	beq.n	8007e96 <USBD_StdEPReq+0x1cc>
 8007e30:	e097      	b.n	8007f62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <USBD_StdEPReq+0x17e>
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d004      	beq.n	8007e48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fbfd 	bl	8008640 <USBD_CtlError>
                break;
 8007e46:	e091      	b.n	8007f6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da0b      	bge.n	8007e68 <USBD_StdEPReq+0x19e>
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	3310      	adds	r3, #16
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	e00b      	b.n	8007e80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3304      	adds	r3, #4
 8007e80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc47 	bl	8008722 <USBD_CtlSendData>
              break;
 8007e94:	e06a      	b.n	8007f6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da11      	bge.n	8007ec2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	f003 020f 	and.w	r2, r3, #15
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	3324      	adds	r3, #36	@ 0x24
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d117      	bne.n	8007ee8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fbc0 	bl	8008640 <USBD_CtlError>
                  break;
 8007ec0:	e054      	b.n	8007f6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	f003 020f 	and.w	r2, r3, #15
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fbad 	bl	8008640 <USBD_CtlError>
                  break;
 8007ee6:	e041      	b.n	8007f6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	da0b      	bge.n	8007f08 <USBD_StdEPReq+0x23e>
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	3310      	adds	r3, #16
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	4413      	add	r3, r2
 8007f04:	3304      	adds	r3, #4
 8007f06:	e00b      	b.n	8007f20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3304      	adds	r3, #4
 8007f20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <USBD_StdEPReq+0x264>
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b80      	cmp	r3, #128	@ 0x80
 8007f2c:	d103      	bne.n	8007f36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e00e      	b.n	8007f54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f8f4 	bl	8009128 <USBD_LL_IsStallEP>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e002      	b.n	8007f54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2202      	movs	r2, #2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fbe1 	bl	8008722 <USBD_CtlSendData>
              break;
 8007f60:	e004      	b.n	8007f6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fb6b 	bl	8008640 <USBD_CtlError>
              break;
 8007f6a:	bf00      	nop
          }
          break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb65 	bl	8008640 <USBD_CtlError>
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb5f 	bl	8008640 <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	0a1b      	lsrs	r3, r3, #8
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	2b0e      	cmp	r3, #14
 8007fb2:	f200 8152 	bhi.w	800825a <USBD_GetDescriptor+0x2ca>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <USBD_GetDescriptor+0x2c>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	08008085 	.word	0x08008085
 8007fc8:	0800825b 	.word	0x0800825b
 8007fcc:	0800825b 	.word	0x0800825b
 8007fd0:	080081fb 	.word	0x080081fb
 8007fd4:	08008227 	.word	0x08008227
 8007fd8:	0800825b 	.word	0x0800825b
 8007fdc:	0800825b 	.word	0x0800825b
 8007fe0:	0800825b 	.word	0x0800825b
 8007fe4:	0800825b 	.word	0x0800825b
 8007fe8:	0800825b 	.word	0x0800825b
 8007fec:	0800825b 	.word	0x0800825b
 8007ff0:	0800825b 	.word	0x0800825b
 8007ff4:	08007ff9 	.word	0x08007ff9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800801a:	e126      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fb0e 	bl	8008640 <USBD_CtlError>
        err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
      break;
 800802a:	e11e      	b.n	800826a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	7c12      	ldrb	r2, [r2, #16]
 8008038:	f107 0108 	add.w	r1, r7, #8
 800803c:	4610      	mov	r0, r2
 800803e:	4798      	blx	r3
 8008040:	60f8      	str	r0, [r7, #12]
      break;
 8008042:	e112      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7c1b      	ldrb	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10d      	bne.n	8008068 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008054:	f107 0208 	add.w	r2, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	2202      	movs	r2, #2
 8008064:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008066:	e100      	b.n	800826a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
      break;
 8008082:	e0f2      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b05      	cmp	r3, #5
 800808c:	f200 80ac 	bhi.w	80081e8 <USBD_GetDescriptor+0x258>
 8008090:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <USBD_GetDescriptor+0x108>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080e5 	.word	0x080080e5
 80080a0:	08008119 	.word	0x08008119
 80080a4:	0800814d 	.word	0x0800814d
 80080a8:	08008181 	.word	0x08008181
 80080ac:	080081b5 	.word	0x080081b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d2:	e091      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fab2 	bl	8008640 <USBD_CtlError>
            err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
          break;
 80080e2:	e089      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7c12      	ldrb	r2, [r2, #16]
 80080fc:	f107 0108 	add.w	r1, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008106:	e077      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa98 	bl	8008640 <USBD_CtlError>
            err++;
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	3301      	adds	r3, #1
 8008114:	72fb      	strb	r3, [r7, #11]
          break;
 8008116:	e06f      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	7c12      	ldrb	r2, [r2, #16]
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
 8008138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813a:	e05d      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa7e 	bl	8008640 <USBD_CtlError>
            err++;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	3301      	adds	r3, #1
 8008148:	72fb      	strb	r3, [r7, #11]
          break;
 800814a:	e055      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816e:	e043      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa64 	bl	8008640 <USBD_CtlError>
            err++;
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	3301      	adds	r3, #1
 800817c:	72fb      	strb	r3, [r7, #11]
          break;
 800817e:	e03b      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a2:	e029      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa4a 	bl	8008640 <USBD_CtlError>
            err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
          break;
 80081b2:	e021      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	7c12      	ldrb	r2, [r2, #16]
 80081cc:	f107 0108 	add.w	r1, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d6:	e00f      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa30 	bl	8008640 <USBD_CtlError>
            err++;
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	3301      	adds	r3, #1
 80081e4:	72fb      	strb	r3, [r7, #11]
          break;
 80081e6:	e007      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa28 	bl	8008640 <USBD_CtlError>
          err++;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3301      	adds	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80081f6:	bf00      	nop
      }
      break;
 80081f8:	e037      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	7c1b      	ldrb	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800820a:	f107 0208 	add.w	r2, r7, #8
 800820e:	4610      	mov	r0, r2
 8008210:	4798      	blx	r3
 8008212:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008214:	e029      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa11 	bl	8008640 <USBD_CtlError>
        err++;
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	3301      	adds	r3, #1
 8008222:	72fb      	strb	r3, [r7, #11]
      break;
 8008224:	e021      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7c1b      	ldrb	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008236:	f107 0208 	add.w	r2, r7, #8
 800823a:	4610      	mov	r0, r2
 800823c:	4798      	blx	r3
 800823e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	2207      	movs	r2, #7
 8008246:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008248:	e00f      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9f7 	bl	8008640 <USBD_CtlError>
        err++;
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	3301      	adds	r3, #1
 8008256:	72fb      	strb	r3, [r7, #11]
      break;
 8008258:	e007      	b.n	800826a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9ef 	bl	8008640 <USBD_CtlError>
      err++;
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	3301      	adds	r3, #1
 8008266:	72fb      	strb	r3, [r7, #11]
      break;
 8008268:	bf00      	nop
  }

  if (err != 0U)
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11e      	bne.n	80082ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	88db      	ldrh	r3, [r3, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d016      	beq.n	80082a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008278:	893b      	ldrh	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00e      	beq.n	800829c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88da      	ldrh	r2, [r3, #6]
 8008282:	893b      	ldrh	r3, [r7, #8]
 8008284:	4293      	cmp	r3, r2
 8008286:	bf28      	it	cs
 8008288:	4613      	movcs	r3, r2
 800828a:	b29b      	uxth	r3, r3
 800828c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	461a      	mov	r2, r3
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa44 	bl	8008722 <USBD_CtlSendData>
 800829a:	e009      	b.n	80082b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f9ce 	bl	8008640 <USBD_CtlError>
 80082a4:	e004      	b.n	80082b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa95 	bl	80087d6 <USBD_CtlSendStatus>
 80082ac:	e000      	b.n	80082b0 <USBD_GetDescriptor+0x320>
    return;
 80082ae:	bf00      	nop
  }
}
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d131      	bne.n	800832e <USBD_SetAddress+0x76>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	88db      	ldrh	r3, [r3, #6]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12d      	bne.n	800832e <USBD_SetAddress+0x76>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80082d8:	d829      	bhi.n	800832e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d104      	bne.n	80082fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9a3 	bl	8008640 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fa:	e01d      	b.n	8008338 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7bfa      	ldrb	r2, [r7, #15]
 8008300:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 ff39 	bl	8009180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa61 	bl	80087d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2202      	movs	r2, #2
 800831e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008322:	e009      	b.n	8008338 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832c:	e004      	b.n	8008338 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f985 	bl	8008640 <USBD_CtlError>
  }
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	4b4c      	ldr	r3, [pc, #304]	@ (8008488 <USBD_SetConfig+0x148>)
 8008356:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008358:	4b4b      	ldr	r3, [pc, #300]	@ (8008488 <USBD_SetConfig+0x148>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d905      	bls.n	800836c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f96c 	bl	8008640 <USBD_CtlError>
    return USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e088      	b.n	800847e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d002      	beq.n	800837e <USBD_SetConfig+0x3e>
 8008378:	2b03      	cmp	r3, #3
 800837a:	d025      	beq.n	80083c8 <USBD_SetConfig+0x88>
 800837c:	e071      	b.n	8008462 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800837e:	4b42      	ldr	r3, [pc, #264]	@ (8008488 <USBD_SetConfig+0x148>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01c      	beq.n	80083c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008386:	4b40      	ldr	r3, [pc, #256]	@ (8008488 <USBD_SetConfig+0x148>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008390:	4b3d      	ldr	r3, [pc, #244]	@ (8008488 <USBD_SetConfig+0x148>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff f990 	bl	80076bc <USBD_SetClassConfig>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f949 	bl	8008640 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083ae:	e065      	b.n	800847c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa10 	bl	80087d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2203      	movs	r2, #3
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083be:	e05d      	b.n	800847c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa08 	bl	80087d6 <USBD_CtlSendStatus>
      break;
 80083c6:	e059      	b.n	800847c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008488 <USBD_SetConfig+0x148>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d112      	bne.n	80083f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008488 <USBD_SetConfig+0x148>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083e2:	4b29      	ldr	r3, [pc, #164]	@ (8008488 <USBD_SetConfig+0x148>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff f983 	bl	80076f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9f1 	bl	80087d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083f4:	e042      	b.n	800847c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80083f6:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <USBD_SetConfig+0x148>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d02a      	beq.n	800845a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff f971 	bl	80076f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008412:	4b1d      	ldr	r3, [pc, #116]	@ (8008488 <USBD_SetConfig+0x148>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800841c:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <USBD_SetConfig+0x148>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff f94a 	bl	80076bc <USBD_SetClassConfig>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00f      	beq.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f903 	bl	8008640 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f956 	bl	80076f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008450:	e014      	b.n	800847c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9bf 	bl	80087d6 <USBD_CtlSendStatus>
      break;
 8008458:	e010      	b.n	800847c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f9bb 	bl	80087d6 <USBD_CtlSendStatus>
      break;
 8008460:	e00c      	b.n	800847c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f8eb 	bl	8008640 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800846a:	4b07      	ldr	r3, [pc, #28]	@ (8008488 <USBD_SetConfig+0x148>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff f93f 	bl	80076f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008476:	2303      	movs	r3, #3
 8008478:	73fb      	strb	r3, [r7, #15]
      break;
 800847a:	bf00      	nop
  }

  return ret;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	2000028c 	.word	0x2000028c

0800848c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d004      	beq.n	80084a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f8cd 	bl	8008640 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084a6:	e023      	b.n	80084f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	dc02      	bgt.n	80084ba <USBD_GetConfig+0x2e>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc03      	bgt.n	80084c0 <USBD_GetConfig+0x34>
 80084b8:	e015      	b.n	80084e6 <USBD_GetConfig+0x5a>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d00b      	beq.n	80084d6 <USBD_GetConfig+0x4a>
 80084be:	e012      	b.n	80084e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3308      	adds	r3, #8
 80084ca:	2201      	movs	r2, #1
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f927 	bl	8008722 <USBD_CtlSendData>
        break;
 80084d4:	e00c      	b.n	80084f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3304      	adds	r3, #4
 80084da:	2201      	movs	r2, #1
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f91f 	bl	8008722 <USBD_CtlSendData>
        break;
 80084e4:	e004      	b.n	80084f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f8a9 	bl	8008640 <USBD_CtlError>
        break;
 80084ee:	bf00      	nop
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	2b02      	cmp	r3, #2
 800850e:	d81e      	bhi.n	800854e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	88db      	ldrh	r3, [r3, #6]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d004      	beq.n	8008522 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f890 	bl	8008640 <USBD_CtlError>
        break;
 8008520:	e01a      	b.n	8008558 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f043 0202 	orr.w	r2, r3, #2
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	330c      	adds	r3, #12
 8008542:	2202      	movs	r2, #2
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8eb 	bl	8008722 <USBD_CtlSendData>
      break;
 800854c:	e004      	b.n	8008558 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f875 	bl	8008640 <USBD_CtlError>
      break;
 8008556:	bf00      	nop
  }
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d106      	bne.n	8008580 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f92b 	bl	80087d6 <USBD_CtlSendStatus>
  }
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	2b02      	cmp	r3, #2
 800859e:	d80b      	bhi.n	80085b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d10c      	bne.n	80085c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f910 	bl	80087d6 <USBD_CtlSendStatus>
      }
      break;
 80085b6:	e004      	b.n	80085c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f840 	bl	8008640 <USBD_CtlError>
      break;
 80085c0:	e000      	b.n	80085c4 <USBD_ClrFeature+0x3c>
      break;
 80085c2:	bf00      	nop
  }
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3301      	adds	r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fa90 	bl	8007b1c <SWAPBYTE>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff fa83 	bl	8007b1c <SWAPBYTE>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fa76 	bl	8007b1c <SWAPBYTE>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	80da      	strh	r2, [r3, #6]
}
 8008638:	bf00      	nop
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800864a:	2180      	movs	r1, #128	@ 0x80
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fd2d 	bl	80090ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fd29 	bl	80090ac <USBD_LL_StallEP>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d036      	beq.n	80086e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800867c:	6938      	ldr	r0, [r7, #16]
 800867e:	f000 f836 	bl	80086ee <USBD_GetLen>
 8008682:	4603      	mov	r3, r0
 8008684:	3301      	adds	r3, #1
 8008686:	b29b      	uxth	r3, r3
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4413      	add	r3, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	701a      	strb	r2, [r3, #0]
  idx++;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	3301      	adds	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	4413      	add	r3, r2
 80086a8:	2203      	movs	r2, #3
 80086aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	3301      	adds	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086b2:	e013      	b.n	80086dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4413      	add	r3, r2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	7812      	ldrb	r2, [r2, #0]
 80086be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
    idx++;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	3301      	adds	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	3301      	adds	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e7      	bne.n	80086b4 <USBD_GetString+0x52>
 80086e4:	e000      	b.n	80086e8 <USBD_GetString+0x86>
    return;
 80086e6:	bf00      	nop
  }
}
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086fe:	e005      	b.n	800870c <USBD_GetLen+0x1e>
  {
    len++;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	3301      	adds	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3301      	adds	r3, #1
 800870a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f5      	bne.n	8008700 <USBD_GetLen+0x12>
  }

  return len;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2202      	movs	r2, #2
 8008732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	2100      	movs	r1, #0
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fd38 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fd27 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2203      	movs	r2, #3
 800878a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fd2b 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 fd1a 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2204      	movs	r2, #4
 80087e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087e6:	2300      	movs	r3, #0
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fce6 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2205      	movs	r2, #5
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fcf4 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008828:	2200      	movs	r2, #0
 800882a:	4912      	ldr	r1, [pc, #72]	@ (8008874 <MX_USB_Device_Init+0x50>)
 800882c:	4812      	ldr	r0, [pc, #72]	@ (8008878 <MX_USB_Device_Init+0x54>)
 800882e:	f7fe fed7 	bl	80075e0 <USBD_Init>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008838:	f7f7 fef8 	bl	800062c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800883c:	490f      	ldr	r1, [pc, #60]	@ (800887c <MX_USB_Device_Init+0x58>)
 800883e:	480e      	ldr	r0, [pc, #56]	@ (8008878 <MX_USB_Device_Init+0x54>)
 8008840:	f7fe fefe 	bl	8007640 <USBD_RegisterClass>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800884a:	f7f7 feef 	bl	800062c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800884e:	490c      	ldr	r1, [pc, #48]	@ (8008880 <MX_USB_Device_Init+0x5c>)
 8008850:	4809      	ldr	r0, [pc, #36]	@ (8008878 <MX_USB_Device_Init+0x54>)
 8008852:	f7fe fe1f 	bl	8007494 <USBD_CDC_RegisterInterface>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800885c:	f7f7 fee6 	bl	800062c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008860:	4805      	ldr	r0, [pc, #20]	@ (8008878 <MX_USB_Device_Init+0x54>)
 8008862:	f7fe ff14 	bl	800768e <USBD_Start>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800886c:	f7f7 fede 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20000130 	.word	0x20000130
 8008878:	20000290 	.word	0x20000290
 800887c:	20000018 	.word	0x20000018
 8008880:	2000011c 	.word	0x2000011c

08008884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008888:	2200      	movs	r2, #0
 800888a:	4905      	ldr	r1, [pc, #20]	@ (80088a0 <CDC_Init_FS+0x1c>)
 800888c:	4805      	ldr	r0, [pc, #20]	@ (80088a4 <CDC_Init_FS+0x20>)
 800888e:	f7fe fe16 	bl	80074be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008892:	4905      	ldr	r1, [pc, #20]	@ (80088a8 <CDC_Init_FS+0x24>)
 8008894:	4803      	ldr	r0, [pc, #12]	@ (80088a4 <CDC_Init_FS+0x20>)
 8008896:	f7fe fe30 	bl	80074fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800889a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800889c:	4618      	mov	r0, r3
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000960 	.word	0x20000960
 80088a4:	20000290 	.word	0x20000290
 80088a8:	20000560 	.word	0x20000560

080088ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
 80088c8:	4613      	mov	r3, r2
 80088ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b23      	cmp	r3, #35	@ 0x23
 80088d0:	d84a      	bhi.n	8008968 <CDC_Control_FS+0xac>
 80088d2:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <CDC_Control_FS+0x1c>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	08008969 	.word	0x08008969
 80088dc:	08008969 	.word	0x08008969
 80088e0:	08008969 	.word	0x08008969
 80088e4:	08008969 	.word	0x08008969
 80088e8:	08008969 	.word	0x08008969
 80088ec:	08008969 	.word	0x08008969
 80088f0:	08008969 	.word	0x08008969
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008969 	.word	0x08008969
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008969 	.word	0x08008969
 8008904:	08008969 	.word	0x08008969
 8008908:	08008969 	.word	0x08008969
 800890c:	08008969 	.word	0x08008969
 8008910:	08008969 	.word	0x08008969
 8008914:	08008969 	.word	0x08008969
 8008918:	08008969 	.word	0x08008969
 800891c:	08008969 	.word	0x08008969
 8008920:	08008969 	.word	0x08008969
 8008924:	08008969 	.word	0x08008969
 8008928:	08008969 	.word	0x08008969
 800892c:	08008969 	.word	0x08008969
 8008930:	08008969 	.word	0x08008969
 8008934:	08008969 	.word	0x08008969
 8008938:	08008969 	.word	0x08008969
 800893c:	08008969 	.word	0x08008969
 8008940:	08008969 	.word	0x08008969
 8008944:	08008969 	.word	0x08008969
 8008948:	08008969 	.word	0x08008969
 800894c:	08008969 	.word	0x08008969
 8008950:	08008969 	.word	0x08008969
 8008954:	08008969 	.word	0x08008969
 8008958:	08008969 	.word	0x08008969
 800895c:	08008969 	.word	0x08008969
 8008960:	08008969 	.word	0x08008969
 8008964:	08008969 	.word	0x08008969
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008968:	bf00      	nop
  }

  return (USBD_OK);
 800896a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008978:	b5b0      	push	{r4, r5, r7, lr}
 800897a:	b096      	sub	sp, #88	@ 0x58
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Null-terminate the incoming buffer
	    if (*Len < APP_RX_DATA_SIZE) {
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898a:	d205      	bcs.n	8008998 <CDC_Receive_FS+0x20>
	        Buf[*Len] = '\0';
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
	    }

	    char* msg = (char*)Buf;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	653b      	str	r3, [r7, #80]	@ 0x50

	    if (strncmp(msg, "ON", 2) == 0)
 800899c:	2202      	movs	r2, #2
 800899e:	4941      	ldr	r1, [pc, #260]	@ (8008aa4 <CDC_Receive_FS+0x12c>)
 80089a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80089a2:	f000 fd71 	bl	8009488 <strncmp>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d111      	bne.n	80089d0 <CDC_Receive_FS+0x58>
	    {
	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2108      	movs	r1, #8
 80089b0:	483d      	ldr	r0, [pc, #244]	@ (8008aa8 <CDC_Receive_FS+0x130>)
 80089b2:	f7f9 ff99 	bl	80028e8 <HAL_GPIO_WritePin>
	        const char reply[] = "LED is ON\r\n";
 80089b6:	4a3d      	ldr	r2, [pc, #244]	@ (8008aac <CDC_Receive_FS+0x134>)
 80089b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80089bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80089be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 80089c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80089c6:	210b      	movs	r1, #11
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f881 	bl	8008ad0 <CDC_Transmit_FS>
 80089ce:	e05d      	b.n	8008a8c <CDC_Receive_FS+0x114>
	    }
	    else if (strncmp(msg, "OFF", 3) == 0)
 80089d0:	2203      	movs	r2, #3
 80089d2:	4937      	ldr	r1, [pc, #220]	@ (8008ab0 <CDC_Receive_FS+0x138>)
 80089d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80089d6:	f000 fd57 	bl	8009488 <strncmp>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d111      	bne.n	8008a04 <CDC_Receive_FS+0x8c>
	    {
	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80089e0:	2201      	movs	r2, #1
 80089e2:	2108      	movs	r1, #8
 80089e4:	4830      	ldr	r0, [pc, #192]	@ (8008aa8 <CDC_Receive_FS+0x130>)
 80089e6:	f7f9 ff7f 	bl	80028e8 <HAL_GPIO_WritePin>
	        const char reply[] = "LED is OFF\r\n";
 80089ea:	4b32      	ldr	r3, [pc, #200]	@ (8008ab4 <CDC_Receive_FS+0x13c>)
 80089ec:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80089f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089f2:	c407      	stmia	r4!, {r0, r1, r2}
 80089f4:	7023      	strb	r3, [r4, #0]
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 80089f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80089fa:	210c      	movs	r1, #12
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f867 	bl	8008ad0 <CDC_Transmit_FS>
 8008a02:	e043      	b.n	8008a8c <CDC_Receive_FS+0x114>
	    }

	    else if (strncmp(msg, "DAC:", 4) == 0)
 8008a04:	2204      	movs	r2, #4
 8008a06:	492c      	ldr	r1, [pc, #176]	@ (8008ab8 <CDC_Receive_FS+0x140>)
 8008a08:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008a0a:	f000 fd3d 	bl	8009488 <strncmp>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d12d      	bne.n	8008a70 <CDC_Receive_FS+0xf8>
	    {
	        int percent = atoi(msg + 4); // درصد از متن می‌خونه
 8008a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fca5 	bl	8009368 <atoi>
 8008a1e:	6578      	str	r0, [r7, #84]	@ 0x54
	        if (percent < 0) percent = 0;
 8008a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	da01      	bge.n	8008a2a <CDC_Receive_FS+0xb2>
 8008a26:	2300      	movs	r3, #0
 8008a28:	657b      	str	r3, [r7, #84]	@ 0x54
	        if (percent > 100) percent = 100;
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a2c:	2b64      	cmp	r3, #100	@ 0x64
 8008a2e:	dd01      	ble.n	8008a34 <CDC_Receive_FS+0xbc>
 8008a30:	2364      	movs	r3, #100	@ 0x64
 8008a32:	657b      	str	r3, [r7, #84]	@ 0x54

	        // تبدیل درصد به مقدار DAC (0 تا 4095)
	        uint32_t dac_value = (percent * 4095) / 100;
 8008a34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a36:	4613      	mov	r3, r2
 8008a38:	031b      	lsls	r3, r3, #12
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008abc <CDC_Receive_FS+0x144>)
 8008a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8008a42:	1152      	asrs	r2, r2, #5
 8008a44:	17db      	asrs	r3, r3, #31
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
	        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	481b      	ldr	r0, [pc, #108]	@ (8008ac0 <CDC_Receive_FS+0x148>)
 8008a52:	f7f9 fbdf 	bl	8002214 <HAL_DAC_SetValue>

	        const char reply[] = "DAC updated\r\n";
 8008a56:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac4 <CDC_Receive_FS+0x14c>)
 8008a58:	f107 0420 	add.w	r4, r7, #32
 8008a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a5e:	c407      	stmia	r4!, {r0, r1, r2}
 8008a60:	8023      	strh	r3, [r4, #0]
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 8008a62:	f107 0320 	add.w	r3, r7, #32
 8008a66:	210d      	movs	r1, #13
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f831 	bl	8008ad0 <CDC_Transmit_FS>
 8008a6e:	e00d      	b.n	8008a8c <CDC_Receive_FS+0x114>
	    }

	    else
	    {
	        const char reply[] = "Unknown command\r\n";
 8008a70:	4b15      	ldr	r3, [pc, #84]	@ (8008ac8 <CDC_Receive_FS+0x150>)
 8008a72:	f107 040c 	add.w	r4, r7, #12
 8008a76:	461d      	mov	r5, r3
 8008a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	8023      	strh	r3, [r4, #0]
	        CDC_Transmit_FS((uint8_t*)reply, (uint16_t)strlen(reply));
 8008a80:	f107 030c 	add.w	r3, r7, #12
 8008a84:	2111      	movs	r1, #17
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 f822 	bl	8008ad0 <CDC_Transmit_FS>
	    }

	    // Re-arm USB OUT endpoint to receive next packet
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	480f      	ldr	r0, [pc, #60]	@ (8008acc <CDC_Receive_FS+0x154>)
 8008a90:	f7fe fd33 	bl	80074fa <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a94:	480d      	ldr	r0, [pc, #52]	@ (8008acc <CDC_Receive_FS+0x154>)
 8008a96:	f7fe fd79 	bl	800758c <USBD_CDC_ReceivePacket>

	    return (USBD_OK);
 8008a9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3758      	adds	r7, #88	@ 0x58
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa4:	08009518 	.word	0x08009518
 8008aa8:	48000400 	.word	0x48000400
 8008aac:	08009528 	.word	0x08009528
 8008ab0:	0800951c 	.word	0x0800951c
 8008ab4:	08009534 	.word	0x08009534
 8008ab8:	08009520 	.word	0x08009520
 8008abc:	51eb851f 	.word	0x51eb851f
 8008ac0:	2000025c 	.word	0x2000025c
 8008ac4:	08009544 	.word	0x08009544
 8008ac8:	08009554 	.word	0x08009554
 8008acc:	20000290 	.word	0x20000290

08008ad0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <CDC_Transmit_FS+0x48>)
 8008ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ae6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e00b      	b.n	8008b0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008af6:	887b      	ldrh	r3, [r7, #2]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4806      	ldr	r0, [pc, #24]	@ (8008b18 <CDC_Transmit_FS+0x48>)
 8008afe:	f7fe fcde 	bl	80074be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b02:	4805      	ldr	r0, [pc, #20]	@ (8008b18 <CDC_Transmit_FS+0x48>)
 8008b04:	f7fe fd12 	bl	800752c <USBD_CDC_TransmitPacket>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000290 	.word	0x20000290

08008b1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2212      	movs	r2, #18
 8008b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008b52:	4b03      	ldr	r3, [pc, #12]	@ (8008b60 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20000150 	.word	0x20000150

08008b64 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2204      	movs	r2, #4
 8008b74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b76:	4b03      	ldr	r3, [pc, #12]	@ (8008b84 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	20000164 	.word	0x20000164

08008b88 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	6039      	str	r1, [r7, #0]
 8008b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	4907      	ldr	r1, [pc, #28]	@ (8008bbc <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b9e:	4808      	ldr	r0, [pc, #32]	@ (8008bc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ba0:	f7ff fd5f 	bl	8008662 <USBD_GetString>
 8008ba4:	e004      	b.n	8008bb0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	4904      	ldr	r1, [pc, #16]	@ (8008bbc <USBD_CDC_ProductStrDescriptor+0x34>)
 8008baa:	4805      	ldr	r0, [pc, #20]	@ (8008bc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008bac:	f7ff fd59 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb0:	4b02      	ldr	r3, [pc, #8]	@ (8008bbc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000d60 	.word	0x20000d60
 8008bc0:	08009568 	.word	0x08009568

08008bc4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	6039      	str	r1, [r7, #0]
 8008bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	4904      	ldr	r1, [pc, #16]	@ (8008be4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008bd4:	4804      	ldr	r0, [pc, #16]	@ (8008be8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008bd6:	f7ff fd44 	bl	8008662 <USBD_GetString>
  return USBD_StrDesc;
 8008bda:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000d60 	.word	0x20000d60
 8008be8:	08009580 	.word	0x08009580

08008bec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	221a      	movs	r2, #26
 8008bfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bfe:	f000 f843 	bl	8008c88 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008c02:	4b02      	ldr	r3, [pc, #8]	@ (8008c0c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000168 	.word	0x20000168

08008c10 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4907      	ldr	r1, [pc, #28]	@ (8008c44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008c26:	4808      	ldr	r0, [pc, #32]	@ (8008c48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008c28:	f7ff fd1b 	bl	8008662 <USBD_GetString>
 8008c2c:	e004      	b.n	8008c38 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	4904      	ldr	r1, [pc, #16]	@ (8008c44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008c32:	4805      	ldr	r0, [pc, #20]	@ (8008c48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008c34:	f7ff fd15 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c38:	4b02      	ldr	r3, [pc, #8]	@ (8008c44 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000d60 	.word	0x20000d60
 8008c48:	08009594 	.word	0x08009594

08008c4c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d105      	bne.n	8008c6a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	4907      	ldr	r1, [pc, #28]	@ (8008c80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c62:	4808      	ldr	r0, [pc, #32]	@ (8008c84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c64:	f7ff fcfd 	bl	8008662 <USBD_GetString>
 8008c68:	e004      	b.n	8008c74 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c6e:	4805      	ldr	r0, [pc, #20]	@ (8008c84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c70:	f7ff fcf7 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c74:	4b02      	ldr	r3, [pc, #8]	@ (8008c80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000d60 	.word	0x20000d60
 8008c84:	080095a0 	.word	0x080095a0

08008c88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ccc <Get_SerialNum+0x44>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c94:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd0 <Get_SerialNum+0x48>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd4 <Get_SerialNum+0x4c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cae:	2208      	movs	r2, #8
 8008cb0:	4909      	ldr	r1, [pc, #36]	@ (8008cd8 <Get_SerialNum+0x50>)
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f814 	bl	8008ce0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cb8:	2204      	movs	r2, #4
 8008cba:	4908      	ldr	r1, [pc, #32]	@ (8008cdc <Get_SerialNum+0x54>)
 8008cbc:	68b8      	ldr	r0, [r7, #8]
 8008cbe:	f000 f80f 	bl	8008ce0 <IntToUnicode>
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	1fff7590 	.word	0x1fff7590
 8008cd0:	1fff7594 	.word	0x1fff7594
 8008cd4:	1fff7598 	.word	0x1fff7598
 8008cd8:	2000016a 	.word	0x2000016a
 8008cdc:	2000017a 	.word	0x2000017a

08008ce0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]
 8008cf6:	e027      	b.n	8008d48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	0f1b      	lsrs	r3, r3, #28
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d80b      	bhi.n	8008d18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	0f1b      	lsrs	r3, r3, #28
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	440b      	add	r3, r1
 8008d10:	3230      	adds	r2, #48	@ 0x30
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e00a      	b.n	8008d2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	0f1b      	lsrs	r3, r3, #28
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	4619      	mov	r1, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	440b      	add	r3, r1
 8008d28:	3237      	adds	r2, #55	@ 0x37
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	3301      	adds	r3, #1
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	3301      	adds	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]
 8008d48:	7dfa      	ldrb	r2, [r7, #23]
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d3d3      	bcc.n	8008cf8 <IntToUnicode+0x18>
  }
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
	...

08008d60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b094      	sub	sp, #80	@ 0x50
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d68:	f107 030c 	add.w	r3, r7, #12
 8008d6c:	2244      	movs	r2, #68	@ 0x44
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fb81 	bl	8009478 <memset>
  if(pcdHandle->Instance==USB)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a15      	ldr	r2, [pc, #84]	@ (8008dd0 <HAL_PCD_MspInit+0x70>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d122      	bne.n	8008dc6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008d86:	2300      	movs	r3, #0
 8008d88:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fc f87a 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008d9a:	f7f7 fc47 	bl	800062c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd4 <HAL_PCD_MspInit+0x74>)
 8008da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da2:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd4 <HAL_PCD_MspInit+0x74>)
 8008da4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008daa:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <HAL_PCD_MspInit+0x74>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008db2:	60bb      	str	r3, [r7, #8]
 8008db4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	2014      	movs	r0, #20
 8008dbc:	f7f9 f967 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008dc0:	2014      	movs	r0, #20
 8008dc2:	f7f9 f97e 	bl	80020c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3750      	adds	r7, #80	@ 0x50
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40005c00 	.word	0x40005c00
 8008dd4:	40021000 	.word	0x40021000

08008dd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fc98 	bl	8007724 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	440b      	add	r3, r1
 8008e1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe fcd2 	bl	80077ce <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	440b      	add	r3, r1
 8008e52:	3324      	adds	r3, #36	@ 0x24
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f7fe fd1b 	bl	8007894 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fe2f 	bl	8007ad8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	795b      	ldrb	r3, [r3, #5]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d001      	beq.n	8008e9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e96:	f7f7 fbc9 	bl	800062c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ea0:	7bfa      	ldrb	r2, [r7, #15]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fdd9 	bl	8007a5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fd85 	bl	80079c0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fdd4 	bl	8007a7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7a5b      	ldrb	r3, [r3, #9]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008edc:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <HAL_PCD_SuspendCallback+0x30>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4a03      	ldr	r2, [pc, #12]	@ (8008ef0 <HAL_PCD_SuspendCallback+0x30>)
 8008ee2:	f043 0306 	orr.w	r3, r3, #6
 8008ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	e000ed00 	.word	0xe000ed00

08008ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7a5b      	ldrb	r3, [r3, #9]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f04:	4b08      	ldr	r3, [pc, #32]	@ (8008f28 <HAL_PCD_ResumeCallback+0x34>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4a07      	ldr	r2, [pc, #28]	@ (8008f28 <HAL_PCD_ResumeCallback+0x34>)
 8008f0a:	f023 0306 	bic.w	r3, r3, #6
 8008f0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f10:	f000 f9f8 	bl	8009304 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fdc4 	bl	8007aa8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	e000ed00 	.word	0xe000ed00

08008f2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008f34:	4a2b      	ldr	r2, [pc, #172]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a29      	ldr	r2, [pc, #164]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f40:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008f44:	4b27      	ldr	r3, [pc, #156]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f46:	4a28      	ldr	r2, [pc, #160]	@ (8008fe8 <USBD_LL_Init+0xbc>)
 8008f48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f4a:	4b26      	ldr	r3, [pc, #152]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f50:	4b24      	ldr	r3, [pc, #144]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f52:	2202      	movs	r2, #2
 8008f54:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f56:	4b23      	ldr	r3, [pc, #140]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f58:	2202      	movs	r2, #2
 8008f5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008f5c:	4b21      	ldr	r3, [pc, #132]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f62:	4b20      	ldr	r3, [pc, #128]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f68:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f74:	481b      	ldr	r0, [pc, #108]	@ (8008fe4 <USBD_LL_Init+0xb8>)
 8008f76:	f7f9 fccf 	bl	8002918 <HAL_PCD_Init>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008f80:	f7f7 fb54 	bl	800062c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f8a:	2318      	movs	r3, #24
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2100      	movs	r1, #0
 8008f90:	f7fb f956 	bl	8004240 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f9a:	2358      	movs	r3, #88	@ 0x58
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2180      	movs	r1, #128	@ 0x80
 8008fa0:	f7fb f94e 	bl	8004240 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008faa:	23c0      	movs	r3, #192	@ 0xc0
 8008fac:	2200      	movs	r2, #0
 8008fae:	2181      	movs	r1, #129	@ 0x81
 8008fb0:	f7fb f946 	bl	8004240 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008fba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	f7fb f93d 	bl	8004240 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2182      	movs	r1, #130	@ 0x82
 8008fd4:	f7fb f934 	bl	8004240 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000f60 	.word	0x20000f60
 8008fe8:	40005c00 	.word	0x40005c00

08008fec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009002:	4618      	mov	r0, r3
 8009004:	f7f9 fd56 	bl	8002ab4 <HAL_PCD_Start>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f97e 	bl	8009310 <USBD_Get_USB_Status>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009018:	7bbb      	ldrb	r3, [r7, #14]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	461a      	mov	r2, r3
 8009030:	4603      	mov	r3, r0
 8009032:	70fb      	strb	r3, [r7, #3]
 8009034:	460b      	mov	r3, r1
 8009036:	70bb      	strb	r3, [r7, #2]
 8009038:	4613      	mov	r3, r2
 800903a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800904a:	78bb      	ldrb	r3, [r7, #2]
 800904c:	883a      	ldrh	r2, [r7, #0]
 800904e:	78f9      	ldrb	r1, [r7, #3]
 8009050:	f7f9 fe9d 	bl	8002d8e <HAL_PCD_EP_Open>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f958 	bl	8009310 <USBD_Get_USB_Status>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009064:	7bbb      	ldrb	r3, [r7, #14]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7f9 fedd 	bl	8002e4c <HAL_PCD_EP_Close>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f939 	bl	8009310 <USBD_Get_USB_Status>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 ff86 	bl	8002fdc <HAL_PCD_EP_SetStall>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f91a 	bl	8009310 <USBD_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009104:	78fa      	ldrb	r2, [r7, #3]
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7f9 ffb9 	bl	8003080 <HAL_PCD_EP_ClrStall>
 800910e:	4603      	mov	r3, r0
 8009110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f8fb 	bl	8009310 <USBD_Get_USB_Status>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800913a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800913c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009140:	2b00      	cmp	r3, #0
 8009142:	da0b      	bge.n	800915c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	440b      	add	r3, r1
 8009156:	3312      	adds	r3, #18
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	e00b      	b.n	8009174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	440b      	add	r3, r1
 800916e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009172:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f9 fdd1 	bl	8002d46 <HAL_PCD_SetAddress>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f8b0 	bl	8009310 <USBD_Get_USB_Status>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
 80091ca:	460b      	mov	r3, r1
 80091cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80091dc:	7af9      	ldrb	r1, [r7, #11]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f7f9 fec4 	bl	8002f6e <HAL_PCD_EP_Transmit>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f88f 	bl	8009310 <USBD_Get_USB_Status>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	460b      	mov	r3, r1
 800920e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800921e:	7af9      	ldrb	r1, [r7, #11]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	f7f9 fe5a 	bl	8002edc <HAL_PCD_EP_Receive>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f86e 	bl	8009310 <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009238:	7dbb      	ldrb	r3, [r7, #22]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7f9 fe70 	bl	8002f3e <HAL_PCD_EP_GetRxCount>
 800925e:	4603      	mov	r3, r0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <HAL_PCDEx_LPM_Callback+0x18>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d013      	beq.n	80092a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800927e:	e023      	b.n	80092c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7a5b      	ldrb	r3, [r3, #9]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009288:	f000 f83c 	bl	8009304 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800928c:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4a0f      	ldr	r2, [pc, #60]	@ (80092d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009292:	f023 0306 	bic.w	r3, r3, #6
 8009296:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fc02 	bl	8007aa8 <USBD_LL_Resume>
    break;
 80092a4:	e010      	b.n	80092c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fbe5 	bl	8007a7c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	7a5b      	ldrb	r3, [r3, #9]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ba:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	4a04      	ldr	r2, [pc, #16]	@ (80092d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80092c0:	f043 0306 	orr.w	r3, r3, #6
 80092c4:	6113      	str	r3, [r2, #16]
    break;
 80092c6:	bf00      	nop
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	e000ed00 	.word	0xe000ed00

080092d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092dc:	4b03      	ldr	r3, [pc, #12]	@ (80092ec <USBD_static_malloc+0x18>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	2000123c 	.word	0x2000123c

080092f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]

}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009308:	f7f7 f824 	bl	8000354 <SystemClock_Config>
}
 800930c:	bf00      	nop
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d817      	bhi.n	8009354 <USBD_Get_USB_Status+0x44>
 8009324:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <USBD_Get_USB_Status+0x1c>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	0800933d 	.word	0x0800933d
 8009330:	08009343 	.word	0x08009343
 8009334:	08009349 	.word	0x08009349
 8009338:	0800934f 	.word	0x0800934f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73fb      	strb	r3, [r7, #15]
    break;
 8009340:	e00b      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009342:	2303      	movs	r3, #3
 8009344:	73fb      	strb	r3, [r7, #15]
    break;
 8009346:	e008      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009348:	2301      	movs	r3, #1
 800934a:	73fb      	strb	r3, [r7, #15]
    break;
 800934c:	e005      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	73fb      	strb	r3, [r7, #15]
    break;
 8009352:	e002      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	bf00      	nop
  }
  return usb_status;
 800935a:	7bfb      	ldrb	r3, [r7, #15]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <atoi>:
 8009368:	220a      	movs	r2, #10
 800936a:	2100      	movs	r1, #0
 800936c:	f000 b87a 	b.w	8009464 <strtol>

08009370 <_strtol_l.isra.0>:
 8009370:	2b24      	cmp	r3, #36	@ 0x24
 8009372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009376:	4686      	mov	lr, r0
 8009378:	4690      	mov	r8, r2
 800937a:	d801      	bhi.n	8009380 <_strtol_l.isra.0+0x10>
 800937c:	2b01      	cmp	r3, #1
 800937e:	d106      	bne.n	800938e <_strtol_l.isra.0+0x1e>
 8009380:	f000 f894 	bl	80094ac <__errno>
 8009384:	2316      	movs	r3, #22
 8009386:	6003      	str	r3, [r0, #0]
 8009388:	2000      	movs	r0, #0
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	4834      	ldr	r0, [pc, #208]	@ (8009460 <_strtol_l.isra.0+0xf0>)
 8009390:	460d      	mov	r5, r1
 8009392:	462a      	mov	r2, r5
 8009394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009398:	5d06      	ldrb	r6, [r0, r4]
 800939a:	f016 0608 	ands.w	r6, r6, #8
 800939e:	d1f8      	bne.n	8009392 <_strtol_l.isra.0+0x22>
 80093a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80093a2:	d110      	bne.n	80093c6 <_strtol_l.isra.0+0x56>
 80093a4:	782c      	ldrb	r4, [r5, #0]
 80093a6:	2601      	movs	r6, #1
 80093a8:	1c95      	adds	r5, r2, #2
 80093aa:	f033 0210 	bics.w	r2, r3, #16
 80093ae:	d115      	bne.n	80093dc <_strtol_l.isra.0+0x6c>
 80093b0:	2c30      	cmp	r4, #48	@ 0x30
 80093b2:	d10d      	bne.n	80093d0 <_strtol_l.isra.0+0x60>
 80093b4:	782a      	ldrb	r2, [r5, #0]
 80093b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093ba:	2a58      	cmp	r2, #88	@ 0x58
 80093bc:	d108      	bne.n	80093d0 <_strtol_l.isra.0+0x60>
 80093be:	786c      	ldrb	r4, [r5, #1]
 80093c0:	3502      	adds	r5, #2
 80093c2:	2310      	movs	r3, #16
 80093c4:	e00a      	b.n	80093dc <_strtol_l.isra.0+0x6c>
 80093c6:	2c2b      	cmp	r4, #43	@ 0x2b
 80093c8:	bf04      	itt	eq
 80093ca:	782c      	ldrbeq	r4, [r5, #0]
 80093cc:	1c95      	addeq	r5, r2, #2
 80093ce:	e7ec      	b.n	80093aa <_strtol_l.isra.0+0x3a>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1f6      	bne.n	80093c2 <_strtol_l.isra.0+0x52>
 80093d4:	2c30      	cmp	r4, #48	@ 0x30
 80093d6:	bf14      	ite	ne
 80093d8:	230a      	movne	r3, #10
 80093da:	2308      	moveq	r3, #8
 80093dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093e4:	2200      	movs	r2, #0
 80093e6:	fbbc f9f3 	udiv	r9, ip, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80093f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093f4:	2f09      	cmp	r7, #9
 80093f6:	d80f      	bhi.n	8009418 <_strtol_l.isra.0+0xa8>
 80093f8:	463c      	mov	r4, r7
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	dd1b      	ble.n	8009436 <_strtol_l.isra.0+0xc6>
 80093fe:	1c57      	adds	r7, r2, #1
 8009400:	d007      	beq.n	8009412 <_strtol_l.isra.0+0xa2>
 8009402:	4581      	cmp	r9, r0
 8009404:	d314      	bcc.n	8009430 <_strtol_l.isra.0+0xc0>
 8009406:	d101      	bne.n	800940c <_strtol_l.isra.0+0x9c>
 8009408:	45a2      	cmp	sl, r4
 800940a:	db11      	blt.n	8009430 <_strtol_l.isra.0+0xc0>
 800940c:	fb00 4003 	mla	r0, r0, r3, r4
 8009410:	2201      	movs	r2, #1
 8009412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009416:	e7eb      	b.n	80093f0 <_strtol_l.isra.0+0x80>
 8009418:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800941c:	2f19      	cmp	r7, #25
 800941e:	d801      	bhi.n	8009424 <_strtol_l.isra.0+0xb4>
 8009420:	3c37      	subs	r4, #55	@ 0x37
 8009422:	e7ea      	b.n	80093fa <_strtol_l.isra.0+0x8a>
 8009424:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009428:	2f19      	cmp	r7, #25
 800942a:	d804      	bhi.n	8009436 <_strtol_l.isra.0+0xc6>
 800942c:	3c57      	subs	r4, #87	@ 0x57
 800942e:	e7e4      	b.n	80093fa <_strtol_l.isra.0+0x8a>
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	e7ed      	b.n	8009412 <_strtol_l.isra.0+0xa2>
 8009436:	1c53      	adds	r3, r2, #1
 8009438:	d108      	bne.n	800944c <_strtol_l.isra.0+0xdc>
 800943a:	2322      	movs	r3, #34	@ 0x22
 800943c:	f8ce 3000 	str.w	r3, [lr]
 8009440:	4660      	mov	r0, ip
 8009442:	f1b8 0f00 	cmp.w	r8, #0
 8009446:	d0a0      	beq.n	800938a <_strtol_l.isra.0+0x1a>
 8009448:	1e69      	subs	r1, r5, #1
 800944a:	e006      	b.n	800945a <_strtol_l.isra.0+0xea>
 800944c:	b106      	cbz	r6, 8009450 <_strtol_l.isra.0+0xe0>
 800944e:	4240      	negs	r0, r0
 8009450:	f1b8 0f00 	cmp.w	r8, #0
 8009454:	d099      	beq.n	800938a <_strtol_l.isra.0+0x1a>
 8009456:	2a00      	cmp	r2, #0
 8009458:	d1f6      	bne.n	8009448 <_strtol_l.isra.0+0xd8>
 800945a:	f8c8 1000 	str.w	r1, [r8]
 800945e:	e794      	b.n	800938a <_strtol_l.isra.0+0x1a>
 8009460:	080095c1 	.word	0x080095c1

08009464 <strtol>:
 8009464:	4613      	mov	r3, r2
 8009466:	460a      	mov	r2, r1
 8009468:	4601      	mov	r1, r0
 800946a:	4802      	ldr	r0, [pc, #8]	@ (8009474 <strtol+0x10>)
 800946c:	6800      	ldr	r0, [r0, #0]
 800946e:	f7ff bf7f 	b.w	8009370 <_strtol_l.isra.0>
 8009472:	bf00      	nop
 8009474:	20000184 	.word	0x20000184

08009478 <memset>:
 8009478:	4402      	add	r2, r0
 800947a:	4603      	mov	r3, r0
 800947c:	4293      	cmp	r3, r2
 800947e:	d100      	bne.n	8009482 <memset+0xa>
 8009480:	4770      	bx	lr
 8009482:	f803 1b01 	strb.w	r1, [r3], #1
 8009486:	e7f9      	b.n	800947c <memset+0x4>

08009488 <strncmp>:
 8009488:	b510      	push	{r4, lr}
 800948a:	b16a      	cbz	r2, 80094a8 <strncmp+0x20>
 800948c:	3901      	subs	r1, #1
 800948e:	1884      	adds	r4, r0, r2
 8009490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009498:	429a      	cmp	r2, r3
 800949a:	d103      	bne.n	80094a4 <strncmp+0x1c>
 800949c:	42a0      	cmp	r0, r4
 800949e:	d001      	beq.n	80094a4 <strncmp+0x1c>
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	d1f5      	bne.n	8009490 <strncmp+0x8>
 80094a4:	1ad0      	subs	r0, r2, r3
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	4610      	mov	r0, r2
 80094aa:	e7fc      	b.n	80094a6 <strncmp+0x1e>

080094ac <__errno>:
 80094ac:	4b01      	ldr	r3, [pc, #4]	@ (80094b4 <__errno+0x8>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000184 	.word	0x20000184

080094b8 <__libc_init_array>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4d0d      	ldr	r5, [pc, #52]	@ (80094f0 <__libc_init_array+0x38>)
 80094bc:	4c0d      	ldr	r4, [pc, #52]	@ (80094f4 <__libc_init_array+0x3c>)
 80094be:	1b64      	subs	r4, r4, r5
 80094c0:	10a4      	asrs	r4, r4, #2
 80094c2:	2600      	movs	r6, #0
 80094c4:	42a6      	cmp	r6, r4
 80094c6:	d109      	bne.n	80094dc <__libc_init_array+0x24>
 80094c8:	4d0b      	ldr	r5, [pc, #44]	@ (80094f8 <__libc_init_array+0x40>)
 80094ca:	4c0c      	ldr	r4, [pc, #48]	@ (80094fc <__libc_init_array+0x44>)
 80094cc:	f000 f818 	bl	8009500 <_init>
 80094d0:	1b64      	subs	r4, r4, r5
 80094d2:	10a4      	asrs	r4, r4, #2
 80094d4:	2600      	movs	r6, #0
 80094d6:	42a6      	cmp	r6, r4
 80094d8:	d105      	bne.n	80094e6 <__libc_init_array+0x2e>
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e0:	4798      	blx	r3
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7ee      	b.n	80094c4 <__libc_init_array+0xc>
 80094e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ea:	4798      	blx	r3
 80094ec:	3601      	adds	r6, #1
 80094ee:	e7f2      	b.n	80094d6 <__libc_init_array+0x1e>
 80094f0:	080096c4 	.word	0x080096c4
 80094f4:	080096c4 	.word	0x080096c4
 80094f8:	080096c4 	.word	0x080096c4
 80094fc:	080096c8 	.word	0x080096c8

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
